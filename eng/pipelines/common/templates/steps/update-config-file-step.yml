#################################################################################
# Licensed to the .NET Foundation under one or more agreements.                 #
# The .NET Foundation licenses this file to you under the MIT license.          #
# See the LICENSE file in the project root for more information.                #
#################################################################################
parameters:
  - name: debug
    type: boolean
    default: false

  - name: TCPConnectionString
    type: string
    default: ''

  - name: NPConnectionString
    type: string
    default: ''

  - name: TCPConnectionStringHGSVBS
    type: string
    default: ''

  - name: TCPConnectionStringNoneVBS
    type: string
    default: ''

  - name: TCPConnectionStringAASSGX
    type: string
    default: ''

  - name: EnclaveEnabled
    type: boolean
    default: false

  - name: TracingEnabled
    type: boolean
    default: false
    
  - name: AADAuthorityURL
    type: string
    default: ''
  
  - name: AADPasswordConnectionString
    type: string
    default: ''

  - name: AADServicePrincipalId
    type: string
    default: ''

  - name: AADServicePrincipalSecret
    type: string
    default: ''

  - name: AzureKeyVaultUrl
    type: string
    default: ''

  - name: AzureKeyVaultTenantId
    type: string
    default: ''

  - name: UseManagedSNIOnWindows
    type: boolean
    default: false

  - name: UserManagedIdentityClientId
    type: string
    default: ''

  - name: FileStreamDirectory
    type: string
    default: ''

  - name: LocalDbAppName 
    type: string
    default: ''

  - name: LocalDbSharedInstanceName 
    type: string
    default: ''

  - name: AliasName 
    type: string
    default: ''

  - name: SupportsIntegratedSecurity
    type: boolean
    default: false

  - name: SupportsFileStream
    type: boolean
    default: false

  - name: DNSCachingConnString 
    type: string
    default: ''

  - name: DNSCachingServerCR 
    type: string
    default: ''

  - name: DNSCachingServerTR 
    type: string
    default: ''

  - name: EnclaveAzureDatabaseConnString 
    type: string
    default: ''

  - name: IsDNSCachingSupportedCR
    type: boolean
    default: false

  - name: IsDNSCachingSupportedTR
    type: boolean
    default: false

  - name: IsAzureSynapse
    type: boolean
    default: false

  - name: ManagedIdentitySupported
    type: boolean
    default: true

steps:
# All properties should be added here, and this template should be used for any manipulation of the config.json file.
- powershell: |
    $jdata = Get-Content -Raw "config.default.json" | ConvertFrom-Json
    foreach ($p in $jdata)
    {
        try
        {
            $p.TCPConnectionString="${{parameters.TCPConnectionString }}"
        }
        catch
        {
            "Couldn't load TCPConnectionString"
        }

        try
        {
            $p.NPConnectionString="${{parameters.NPConnectionString }}"
        }
        catch
        {
            "Couldn't load NPConnectionString"
        }

        try
        {
            $p.AADAuthorityURL="${{parameters.AADAuthorityURL }}"
        }
        catch
        {
            "Couldn't load AADAuthorityURL"
        }

        try
        {
            $p.AADPasswordConnectionString="${{parameters.AADPasswordConnectionString }}"
        }
        catch
        {
            "Couldn't load AADPasswordConnectionString"
        }

        try
        {
            $p.AADServicePrincipalId="${{parameters.AADServicePrincipalId }}"
        }
        catch
        {
            "Couldn't load AADServicePrincipalId"
        }

        try
        {
            $p.AADServicePrincipalSecret="${{parameters.AADServicePrincipalSecret }}"
        }
        catch
        {
            "Couldn't load AADServicePrincipalSecret"
        }

        try
        {
            $p.AzureKeyVaultUrl="${{parameters.AzureKeyVaultUrl }}"
        }
        catch
        {
            "Couldn't load AzureKeyVaultUrl"
        }

        try
        {
            $p.AzureKeyVaultTenantId="${{parameters.AzureKeyVaultTenantId }}"
        }
        catch
        {
            "Couldn't load AzureKeyVaultTenantId"
        }

        try
        {
            $p.UserManagedIdentityClientId="${{parameters.UserManagedIdentityClientId }}"
        }
        catch
        {
            "Couldn't load UserManagedIdentityClientId"
        }

        try
        {
            $p.FileStreamDirectory="${{parameters.FileStreamDirectory }}"
        }
        catch
        {
            "Couldn't load FileStreamDirectory"
        }

        try
        {
            $p.LocalDbSharedInstanceName="${{parameters.LocalDbSharedInstanceName }}"
        }
        catch
        {
            "Couldn't load LocalDbSharedInstanceName"
        }

        try
        {
            $p.AliasName="${{parameters.AliasName }}"
        }
        catch
        {
            "Couldn't load AliasName"
        }

        try
        {
            $p.EnclaveAzureDatabaseConnString="${{parameters.EnclaveAzureDatabaseConnString }}"
        }
        catch
        {
            "Couldn't load EnclaveAzureDatabaseConnString"
        }

        try
        {
            $p.DNSCachingServerTR="${{parameters.DNSCachingServerTR }}"
        }
        catch
        {
            "Couldn't load DNSCachingServerTR"
        }

        try
        {
            $p.DNSCachingServerCR="${{parameters.DNSCachingServerCR }}"
        }
        catch
        {
            "Couldn't load DNSCachingServerCR"
        }

        try
        {
            $p.DNSCachingConnString="${{parameters.DNSCachingConnString }}"
        }
        catch
        {
            "Couldn't load DNSCachingConnString"
        }

        try
        {
            $p.SupportsFileStream="${{parameters.SupportsFileStream }}"
        }
        catch
        {
            "Couldn't load SupportsFileStream"
        }

        try
        {
            $p.LocalDbAppName="${{parameters.LocalDbAppName }}"
        }
        catch
        {
            "Couldn't load LocalDbAppName"
        }

        try
        {
            $p.TCPConnectionStringAASSGX="${{parameters.TCPConnectionStringAASSGX }}"
        }
        catch
        {
            "Couldn't load TCPConnectionStringAASSGX"
        }

        try
        {
            $p.TCPConnectionStringNoneVBS="${{parameters.TCPConnectionStringNoneVBS }}"
        }
        catch
        {
            "Couldn't load TCPConnectionStringNoneVBS"
        }

        try
        {
            $p.TCPConnectionStringHGSVBS="${{parameters.TCPConnectionStringHGSVBS }}"
        }
        catch
        {
            "Couldn't load TCPConnectionStringHGSVBS"
        }

        try
        {
            $p.UseManagedSNIOnWindows=[System.Convert]::ToBoolean("${{parameters.UseManagedSNIOnWindows }}")
        }
        catch
        {
            "Couldn't load UseManagedSNIOnWindows"
        }

        try
        {
            $p.SupportsIntegratedSecurity=[System.Convert]::ToBoolean("${{parameters.SupportsIntegratedSecurity }}")
        }
        catch
        {
            "Couldn't load SupportsIntegratedSecurity"
        }

        try
        {
            $p.ManagedIdentitySupported=[System.Convert]::ToBoolean("${{parameters.ManagedIdentitySupported }}")
        }
        catch
        {
            "Couldn't load ManagedIdentitySupported"
        }

        try
        {
            $p.IsAzureSynapse=[System.Convert]::ToBoolean("${{parameters.IsAzureSynapse }}")
        }
        catch
        {
            "Couldn't load IsAzureSynapse"
        }

        try
        {
            $p.IsDNSCachingSupportedTR=[System.Convert]::ToBoolean("${{parameters.IsDNSCachingSupportedTR }}")
        }
        catch
        {
            "Couldn't load IsDNSCachingSupportedTR"
        }

        try
        {
            $p.IsDNSCachingSupportedCR=[System.Convert]::ToBoolean("${{parameters.IsDNSCachingSupportedCR }}")
        }
        catch
        {
            "Couldn't load IsDNSCachingSupportedCR"
        }

        try
        {
            $p.TracingEnabled=[System.Convert]::ToBoolean("${{parameters.TracingEnabled }}")
        }
        catch
        {
            "Couldn't load TracingEnabled"
        }

        try
        {
            $p.EnclaveEnabled=[System.Convert]::ToBoolean("${{parameters.EnclaveEnabled }}")
        }
        catch
        {
            "Couldn't load EnclaveEnabled"
        }
    }
    $jdata | ConvertTo-Json | Set-Content "config.json"
  workingDirectory: src/Microsoft.Data.SqlClient/tests/tools/Microsoft.Data.SqlClient.TestUtilities
  displayName: 'Update config.json'

- ${{ if eq(parameters.debug, true) }}:
  - powershell: |
      $jdata = Get-Content -Raw "config.json" | ConvertFrom-Json
      foreach ($p in $jdata)
      {
          foreach ($prop in $p.PSObject.Properties)
          {
              Write-Host "Property: $($prop.Name) Value: $($prop.Value)"
          }
      }
    workingDirectory: src/Microsoft.Data.SqlClient/tests/tools/Microsoft.Data.SqlClient.TestUtilities
    displayName: 'Read config.json [debug]'
