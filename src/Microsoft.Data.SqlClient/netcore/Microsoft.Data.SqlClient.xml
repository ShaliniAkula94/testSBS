<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Microsoft.Data.SqlClient</name>
    </assembly>
    <members>
        <member name="M:Microsoft.Data.Common.DbConnectionStringBuilderUtil.ConvertToPoolBlockingPeriod(System.String,System.Object)">
            <summary>
            This method attempts to convert the given value to a PoolBlockingPeriod enum. The algorithm is:
            * if the value is from type string, it will be matched against PoolBlockingPeriod enum names only, using ordinal, case-insensitive comparer
            * if the value is from type PoolBlockingPeriod, it will be used as is
            * if the value is from integral type (SByte, Int16, Int32, Int64, Byte, UInt16, UInt32, or UInt64), it will be converted to enum
            * if the value is another enum or any other type, it will be blocked with an appropriate ArgumentException
            
            in any case above, if the conerted value is out of valid range, the method raises ArgumentOutOfRangeException.
            </summary>
            <returns>PoolBlockingPeriod value in the valid range</returns>
        </member>
        <member name="F:Microsoft.Data.Common.DbConnectionStringBuilderUtil.ColumnEncryptionSettingEnabledString">
            <summary>
            Column Encryption Setting.
            </summary>
        </member>
        <member name="M:Microsoft.Data.Common.DbConnectionStringBuilderUtil.TryConvertToColumnEncryptionSetting(System.String,Microsoft.Data.SqlClient.SqlConnectionColumnEncryptionSetting@)">
            <summary>
            Convert a string value to the corresponding SqlConnectionColumnEncryptionSetting.
            </summary>
            <param name="value"></param>
            <param name="result"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Data.Common.DbConnectionStringBuilderUtil.IsValidColumnEncryptionSetting(Microsoft.Data.SqlClient.SqlConnectionColumnEncryptionSetting)">
            <summary>
            Is it a valid connection level column encryption setting ?
            </summary>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Data.Common.DbConnectionStringBuilderUtil.ColumnEncryptionSettingToString(Microsoft.Data.SqlClient.SqlConnectionColumnEncryptionSetting)">
            <summary>
            Convert connection level column encryption setting value to string.
            </summary>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Data.Common.DbConnectionStringBuilderUtil.ConvertToApplicationIntent(System.String,System.Object)">
            <summary>
            This method attempts to convert the given value tp ApplicationIntent enum. The algorithm is:
            * if the value is from type string, it will be matched against ApplicationIntent enum names only, using ordinal, case-insensitive comparer
            * if the value is from type ApplicationIntent, it will be used as is
            * if the value is from integral type (SByte, Int16, Int32, Int64, Byte, UInt16, UInt32, or UInt64), it will be converted to enum
            * if the value is another enum or any other type, it will be blocked with an appropriate ArgumentException
            
            in any case above, if the converted value is out of valid range, the method raises ArgumentOutOfRangeException.
            </summary>
            <returns>application intent value in the valid range</returns>
        </member>
        <member name="M:Microsoft.Data.Common.DbConnectionStringBuilderUtil.ConvertToColumnEncryptionSetting(System.String,System.Object)">
            <summary>
            Convert the provided value to a SqlConnectionColumnEncryptionSetting.
            </summary>
            <param name="keyword"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="T:Microsoft.Data.Common.ActivityCorrelator">
            <summary>
            This class defines the data structure for ActivityId used for correlated tracing between client (bid trace event) and server (XEvent).
            It also includes all the APIs used to access the ActivityId. Note: ActivityId is thread based which is stored in TLS.
            </summary>
        </member>
        <member name="P:Microsoft.Data.Common.ActivityCorrelator.Current">
            <summary>
            Get the current ActivityId
            </summary>
        </member>
        <member name="M:Microsoft.Data.Common.ActivityCorrelator.Next">
            <summary>
            Increment the sequence number and generate the new ActivityId
            </summary>
            <returns>ActivityId</returns>
        </member>
        <member name="F:Microsoft.Data.ProviderBase.DbConnectionPool._pooledDbAuthenticationContexts">
            <summary>
            The private member which carries the set of authenticationcontexts for this pool (based on the user's identity).
            </summary>
        </member>
        <member name="P:Microsoft.Data.ProviderBase.DbConnectionPool.AuthenticationContexts">
            <summary>
            Return the pooled authentication contexts.
            </summary>
        </member>
        <member name="M:Microsoft.Data.ProviderBase.DbConnectionPool.ReplaceConnection(System.Data.Common.DbConnection,Microsoft.Data.Common.DbConnectionOptions,Microsoft.Data.ProviderBase.DbConnectionInternal)">
            <summary>
            Creates a new connection to replace an existing connection
            </summary>
            <param name="owningObject">Outer connection that currently owns <paramref name="oldConnection"/></param>
            <param name="userOptions">Options used to create the new connection</param>
            <param name="oldConnection">Inner connection that will be replaced</param>
            <returns>A new inner connection that is attached to the <paramref name="owningObject"/></returns>
        </member>
        <member name="M:Microsoft.Data.ProviderBase.DbConnectionInternal.DoomThisConnection">
            <devdoc>Ensure that this connection cannot be put back into the pool.</devdoc>
        </member>
        <member name="M:Microsoft.Data.ProviderBase.DbConnectionInternal.TryOpenConnection(System.Data.Common.DbConnection,Microsoft.Data.ProviderBase.DbConnectionFactory,System.Threading.Tasks.TaskCompletionSource{Microsoft.Data.ProviderBase.DbConnectionInternal},Microsoft.Data.Common.DbConnectionOptions)">
            <devdoc>The default implementation is for the open connection objects, and
            it simply throws.  Our private closed-state connection objects
            override this and do the correct thing.</devdoc>
        </member>
        <member name="M:Microsoft.Data.ProviderBase.DbConnectionInternal.IsConnectionAlive(System.Boolean)">
            <summary>
            When overridden in a derived class, will check if the underlying connection is still actually alive
            </summary>
            <param name="throwOnException">If true an exception will be thrown if the connection is dead instead of returning true\false
            (this allows the caller to have the real reason that the connection is not alive (e.g. network error, etc))</param>
            <returns>True if the connection is still alive, otherwise false (If not overridden, then always true)</returns>
        </member>
        <member name="P:Microsoft.Data.ProviderBase.DbConnectionInternal.EnlistedTransactionDisposed">
            <summary>
            Get boolean value that indicates whether the enlisted transaction has been disposed.
            </summary>
            <value>
            True if there is an enlisted transaction, and it has been disposed.
            False if there is an enlisted transaction that has not been disposed, or if the transaction reference is null.
            </value>
            <remarks>
            This method must be called while holding a lock on the DbConnectionInternal instance.
            </remarks>
        </member>
        <member name="T:Microsoft.Data.ProviderBase.DbConnectionPoolAuthenticationContext">
            <summary>
            Represents the context of an authentication attempt when using the new active directory based authentication mechanisms.
            All data members, except_isUpdateInProgressCounter, should be immutable.
            </summary>
        </member>
        <member name="F:Microsoft.Data.ProviderBase.DbConnectionPoolAuthenticationContext.STATUS_LOCKED">
            <summary>
            The value expected in _isUpdateInProgress if a thread has taken a lock on this context,
            to perform the update on the context.
            </summary>
        </member>
        <member name="F:Microsoft.Data.ProviderBase.DbConnectionPoolAuthenticationContext.STATUS_UNLOCKED">
            <summary>
            The value expected in _isUpdateInProgress if no thread has taken a lock on this context.
            </summary>
        </member>
        <member name="F:Microsoft.Data.ProviderBase.DbConnectionPoolAuthenticationContext._accessToken">
            <summary>
            Access Token, which is obtained from Active Directory Authentication Library for SQL Server, and needs to be sent to SQL Server
            as part of TDS Token type Federated Authentication Token.
            </summary>
        </member>
        <member name="F:Microsoft.Data.ProviderBase.DbConnectionPoolAuthenticationContext._expirationTime">
            <summary>
            Expiration time of the above access token.
            </summary>
        </member>
        <member name="F:Microsoft.Data.ProviderBase.DbConnectionPoolAuthenticationContext._isUpdateInProgress">
            <summary>
            A member which is used to achieve a lock to control refresh attempt on this context.
            </summary>
        </member>
        <member name="M:Microsoft.Data.ProviderBase.DbConnectionPoolAuthenticationContext.#ctor(System.Byte[],System.DateTime)">
            <summary>
            Constructor.
            </summary>
            <param name="accessToken">Access Token that will be used to connect to SQL Server. Carries identity information about a user.</param>
            <param name="expirationTime">The expiration time in UTC for the above accessToken.</param>
        </member>
        <member name="M:Microsoft.Data.ProviderBase.DbConnectionPoolAuthenticationContext.ChooseAuthenticationContextToUpdate(Microsoft.Data.ProviderBase.DbConnectionPoolAuthenticationContext,Microsoft.Data.ProviderBase.DbConnectionPoolAuthenticationContext)">
            <summary>
            Static Method.
            Given two contexts, choose one to update in the cache. Chooses based on expiration time.
            </summary>
            <param name="context1">Context1</param>
            <param name="context2">Context2</param>
        </member>
        <member name="M:Microsoft.Data.ProviderBase.DbConnectionPoolAuthenticationContext.LockToUpdate">
            <summary>
            Try locking the variable _isUpdateInProgressCounter and return if this thread got the lock to update.
            Whichever thread got the chance to update this variable to 1 wins the lock.
            </summary>
        </member>
        <member name="M:Microsoft.Data.ProviderBase.DbConnectionPoolAuthenticationContext.ReleaseLockToUpdate">
            <summary>
            Release the lock which was obtained through LockToUpdate.
            </summary>
        </member>
        <member name="T:Microsoft.Data.ProviderBase.DbConnectionPoolAuthenticationContextKey">
            <summary>
            Represents the key of dbConnectionPoolAuthenticationContext.
            All data members should be immutable and so, hashCode is pre-computed.
            </summary>
        </member>
        <member name="F:Microsoft.Data.ProviderBase.DbConnectionPoolAuthenticationContextKey._stsAuthority">
            <summary>
            Security Token Service Authority.
            </summary>
        </member>
        <member name="F:Microsoft.Data.ProviderBase.DbConnectionPoolAuthenticationContextKey._servicePrincipalName">
            <summary>
            Service Principal Name.
            </summary>
        </member>
        <member name="F:Microsoft.Data.ProviderBase.DbConnectionPoolAuthenticationContextKey._hashCode">
            <summary>
            Pre-Computed Hash Code.
            </summary>
        </member>
        <member name="M:Microsoft.Data.ProviderBase.DbConnectionPoolAuthenticationContextKey.#ctor(System.String,System.String)">
            <summary>
            Constructor for the type.
            </summary>
            <param name="stsAuthority">Token Endpoint URL</param>
            <param name="servicePrincipalName">SPN representing the SQL service in an active directory.</param>
        </member>
        <member name="M:Microsoft.Data.ProviderBase.DbConnectionPoolAuthenticationContextKey.Equals(System.Object)">
            <summary>
            Override the default Equals implementation.
            </summary>
            <param name="obj"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Data.ProviderBase.DbConnectionPoolAuthenticationContextKey.GetHashCode">
            <summary>
            Override the default GetHashCode implementation.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Data.ProviderBase.DbConnectionPoolAuthenticationContextKey.ComputeHashCode">
            <summary>
            Compute the hash code for this object.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Data.SqlClient.SqlConnectionString.ConvertValueToColumnEncryptionSetting">
            <summary>
            Convert the value to SqlConnectionColumnEncryptionSetting.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Data.SqlClient.SqlConnectionStringBuilder.ConvertToColumnEncryptionSetting(System.String,System.Object)">
            <summary>
            Convert to SqlConnectionColumnEncryptionSetting.
            </summary>
            <param name="keyword"></param>
            <param name="value"></param>
        </member>
        <member name="T:Microsoft.Data.SqlClient.SqlColumnEncryptionEnclaveProvider">
            <summary>
            The base class that defines the interface for enclave providers for Always Encrypted. An enclave is a protected region of memory inside SQL Server, used for computations on encrypted columns. An enclave provider encapsulates the client-side implementation details of the enclave attestation protocol as well as the logic for creating and caching enclave sessions.
            </summary>
            <summary>
            The base class that defines the interface for enclave providers for Always Encrypted. An enclave is a protected region of memory inside SQL Server, used for computations on encrypted columns. An enclave provider encapsulates the client-side implementation details of the enclave attestation protocol as well as the logic for creating and caching enclave sessions.
            </summary>
        </member>
        <member name="M:Microsoft.Data.SqlClient.SqlColumnEncryptionEnclaveProvider.CreateEnclaveSession(System.Byte[],System.Security.Cryptography.ECDiffieHellmanCng,System.String,System.String,Microsoft.Data.SqlClient.SqlEnclaveSession@,System.Int64@)">
            Performs enclave attestation, generates a symmetric key for the session, creates a an enclave session and stores the session information in the cache.
            <param name="enclaveAttestationInfo">The information the provider uses to attest the enclave and generate a symmetric key for the session. The format of this information is specific to the enclave attestation protocol.</param>
            <param name="clientDiffieHellmanKey">A Diffie-Hellman algorithm object encapsulating a client-side key pair.</param>
            <param name="attestationUrl">The endpoint of an attestation service for attesting the enclave.</param>
            <param name="servername">The name of the SQL Server instance containing the enclave.</param>
            <param name="sqlEnclaveSession">The requested enclave session or null if the provider does not implement session caching.</param>
            <param name="counter">A counter that the enclave provider is expected to increment each time SqlClient retrieves the session from the cache. The purpose of this field is to prevent replay attacks.</param>
        </member>
        <member name="M:Microsoft.Data.SqlClient.SqlColumnEncryptionEnclaveProvider.GetEnclaveSession(System.String,System.String,Microsoft.Data.SqlClient.SqlEnclaveSession@,System.Int64@)">
            <summary>
            Looks up an existing enclave session information in the enclave session cache. If the enclave provider does not implement enclave session caching, this method is expected to return null.
            </summary>
            <param name="serverName">The name of the SQL Server instance containing the enclave.</param>
            <param name="attestationUrl">The endpoint of an attestation service, SqlClient contacts to attest the enclave.</param>
            <param name="sqlEnclaveSession">The requested enclave session or null if the provider does not implement session caching.</param>
            <param name="counter">A counter that the enclave provider is expected to increment each time SqlClient retrieves the session from the cache. The purpose of this field is to prevent replay attacks.</param>
        </member>
        <member name="M:Microsoft.Data.SqlClient.SqlColumnEncryptionEnclaveProvider.GetAttestationParameters">
            <summary>
            Returns the information SqlClient subsequently uses to initiate the process of attesting the enclave and to establish a secure session with the enclave. 
            </summary>
            <returns>Enclave attestation parameters.</returns>
        </member>
        <member name="M:Microsoft.Data.SqlClient.SqlColumnEncryptionEnclaveProvider.InvalidateEnclaveSession(System.String,System.String,Microsoft.Data.SqlClient.SqlEnclaveSession)">
            <summary>
            Looks up and evicts an enclave session from the enclave session cache, if the provider implements session caching.
            </summary>
            <param name="serverName">The name of the SQL Server instance containing the enclave.</param>
            <param name="enclaveAttestationUrl">The endpoint of an attestation service, SqlClient contacts to attest the enclave.</param>
            <param name="enclaveSession">The session to be invalidated.</param>
        </member>
        <member name="T:Microsoft.Data.SqlClient.SqlEnclaveAttestationParameters">
            <summary>
            Encapsulates the information SqlClient sends to SQL Server to initiate the process of attesting and creating a secure session with the enclave, SQL Server uses for computations on columns protected using Always Encrypted.
            </summary>
            <summary>
            Encapsulates the information SqlClient sends to SQL Server to initiate the process of attesting and creating a secure session with the enclave, SQL Server uses for computations on columns protected using Always Encrypted.
            </summary>
        </member>
        <member name="P:Microsoft.Data.SqlClient.SqlEnclaveAttestationParameters.ClientDiffieHellmanKey">
            <summary>
            A Diffie-Hellman algorithm encapsulating a key pair, SqlClient uses to establish a secure session with the enclave. 
            </summary>
        </member>
        <member name="M:Microsoft.Data.SqlClient.SqlEnclaveAttestationParameters.#ctor(System.Int32,System.Byte[],System.Security.Cryptography.ECDiffieHellmanCng)">
            <summary>
            Initializes a new instance of SqlEnclaveAttestationParameters.
            </summary>
            <param name="protocol">Identifies an enclave attestation protocol.</param>
            <param name="input">The input of the enclave attestation protocol.</param>
            <param name="clientDiffieHellmanKey">A Diffie-Hellman algorithm encapsulating a client-side key pair.</param>
        </member>
        <member name="P:Microsoft.Data.SqlClient.SqlEnclaveAttestationParameters.Protocol">
            <summary>
            Identifies an enclave attestation protocol.  
            </summary>
        </member>
        <member name="M:Microsoft.Data.SqlClient.SqlEnclaveAttestationParameters.GetInput">
            <summary>
            The information used to initiate the process of attesting the enclave. The format and the content of this information is specific to the attestation protocol. 
            </summary>
        </member>
        <member name="M:Microsoft.Data.SqlClient.SqlEnclaveAttestationParameters.Clone(System.Byte[])">
            <summary>
            Deep copy the array into a new array
            </summary>
            <param name="arrayToClone"></param>
            <returns></returns>
        </member>
        <member name="T:Microsoft.Data.SqlClient.EnclaveDelegate">
            <summary>
            A delegate for communicating with secure enclave
            </summary>
            <summary>
            A delegate for communicating with secure enclave
            </summary>
        </member>
        <member name="M:Microsoft.Data.SqlClient.EnclaveDelegate.CreateEnclaveSession(System.String,System.String,System.String,System.Byte[],Microsoft.Data.SqlClient.SqlEnclaveAttestationParameters)">
            <summary>
            Create a new enclave session
            </summary>
            <param name="enclaveType">enclave type</param>
            <param name="serverName">servername</param>
            <param name="attestationUrl">attestation url for attestation service endpoint</param>
            <param name="attestationInfo">attestation info from SQL Server</param>
            <param name="attestationParameters">attestation parameters</param>
        </member>
        <member name="M:Microsoft.Data.SqlClient.EnclaveDelegate.GenerateEnclavePackage(System.Collections.Generic.Dictionary{System.Int32,Microsoft.Data.SqlClient.SqlTceCipherInfoEntry},System.String,System.String,System.String,System.String)">
            <summary>
            Generate the byte package that needs to be sent to the enclave
            </summary>
            <param name="keysTobeSentToEnclave">Keys to be sent to enclave</param>
            <param name="enclaveType">enclave type</param>
            <param name="serverName">server name</param>
            <param name="enclaveAttestationUrl">url for attestation endpoint</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Data.SqlClient.EnclaveDelegate.GetDecryptedKeysToBeSentToEnclave(System.Collections.Generic.Dictionary{System.Int32,Microsoft.Data.SqlClient.SqlTceCipherInfoEntry},System.String)">
            <summary>
            Decrypt the keys that need to be sent to the enclave
            </summary>
            <param name="keysTobeSentToEnclave">Keys that need to sent to the enclave</param>
            <param name="sqlConnection">active connection</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Data.SqlClient.EnclaveDelegate.GenerateBytePackageForKeys(System.Int64,System.Byte[],System.Collections.Generic.List{Microsoft.Data.SqlClient.ColumnEncryptionKeyInfo})">
            <summary>
            Generate a byte package consisting of decrypted keys and some headers expected by the enclave
            </summary>
            <param name="enclaveSessionCounter">counter to avoid replay attacks</param>
            <param name="keys"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Data.SqlClient.EnclaveDelegate.EncryptBytePackage(System.Byte[],System.Byte[],System.String)">
            <summary>
            Encrypt the byte package containing keys with the session key
            </summary>
            <param name="bytePackage">byte package containing keys</param>
            <param name="sessionKey">session key used to encrypt the package</param>
            <param name="serverName">server hosting the enclave</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Data.SqlClient.EnclaveDelegate.CombineByteArrays(System.Byte[][])">
            <summary>
            Combine the array of given byte arrays into one
            </summary>
            <param name="byteArraysToCombine">byte arrays to be combined</param>
            <returns></returns>
        </member>
        <member name="T:Microsoft.Data.SqlClient.EnclaveDelegate.RetriableEnclaveQueryExecutionException">
            <summary>
            Exception when executing a enclave based Always Encrypted query 
            </summary>
        </member>
        <member name="P:Microsoft.Data.SqlClient.TdsParser.IsColumnEncryptionSupported">
            <summary>
            Get or set if column encryption is supported by the server.
            </summary>
        </member>
        <member name="P:Microsoft.Data.SqlClient.TdsParser.TceVersionSupported">
            <summary>
            TCE version supported by the server
            </summary>
        </member>
        <member name="P:Microsoft.Data.SqlClient.TdsParser.EnclaveType">
            <summary>
            Type of enclave being used by the server
            </summary>
        </member>
        <member name="P:Microsoft.Data.SqlClient.TdsParser.IsDataClassificationEnabled">
            <summary>
            Get if data classification is enabled by the server.
            </summary>
        </member>
        <member name="P:Microsoft.Data.SqlClient.TdsParser.DataClassificationVersion">
            <summary>
            Get or set data classification version.  A value of 0 means that sensitivity classification is not enabled.
            </summary>
        </member>
        <member name="M:Microsoft.Data.SqlClient.TdsParser.IsValidTdsToken(System.Byte)">
            <summary>
            Checks if the given token is a valid TDS token
            </summary>
            <param name="token">Token to check</param>
            <returns>True if the token is a valid TDS token, otherwise false</returns>
        </member>
        <member name="M:Microsoft.Data.SqlClient.TdsParser.TryReadCipherInfoEntry(Microsoft.Data.SqlClient.TdsParserStateObject,Microsoft.Data.SqlClient.SqlTceCipherInfoEntry@)">
            <summary>
            <para> Parses the TDS message to read single CIPHER_INFO entry.</para>
            </summary>
        </member>
        <member name="M:Microsoft.Data.SqlClient.TdsParser.TryProcessCipherInfoTable(Microsoft.Data.SqlClient.TdsParserStateObject,System.Nullable{Microsoft.Data.SqlClient.SqlTceCipherInfoTable}@)">
            <summary>
            <para> Parses the TDS message to read a single CIPHER_INFO table.</para>
            </summary>
        </member>
        <member name="M:Microsoft.Data.SqlClient.TdsParser.ShouldHonorTceForRead(Microsoft.Data.SqlClient.SqlCommandColumnEncryptionSetting,Microsoft.Data.SqlClient.SqlInternalConnectionTds)">
            <summary>
            Determines if a column value should be transparently decrypted (based on SqlCommand and Connection String settings).
            </summary>
            <returns>true if the value should be transparently decrypted, false otherwise</returns>
        </member>
        <member name="M:Microsoft.Data.SqlClient.TdsParser.TrySkipValue(Microsoft.Data.SqlClient.SqlMetaDataPriv,System.Int32,Microsoft.Data.SqlClient.TdsParserStateObject)">
            <summary>
            This method skips bytes of a single column value from the media. It supports NBCROW and handles all types of values, including PLP and long
            </summary>
        </member>
        <member name="M:Microsoft.Data.SqlClient.TdsParser.DeserializeUnencryptedValue(Microsoft.Data.SqlClient.SqlBuffer,System.Byte[],Microsoft.Data.SqlClient.SqlMetaDataPriv,Microsoft.Data.SqlClient.TdsParserStateObject,System.Byte)">
            <summary>
            Deserializes the unencrypted bytes into a value based on the target type info.
            </summary>
        </member>
        <member name="M:Microsoft.Data.SqlClient.TdsParser.SendFedAuthToken(Microsoft.Data.SqlClient.SqlFedAuthToken)">
            <summary>
            Send the access token to the server.
            </summary>
            <param name="fedAuthToken">Type encapuslating a Federated Authentication access token.</param>
        </member>
        <member name="M:Microsoft.Data.SqlClient.TdsParser.LoadColumnEncryptionKeys(Microsoft.Data.SqlClient._SqlMetaDataSet,System.String)">
            <summary>
            Loads the column encryptions keys into cache. This will read the master key info, 
            decrypt the CEK and keep it ready for encryption.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Data.SqlClient.TdsParser.WriteEncryptionEntries(Microsoft.Data.SqlClient.SqlTceCipherInfoTable@,Microsoft.Data.SqlClient.TdsParserStateObject)">
            <summary>
            Writes a single entry of CEK Table into TDS Stream (for bulk copy).
            </summary>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Data.SqlClient.TdsParser.WriteCekTable(Microsoft.Data.SqlClient._SqlMetaDataSet,Microsoft.Data.SqlClient.TdsParserStateObject)">
            <summary>
            Writes a CEK Table (as part of  COLMETADATA token) for bulk copy.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Data.SqlClient.TdsParser.WriteTceUserTypeAndTypeInfo(Microsoft.Data.SqlClient.SqlMetaDataPriv,Microsoft.Data.SqlClient.TdsParserStateObject)">
            <summary>
            Writes the UserType and TYPE_INFO values for CryptoMetadata (for bulk copy).
            </summary>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Data.SqlClient.TdsParser.WriteCryptoMetadata(Microsoft.Data.SqlClient._SqlMetaData,Microsoft.Data.SqlClient.TdsParserStateObject)">
            <summary>
            Writes the crypto metadata (as part of COLMETADATA token) for encrypted columns.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Data.SqlClient.TdsParser.ShouldEncryptValuesForBulkCopy">
            <summary>
            Determines if a column value should be encrypted when using BulkCopy (based on connectionstring setting).
            </summary>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Data.SqlClient.TdsParser.EncryptColumnValue(System.Object,Microsoft.Data.SqlClient.SqlMetaDataPriv,System.String,Microsoft.Data.SqlClient.TdsParserStateObject,System.Boolean,System.Boolean)">
            <summary>
            Encrypts a column value (for SqlBulkCopy) 
            </summary>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Data.SqlClient.TdsParser.WriteEncryptionMetadata(System.Threading.Tasks.Task,Microsoft.Data.SqlClient.SqlColumnEncryptionInputParameterInfo,Microsoft.Data.SqlClient.TdsParserStateObject)">
            <summary>
            Write parameter encryption metadata and returns a task if necessary.
            </summary>
        </member>
        <member name="M:Microsoft.Data.SqlClient.TdsParser.WriteEncryptionMetadata(Microsoft.Data.SqlClient.SqlColumnEncryptionInputParameterInfo,Microsoft.Data.SqlClient.TdsParserStateObject)">
            <summary>
            Write parameter encryption metadata.
            </summary>
        </member>
        <member name="T:Microsoft.Data.SqlClient.SNI.SNIPacket">
            <summary>
            SNI Packet
            </summary>
        </member>
        <member name="M:Microsoft.Data.SqlClient.SNI.SNIPacket.ReadFromStreamAsync(System.IO.Stream,Microsoft.Data.SqlClient.SNI.SNIAsyncCallback)">
            <summary>
            Read data from a stream asynchronously
            </summary>
            <param name="stream">Stream to read from</param>
            <param name="callback">Completion callback</param>
        </member>
        <member name="M:Microsoft.Data.SqlClient.SNI.SNIPacket.WriteToStreamAsync(System.IO.Stream,Microsoft.Data.SqlClient.SNI.SNIAsyncCallback,Microsoft.Data.SqlClient.SNI.SNIProviders,System.Boolean)">
            <summary>
            Write data to a stream asynchronously
            </summary>
            <param name="stream">Stream to write to</param>
        </member>
        <member name="P:Microsoft.Data.SqlClient.SNI.SNIPacket.Description">
            <summary>
            Packet description (used for debugging)
            </summary>
        </member>
        <member name="P:Microsoft.Data.SqlClient.SNI.SNIPacket.DataLeft">
            <summary>
            Length of data left to process
            </summary>
        </member>
        <member name="P:Microsoft.Data.SqlClient.SNI.SNIPacket.Length">
            <summary>
            Length of data
            </summary>
        </member>
        <member name="P:Microsoft.Data.SqlClient.SNI.SNIPacket.IsInvalid">
            <summary>
            Packet validity
            </summary>
        </member>
        <member name="M:Microsoft.Data.SqlClient.SNI.SNIPacket.Dispose">
            <summary>
            Packet data
            </summary>
        </member>
        <member name="M:Microsoft.Data.SqlClient.SNI.SNIPacket.SetCompletionCallback(Microsoft.Data.SqlClient.SNI.SNIAsyncCallback)">
            <summary>
            Set async completion callback
            </summary>
            <param name="completionCallback">Completion callback</param>
        </member>
        <member name="M:Microsoft.Data.SqlClient.SNI.SNIPacket.InvokeCompletionCallback(System.UInt32)">
            <summary>
            Invoke the completion callback 
            </summary>
            <param name="sniErrorCode">SNI error</param>
        </member>
        <member name="M:Microsoft.Data.SqlClient.SNI.SNIPacket.Allocate(System.Int32)">
            <summary>
            Allocate space for data
            </summary>
            <param name="capacity">Length of byte array to be allocated</param>
        </member>
        <member name="M:Microsoft.Data.SqlClient.SNI.SNIPacket.Clone">
            <summary>
            Clone packet
            </summary>
            <returns>Cloned packet</returns>
        </member>
        <member name="M:Microsoft.Data.SqlClient.SNI.SNIPacket.GetData(System.Byte[],System.Int32@)">
            <summary>
            Get packet data
            </summary>
            <param name="buffer">Buffer</param>
            <param name="dataSize">Data in packet</param>
        </member>
        <member name="M:Microsoft.Data.SqlClient.SNI.SNIPacket.SetData(System.Byte[],System.Int32)">
            <summary>
            Set packet data
            </summary>
            <param name="data">Data</param>
            <param name="length">Length</param>
        </member>
        <member name="M:Microsoft.Data.SqlClient.SNI.SNIPacket.TakeData(Microsoft.Data.SqlClient.SNI.SNIPacket,System.Int32)">
            <summary>
            Take data from another packet
            </summary>
            <param name="packet">Packet</param>
            <param name="size">Data to take</param>
            <returns>Amount of data taken</returns>
        </member>
        <member name="M:Microsoft.Data.SqlClient.SNI.SNIPacket.AppendData(System.Byte[],System.Int32)">
            <summary>
            Append data
            </summary>
            <param name="data">Data</param>
            <param name="size">Size</param>
        </member>
        <member name="M:Microsoft.Data.SqlClient.SNI.SNIPacket.AppendPacket(Microsoft.Data.SqlClient.SNI.SNIPacket)">
            <summary>
            Append another packet
            </summary>
            <param name="packet">Packet</param>
        </member>
        <member name="M:Microsoft.Data.SqlClient.SNI.SNIPacket.TakeData(System.Byte[],System.Int32,System.Int32)">
            <summary>
            Take data from packet and advance offset
            </summary>
            <param name="buffer">Buffer</param>
            <param name="dataOffset">Data offset</param>
            <param name="size">Size</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Data.SqlClient.SNI.SNIPacket.Release">
            <summary>
            Release packet
            </summary>
        </member>
        <member name="M:Microsoft.Data.SqlClient.SNI.SNIPacket.Reset">
            <summary>
            Reset packet 
            </summary>
        </member>
        <member name="M:Microsoft.Data.SqlClient.SNI.SNIPacket.ReadFromStream(System.IO.Stream)">
            <summary>
            Read data from a stream synchronously
            </summary>
            <param name="stream">Stream to read from</param>
        </member>
        <member name="M:Microsoft.Data.SqlClient.SNI.SNIPacket.WriteToStream(System.IO.Stream)">
            <summary>
            Write data to a stream synchronously
            </summary>
            <param name="stream">Stream to write to</param>
        </member>
        <member name="M:Microsoft.Data.SqlClient.SNI.SNIPacket.GetHashCode">
            <summary>
            Get hash code
            </summary>
            <returns>Hash code</returns>
        </member>
        <member name="M:Microsoft.Data.SqlClient.SNI.SNIPacket.Equals(System.Object)">
            <summary>
            Check packet equality
            </summary>
            <param name="obj"></param>
            <returns>true if equal</returns>
        </member>
        <member name="M:Microsoft.Data.SqlClient.SNI.SNIPacket.Equals(Microsoft.Data.SqlClient.SNI.SNIPacket)">
            <summary>
            Check packet equality
            </summary>
            <param name="packet"></param>
            <returns>true if equal</returns>
        </member>
        <member name="T:Microsoft.Data.SqlClient.SNI.SNIError">
            <summary>
            SNI error
            </summary>
        </member>
        <member name="T:Microsoft.Data.SqlClient.SNI.SNIHandle">
            <summary>
            SNI connection handle
            </summary>
        </member>
        <member name="M:Microsoft.Data.SqlClient.SNI.SNIHandle.Dispose">
            <summary>
            Dispose class
            </summary>
        </member>
        <member name="M:Microsoft.Data.SqlClient.SNI.SNIHandle.SetAsyncCallbacks(Microsoft.Data.SqlClient.SNI.SNIAsyncCallback,Microsoft.Data.SqlClient.SNI.SNIAsyncCallback)">
            <summary>
            Set async callbacks
            </summary>
            <param name="receiveCallback">Receive callback</param>
            <param name="sendCallback">Send callback</param>
        </member>
        <member name="M:Microsoft.Data.SqlClient.SNI.SNIHandle.SetBufferSize(System.Int32)">
            <summary>
            Set buffer size
            </summary>
            <param name="bufferSize">Buffer size</param>
        </member>
        <member name="M:Microsoft.Data.SqlClient.SNI.SNIHandle.Send(Microsoft.Data.SqlClient.SNI.SNIPacket)">
            <summary>
            Send a packet synchronously
            </summary>
            <param name="packet">SNI packet</param>
            <returns>SNI error code</returns>
        </member>
        <member name="M:Microsoft.Data.SqlClient.SNI.SNIHandle.SendAsync(Microsoft.Data.SqlClient.SNI.SNIPacket,System.Boolean,Microsoft.Data.SqlClient.SNI.SNIAsyncCallback)">
            <summary>
            Send a packet asynchronously
            </summary>
            <param name="packet">SNI packet</param>
            <param name="callback">Completion callback</param>
            <returns>SNI error code</returns>
        </member>
        <member name="M:Microsoft.Data.SqlClient.SNI.SNIHandle.Receive(Microsoft.Data.SqlClient.SNI.SNIPacket@,System.Int32)">
            <summary>
            Receive a packet synchronously
            </summary>
            <param name="packet">SNI packet</param>
            <param name="timeoutInMilliseconds">Timeout in Milliseconds</param>
            <returns>SNI error code</returns>
        </member>
        <member name="M:Microsoft.Data.SqlClient.SNI.SNIHandle.ReceiveAsync(Microsoft.Data.SqlClient.SNI.SNIPacket@)">
            <summary>
            Receive a packet asynchronously
            </summary>
            <param name="packet">SNI packet</param>
            <returns>SNI error code</returns>
        </member>
        <member name="M:Microsoft.Data.SqlClient.SNI.SNIHandle.EnableSsl(System.UInt32)">
            <summary>
            Enable SSL
            </summary>
        </member>
        <member name="M:Microsoft.Data.SqlClient.SNI.SNIHandle.DisableSsl">
            <summary>
            Disable SSL
            </summary>
        </member>
        <member name="M:Microsoft.Data.SqlClient.SNI.SNIHandle.CheckConnection">
            <summary>
            Check connection status
            </summary>
            <returns>SNI error code</returns>
        </member>
        <member name="P:Microsoft.Data.SqlClient.SNI.SNIHandle.Status">
            <summary>
            Last handle status
            </summary>
        </member>
        <member name="P:Microsoft.Data.SqlClient.SNI.SNIHandle.ConnectionId">
            <summary>
            Connection ID
            </summary>
        </member>
        <member name="M:Microsoft.Data.SqlClient.SNI.SNIHandle.KillConnection">
            <summary>
            Test handle for killing underlying connection
            </summary>
        </member>
        <member name="T:Microsoft.Data.SqlClient.SNI.SNILoadHandle">
            <summary>
            Global SNI settings and status
            </summary>
        </member>
        <member name="P:Microsoft.Data.SqlClient.SNI.SNILoadHandle.LastError">
            <summary>
            Last SNI error
            </summary>
        </member>
        <member name="P:Microsoft.Data.SqlClient.SNI.SNILoadHandle.Status">
            <summary>
            SNI library status
            </summary>
        </member>
        <member name="P:Microsoft.Data.SqlClient.SNI.SNILoadHandle.Options">
            <summary>
            Encryption options setting
            </summary>
        </member>
        <member name="T:Microsoft.Data.SqlClient.SNI.SNIMarsConnection">
            <summary>
            SNI MARS connection. Multiple MARS streams will be overlaid on this connection.
            </summary>
        </member>
        <member name="P:Microsoft.Data.SqlClient.SNI.SNIMarsConnection.ConnectionId">
            <summary>
            Connection ID
            </summary>
        </member>
        <member name="M:Microsoft.Data.SqlClient.SNI.SNIMarsConnection.#ctor(Microsoft.Data.SqlClient.SNI.SNIHandle)">
            <summary>
            Constructor
            </summary>
            <param name="lowerHandle">Lower handle</param>
        </member>
        <member name="M:Microsoft.Data.SqlClient.SNI.SNIMarsConnection.StartReceive">
            <summary>
            Start receiving
            </summary>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Data.SqlClient.SNI.SNIMarsConnection.Send(Microsoft.Data.SqlClient.SNI.SNIPacket)">
            <summary>
            Send a packet synchronously
            </summary>
            <param name="packet">SNI packet</param>
            <returns>SNI error code</returns>
        </member>
        <member name="M:Microsoft.Data.SqlClient.SNI.SNIMarsConnection.SendAsync(Microsoft.Data.SqlClient.SNI.SNIPacket,Microsoft.Data.SqlClient.SNI.SNIAsyncCallback)">
            <summary>
            Send a packet asynchronously
            </summary>
            <param name="packet">SNI packet</param>
            <param name="callback">Completion callback</param>
            <returns>SNI error code</returns>
        </member>
        <member name="M:Microsoft.Data.SqlClient.SNI.SNIMarsConnection.ReceiveAsync(Microsoft.Data.SqlClient.SNI.SNIPacket@)">
            <summary>
            Receive a packet asynchronously
            </summary>
            <param name="packet">SNI packet</param>
            <returns>SNI error code</returns>
        </member>
        <member name="M:Microsoft.Data.SqlClient.SNI.SNIMarsConnection.CheckConnection">
            <summary>
            Check SNI handle connection
            </summary>
            <returns>SNI error status</returns>
        </member>
        <member name="M:Microsoft.Data.SqlClient.SNI.SNIMarsConnection.HandleReceiveError(Microsoft.Data.SqlClient.SNI.SNIPacket)">
            <summary>
            Process a receive error
            </summary>
        </member>
        <member name="M:Microsoft.Data.SqlClient.SNI.SNIMarsConnection.HandleSendComplete(Microsoft.Data.SqlClient.SNI.SNIPacket,System.UInt32)">
            <summary>
            Process a send completion
            </summary>
            <param name="packet">SNI packet</param>
            <param name="sniErrorCode">SNI error code</param>
        </member>
        <member name="M:Microsoft.Data.SqlClient.SNI.SNIMarsConnection.HandleReceiveComplete(Microsoft.Data.SqlClient.SNI.SNIPacket,System.UInt32)">
            <summary>
            Process a receive completion
            </summary>
            <param name="packet">SNI packet</param>
            <param name="sniErrorCode">SNI error code</param>
        </member>
        <member name="M:Microsoft.Data.SqlClient.SNI.SNIMarsConnection.EnableSsl(System.UInt32)">
            <summary>
            Enable SSL
            </summary>
        </member>
        <member name="M:Microsoft.Data.SqlClient.SNI.SNIMarsConnection.DisableSsl">
            <summary>
            Disable SSL
            </summary>
        </member>
        <member name="M:Microsoft.Data.SqlClient.SNI.SNIMarsConnection.KillConnection">
            <summary>
            Test handle for killing underlying connection
            </summary>
        </member>
        <member name="T:Microsoft.Data.SqlClient.SNI.SNIMarsHandle">
            <summary>
            MARS handle
            </summary>
        </member>
        <member name="P:Microsoft.Data.SqlClient.SNI.SNIMarsHandle.ConnectionId">
            <summary>
            Connection ID
            </summary>
        </member>
        <member name="P:Microsoft.Data.SqlClient.SNI.SNIMarsHandle.Status">
            <summary>
            Handle status
            </summary>
        </member>
        <member name="M:Microsoft.Data.SqlClient.SNI.SNIMarsHandle.Dispose">
            <summary>
            Dispose object
            </summary>
        </member>
        <member name="M:Microsoft.Data.SqlClient.SNI.SNIMarsHandle.#ctor(Microsoft.Data.SqlClient.SNI.SNIMarsConnection,System.UInt16,System.Object,System.Boolean)">
            <summary>
            Constructor
            </summary>
            <param name="connection">MARS connection</param>
            <param name="sessionId">MARS session ID</param>
            <param name="callbackObject">Callback object</param>
            <param name="async">true if connection is asynchronous</param>
        </member>
        <member name="M:Microsoft.Data.SqlClient.SNI.SNIMarsHandle.SendControlPacket(Microsoft.Data.SqlClient.SNI.SNISMUXFlags)">
            <summary>
            Send control packet
            </summary>
            <param name="flags">SMUX header flags</param>
        </member>
        <member name="M:Microsoft.Data.SqlClient.SNI.SNIMarsHandle.GetSMUXEncapsulatedPacket(Microsoft.Data.SqlClient.SNI.SNIPacket)">
            <summary>
            Generate a packet with SMUX header
            </summary>
            <param name="packet">SNI packet</param>
            <returns>Encapsulated SNI packet</returns>
        </member>
        <member name="M:Microsoft.Data.SqlClient.SNI.SNIMarsHandle.Send(Microsoft.Data.SqlClient.SNI.SNIPacket)">
            <summary>
            Send a packet synchronously
            </summary>
            <param name="packet">SNI packet</param>
            <returns>SNI error code</returns>
        </member>
        <member name="M:Microsoft.Data.SqlClient.SNI.SNIMarsHandle.InternalSendAsync(Microsoft.Data.SqlClient.SNI.SNIPacket,Microsoft.Data.SqlClient.SNI.SNIAsyncCallback)">
            <summary>
            Send packet asynchronously
            </summary>
            <param name="packet">SNI packet</param>
            <param name="callback">Completion callback</param>
            <returns>SNI error code</returns>
        </member>
        <member name="M:Microsoft.Data.SqlClient.SNI.SNIMarsHandle.SendPendingPackets">
            <summary>
            Send pending packets
            </summary>
            <returns>SNI error code</returns>
        </member>
        <member name="M:Microsoft.Data.SqlClient.SNI.SNIMarsHandle.SendAsync(Microsoft.Data.SqlClient.SNI.SNIPacket,System.Boolean,Microsoft.Data.SqlClient.SNI.SNIAsyncCallback)">
            <summary>
            Send a packet asynchronously
            </summary>
            <param name="packet">SNI packet</param>
            <param name="callback">Completion callback</param>
            <returns>SNI error code</returns>
        </member>
        <member name="M:Microsoft.Data.SqlClient.SNI.SNIMarsHandle.ReceiveAsync(Microsoft.Data.SqlClient.SNI.SNIPacket@)">
            <summary>
            Receive a packet asynchronously
            </summary>
            <param name="packet">SNI packet</param>
            <returns>SNI error code</returns>
        </member>
        <member name="M:Microsoft.Data.SqlClient.SNI.SNIMarsHandle.HandleReceiveError(Microsoft.Data.SqlClient.SNI.SNIPacket)">
            <summary>
            Handle receive error
            </summary>
        </member>
        <member name="M:Microsoft.Data.SqlClient.SNI.SNIMarsHandle.HandleSendComplete(Microsoft.Data.SqlClient.SNI.SNIPacket,System.UInt32)">
            <summary>
            Handle send completion
            </summary>
            <param name="packet">SNI packet</param>
            <param name="sniErrorCode">SNI error code</param>
        </member>
        <member name="M:Microsoft.Data.SqlClient.SNI.SNIMarsHandle.HandleAck(System.UInt32)">
            <summary>
            Handle SMUX acknowledgement
            </summary>
            <param name="highwater">Send highwater mark</param>
        </member>
        <member name="M:Microsoft.Data.SqlClient.SNI.SNIMarsHandle.HandleReceiveComplete(Microsoft.Data.SqlClient.SNI.SNIPacket,Microsoft.Data.SqlClient.SNI.SNISMUXHeader)">
            <summary>
            Handle receive completion
            </summary>
            <param name="packet">SNI packet</param>
            <param name="header">SMUX header</param>
        </member>
        <member name="M:Microsoft.Data.SqlClient.SNI.SNIMarsHandle.SendAckIfNecessary">
            <summary>
            Send ACK if we've hit highwater threshold
            </summary>
        </member>
        <member name="M:Microsoft.Data.SqlClient.SNI.SNIMarsHandle.Receive(Microsoft.Data.SqlClient.SNI.SNIPacket@,System.Int32)">
            <summary>
            Receive a packet synchronously
            </summary>
            <param name="packet">SNI packet</param>
            <param name="timeoutInMilliseconds">Timeout in Milliseconds</param>
            <returns>SNI error code</returns>
        </member>
        <member name="M:Microsoft.Data.SqlClient.SNI.SNIMarsHandle.CheckConnection">
            <summary>
            Check SNI handle connection
            </summary>
            <returns>SNI error status</returns>
        </member>
        <member name="M:Microsoft.Data.SqlClient.SNI.SNIMarsHandle.SetAsyncCallbacks(Microsoft.Data.SqlClient.SNI.SNIAsyncCallback,Microsoft.Data.SqlClient.SNI.SNIAsyncCallback)">
            <summary>
            Set async callbacks
            </summary>
            <param name="receiveCallback">Receive callback</param>
            <param name="sendCallback">Send callback</param>
        </member>
        <member name="M:Microsoft.Data.SqlClient.SNI.SNIMarsHandle.SetBufferSize(System.Int32)">
            <summary>
            Set buffer size
            </summary>
            <param name="bufferSize">Buffer size</param>
        </member>
        <member name="M:Microsoft.Data.SqlClient.SNI.SNIMarsHandle.EnableSsl(System.UInt32)">
            <summary>
            Enable SSL
            </summary>
        </member>
        <member name="M:Microsoft.Data.SqlClient.SNI.SNIMarsHandle.DisableSsl">
            <summary>
            Disable SSL
            </summary>
        </member>
        <member name="M:Microsoft.Data.SqlClient.SNI.SNIMarsHandle.KillConnection">
            <summary>
            Test handle for killing underlying connection
            </summary>
        </member>
        <member name="T:Microsoft.Data.SqlClient.SNI.SNIMarsQueuedPacket">
            <summary>
            Mars queued packet
            </summary>
        </member>
        <member name="M:Microsoft.Data.SqlClient.SNI.SNIMarsQueuedPacket.#ctor(Microsoft.Data.SqlClient.SNI.SNIPacket,Microsoft.Data.SqlClient.SNI.SNIAsyncCallback)">
            <summary>
            Constructor
            </summary>
            <param name="packet">SNI packet</param>
            <param name="callback">Completion callback</param>
        </member>
        <member name="P:Microsoft.Data.SqlClient.SNI.SNIMarsQueuedPacket.Packet">
            <summary>
            SNI packet
            </summary>
        </member>
        <member name="P:Microsoft.Data.SqlClient.SNI.SNIMarsQueuedPacket.Callback">
            <summary>
            Completion callback
            </summary>
        </member>
        <member name="T:Microsoft.Data.SqlClient.SNI.SNINpHandle">
            <summary>
            Named Pipe connection handle
            </summary>
        </member>
        <member name="M:Microsoft.Data.SqlClient.SNI.SNINpHandle.ValidateServerCertificate(System.Object,System.Security.Cryptography.X509Certificates.X509Certificate,System.Security.Cryptography.X509Certificates.X509Chain,System.Net.Security.SslPolicyErrors)">
            <summary>
            Validate server certificate
            </summary>
            <param name="sender">Sender object</param>
            <param name="cert">X.509 certificate</param>
            <param name="chain">X.509 chain</param>
            <param name="policyErrors">Policy errors</param>
            <returns>true if valid</returns>
        </member>
        <member name="M:Microsoft.Data.SqlClient.SNI.SNINpHandle.SetBufferSize(System.Int32)">
            <summary>
            Set buffer size
            </summary>
            <param name="bufferSize">Buffer size</param>
        </member>
        <member name="M:Microsoft.Data.SqlClient.SNI.SNINpHandle.KillConnection">
            <summary>
            Test handle for killing underlying connection
            </summary>
        </member>
        <member name="T:Microsoft.Data.SqlClient.SNI.SNIProxy">
            <summary>
            Managed SNI proxy implementation. Contains many SNI entry points used by SqlClient.
            </summary>
        </member>
        <member name="M:Microsoft.Data.SqlClient.SNI.SNIProxy.Terminate">
            <summary>
            Terminate SNI
            </summary>
        </member>
        <member name="M:Microsoft.Data.SqlClient.SNI.SNIProxy.EnableSsl(Microsoft.Data.SqlClient.SNI.SNIHandle,System.UInt32)">
            <summary>
            Enable SSL on a connection
            </summary>
            <param name="handle">Connection handle</param>
            <returns>SNI error code</returns>
        </member>
        <member name="M:Microsoft.Data.SqlClient.SNI.SNIProxy.DisableSsl(Microsoft.Data.SqlClient.SNI.SNIHandle)">
            <summary>
            Disable SSL on a connection
            </summary>
            <param name="handle">Connection handle</param>
            <returns>SNI error code</returns>
        </member>
        <member name="M:Microsoft.Data.SqlClient.SNI.SNIProxy.GenSspiClientContext(Microsoft.Data.SqlClient.SNI.SspiClientContextStatus,System.Byte[],System.Byte[]@,System.Byte[])">
            <summary>
            Generate SSPI context
            </summary>
            <param name="sspiClientContextStatus">SSPI client context status</param>
            <param name="receivedBuff">Receive buffer</param>
            <param name="sendBuff">Send buffer</param>
            <param name="serverName">Service Principal Name buffer</param>
            <returns>SNI error code</returns>
        </member>
        <member name="M:Microsoft.Data.SqlClient.SNI.SNIProxy.InitializeSspiPackage(System.UInt32@)">
            <summary>
            Initialize SSPI
            </summary>
            <param name="maxLength">Max length of SSPI packet</param>
            <returns>SNI error code</returns>
        </member>
        <member name="M:Microsoft.Data.SqlClient.SNI.SNIProxy.SetConnectionBufferSize(Microsoft.Data.SqlClient.SNI.SNIHandle,System.UInt32)">
            <summary>
            Set connection buffer size
            </summary>
            <param name="handle">SNI handle</param>
            <param name="bufferSize">Buffer size</param>
            <returns>SNI error code</returns>
        </member>
        <member name="M:Microsoft.Data.SqlClient.SNI.SNIProxy.PacketGetData(Microsoft.Data.SqlClient.SNI.SNIPacket,System.Byte[],System.UInt32@)">
            <summary>
            Copies data in SNIPacket to given byte array parameter
            </summary>
            <param name="packet">SNIPacket object containing data packets</param>
            <param name="inBuff">Destination byte array where data packets are copied to</param>
            <param name="dataSize">Length of data packets</param>
            <returns>SNI error status</returns>
        </member>
        <member name="M:Microsoft.Data.SqlClient.SNI.SNIProxy.ReadSyncOverAsync(Microsoft.Data.SqlClient.SNI.SNIHandle,Microsoft.Data.SqlClient.SNI.SNIPacket@,System.Int32)">
            <summary>
            Read synchronously
            </summary>
            <param name="handle">SNI handle</param>
            <param name="packet">SNI packet</param>
            <param name="timeout">Timeout</param>
            <returns>SNI error status</returns>
        </member>
        <member name="M:Microsoft.Data.SqlClient.SNI.SNIProxy.GetConnectionId(Microsoft.Data.SqlClient.SNI.SNIHandle,System.Guid@)">
            <summary>
            Get SNI connection ID
            </summary>
            <param name="handle">SNI handle</param>
            <param name="clientConnectionId">Client connection ID</param>
            <returns>SNI error status</returns>
        </member>
        <member name="M:Microsoft.Data.SqlClient.SNI.SNIProxy.WritePacket(Microsoft.Data.SqlClient.SNI.SNIHandle,Microsoft.Data.SqlClient.SNI.SNIPacket,System.Boolean)">
            <summary>
            Send a packet
            </summary>
            <param name="handle">SNI handle</param>
            <param name="packet">SNI packet</param>
            <param name="sync">true if synchronous, false if asynchronous</param>
            <returns>SNI error status</returns>
        </member>
        <member name="M:Microsoft.Data.SqlClient.SNI.SNIProxy.CreateConnectionHandle(System.Object,System.String,System.Boolean,System.Int64,System.Byte[]@,System.Byte[]@,System.Boolean,System.Boolean,System.Boolean,System.Boolean)">
            <summary>
            Create a SNI connection handle
            </summary>
            <param name="callbackObject">Asynchronous I/O callback object</param>
            <param name="fullServerName">Full server name from connection string</param>
            <param name="ignoreSniOpenTimeout">Ignore open timeout</param>
            <param name="timerExpire">Timer expiration</param>
            <param name="instanceName">Instance name</param>
            <param name="spnBuffer">SPN</param>
            <param name="flushCache">Flush packet cache</param>
            <param name="async">Asynchronous connection</param>
            <param name="parallel">Attempt parallel connects</param>
            <returns>SNI handle</returns>
        </member>
        <member name="M:Microsoft.Data.SqlClient.SNI.SNIProxy.CreateTcpHandle(Microsoft.Data.SqlClient.SNI.DataSource,System.Int64,System.Object,System.Boolean)">
            <summary>
            Creates an SNITCPHandle object
            </summary>
            <param name="details">Data source</param>
            <param name="timerExpire">Timer expiration</param>
            <param name="callbackObject">Asynchronous I/O callback object</param>
            <param name="parallel">Should MultiSubnetFailover be used</param>
            <returns>SNITCPHandle</returns>
        </member>
        <member name="M:Microsoft.Data.SqlClient.SNI.SNIProxy.CreateNpHandle(Microsoft.Data.SqlClient.SNI.DataSource,System.Int64,System.Object,System.Boolean)">
            <summary>
            Creates an SNINpHandle object
            </summary>
            <param name="details">Data source</param>
            <param name="timerExpire">Timer expiration</param>
            <param name="callbackObject">Asynchronous I/O callback object</param>
            <param name="parallel">Should MultiSubnetFailover be used. Only returns an error for named pipes.</param>
            <returns>SNINpHandle</returns>
        </member>
        <member name="M:Microsoft.Data.SqlClient.SNI.SNIProxy.ReadAsync(Microsoft.Data.SqlClient.SNI.SNIHandle,Microsoft.Data.SqlClient.SNI.SNIPacket@)">
            <summary>
            Read packet asynchronously
            </summary>
            <param name="handle">SNI handle</param>
            <param name="packet">Packet</param>
            <returns>SNI error status</returns>
        </member>
        <member name="M:Microsoft.Data.SqlClient.SNI.SNIProxy.PacketSetData(Microsoft.Data.SqlClient.SNI.SNIPacket,System.Byte[],System.Int32)">
            <summary>
            Set packet data
            </summary>
            <param name="packet">SNI packet</param>
            <param name="data">Data</param>
            <param name="length">Length</param>
        </member>
        <member name="M:Microsoft.Data.SqlClient.SNI.SNIProxy.PacketRelease(Microsoft.Data.SqlClient.SNI.SNIPacket)">
            <summary>
            Release packet
            </summary>
            <param name="packet">SNI packet</param>
        </member>
        <member name="M:Microsoft.Data.SqlClient.SNI.SNIProxy.CheckConnection(Microsoft.Data.SqlClient.SNI.SNIHandle)">
            <summary>
            Check SNI handle connection
            </summary>
            <param name="handle"></param>
            <returns>SNI error status</returns>
        </member>
        <member name="M:Microsoft.Data.SqlClient.SNI.SNIProxy.GetLastError">
            <summary>
            Get last SNI error on this thread
            </summary>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Data.SqlClient.SNI.SNIProxy.GetLocalDBDataSource(System.String,System.Boolean@)">
            <summary>
            Gets the Local db Named pipe data source if the input is a localDB server. 
            </summary>
            <param name="fullServerName">The data source</param>
            <param name="error">Set true when an error occurred while getting LocalDB up</param>
            <returns></returns>
        </member>
        <member name="P:Microsoft.Data.SqlClient.SNI.DataSource.ServerName">
            <summary>
            Provides the HostName of the server to connect to for TCP protocol. 
            This information is also used for finding the SPN of SqlServer
            </summary>
        </member>
        <member name="P:Microsoft.Data.SqlClient.SNI.DataSource.Port">
            <summary>
            Provides the port on which the TCP connection should be made if one was specified in Data Source
            </summary>
        </member>
        <member name="P:Microsoft.Data.SqlClient.SNI.DataSource.InstanceName">
            <summary>
            Provides the inferred Instance Name from Server Data Source
            </summary>
        </member>
        <member name="P:Microsoft.Data.SqlClient.SNI.DataSource.PipeName">
            <summary>
            Provides the pipe name in case of Named Pipes
            </summary>
        </member>
        <member name="P:Microsoft.Data.SqlClient.SNI.DataSource.PipeHostName">
            <summary>
            Provides the HostName to connect to in case of Named pipes Data Source
            </summary>
        </member>
        <member name="T:Microsoft.Data.SqlClient.SNI.SNITCPHandle">
            <summary>
            TCP connection handle
            </summary>
        </member>
        <member name="M:Microsoft.Data.SqlClient.SNI.SNITCPHandle.Dispose">
            <summary>
            Dispose object
            </summary>
        </member>
        <member name="P:Microsoft.Data.SqlClient.SNI.SNITCPHandle.ConnectionId">
            <summary>
            Connection ID
            </summary>
        </member>
        <member name="P:Microsoft.Data.SqlClient.SNI.SNITCPHandle.Status">
            <summary>
            Connection status
            </summary>
        </member>
        <member name="M:Microsoft.Data.SqlClient.SNI.SNITCPHandle.#ctor(System.String,System.Int32,System.Int64,System.Object,System.Boolean)">
            <summary>
            Constructor
            </summary>
            <param name="serverName">Server name</param>
            <param name="port">TCP port number</param>
            <param name="timerExpire">Connection timer expiration</param>
            <param name="callbackObject">Callback object</param>
        </member>
        <member name="M:Microsoft.Data.SqlClient.SNI.SNITCPHandle.EnableSsl(System.UInt32)">
            <summary>
            Enable SSL
            </summary>
        </member>
        <member name="M:Microsoft.Data.SqlClient.SNI.SNITCPHandle.DisableSsl">
            <summary>
            Disable SSL
            </summary>
        </member>
        <member name="M:Microsoft.Data.SqlClient.SNI.SNITCPHandle.ValidateServerCertificate(System.Object,System.Security.Cryptography.X509Certificates.X509Certificate,System.Security.Cryptography.X509Certificates.X509Chain,System.Net.Security.SslPolicyErrors)">
            <summary>
            Validate server certificate callback
            </summary>
            <param name="sender">Sender object</param>
            <param name="cert">X.509 certificate</param>
            <param name="chain">X.509 chain</param>
            <param name="policyErrors">Policy errors</param>
            <returns>True if certificate is valid</returns>
        </member>
        <member name="M:Microsoft.Data.SqlClient.SNI.SNITCPHandle.SetBufferSize(System.Int32)">
            <summary>
            Set buffer size
            </summary>
            <param name="bufferSize">Buffer size</param>
        </member>
        <member name="M:Microsoft.Data.SqlClient.SNI.SNITCPHandle.Send(Microsoft.Data.SqlClient.SNI.SNIPacket)">
            <summary>
            Send a packet synchronously
            </summary>
            <param name="packet">SNI packet</param>
            <returns>SNI error code</returns>
        </member>
        <member name="M:Microsoft.Data.SqlClient.SNI.SNITCPHandle.Receive(Microsoft.Data.SqlClient.SNI.SNIPacket@,System.Int32)">
            <summary>
            Receive a packet synchronously
            </summary>
            <param name="packet">SNI packet</param>
            <param name="timeoutInMilliseconds">Timeout in Milliseconds</param>
            <returns>SNI error code</returns>
        </member>
        <member name="M:Microsoft.Data.SqlClient.SNI.SNITCPHandle.SetAsyncCallbacks(Microsoft.Data.SqlClient.SNI.SNIAsyncCallback,Microsoft.Data.SqlClient.SNI.SNIAsyncCallback)">
            <summary>
            Set async callbacks
            </summary>
            <param name="receiveCallback">Receive callback</param>
            <param name="sendCallback">Send callback</param>
        </member>
        <member name="M:Microsoft.Data.SqlClient.SNI.SNITCPHandle.SendAsync(Microsoft.Data.SqlClient.SNI.SNIPacket,System.Boolean,Microsoft.Data.SqlClient.SNI.SNIAsyncCallback)">
            <summary>
            Send a packet asynchronously
            </summary>
            <param name="packet">SNI packet</param>
            <param name="callback">Completion callback</param>
            <returns>SNI error code</returns>
        </member>
        <member name="M:Microsoft.Data.SqlClient.SNI.SNITCPHandle.ReceiveAsync(Microsoft.Data.SqlClient.SNI.SNIPacket@)">
            <summary>
            Receive a packet asynchronously
            </summary>
            <param name="packet">SNI packet</param>
            <returns>SNI error code</returns>
        </member>
        <member name="M:Microsoft.Data.SqlClient.SNI.SNITCPHandle.CheckConnection">
            <summary>
            Check SNI handle connection
            </summary>
            <returns>SNI error status</returns>
        </member>
        <member name="M:Microsoft.Data.SqlClient.SNI.SNITCPHandle.KillConnection">
            <summary>
            Test handle for killing underlying connection
            </summary>
        </member>
        <member name="T:Microsoft.Data.SqlClient.SNI.SslOverTdsStream">
            <summary>
            SSL encapsulated over TDS transport. During SSL handshake, SSL packets are
            transported in TDS packet type 0x12. Once SSL handshake has completed, SSL
            packets are sent transparently.
            </summary>
        </member>
        <member name="M:Microsoft.Data.SqlClient.SNI.SslOverTdsStream.#ctor(System.IO.Stream)">
            <summary>
            Constructor
            </summary>
            <param name="stream">Underlying stream</param>
        </member>
        <member name="M:Microsoft.Data.SqlClient.SNI.SslOverTdsStream.FinishHandshake">
            <summary>
            Finish SSL handshake. Stop encapsulating in TDS.
            </summary>
        </member>
        <member name="M:Microsoft.Data.SqlClient.SNI.SslOverTdsStream.Read(System.Byte[],System.Int32,System.Int32)">
            <summary>
            Read buffer
            </summary>
            <param name="buffer">Buffer</param>
            <param name="offset">Offset</param>
            <param name="count">Byte count</param>
            <returns>Bytes read</returns>
        </member>
        <member name="M:Microsoft.Data.SqlClient.SNI.SslOverTdsStream.Write(System.Byte[],System.Int32,System.Int32)">
            <summary>
            Write Buffer
            </summary>
            <param name="buffer"></param>
            <param name="offset"></param>
            <param name="count"></param>
        </member>
        <member name="M:Microsoft.Data.SqlClient.SNI.SslOverTdsStream.WriteAsync(System.Byte[],System.Int32,System.Int32,System.Threading.CancellationToken)">
            <summary>
            Write Buffer Asynchronosly
            </summary>
            <param name="buffer"></param>
            <param name="offset"></param>
            <param name="count"></param>
            <param name="token"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Data.SqlClient.SNI.SslOverTdsStream.ReadAsync(System.Byte[],System.Int32,System.Int32,System.Threading.CancellationToken)">
            <summary>
            Read Buffer Asynchronosly
            </summary>
            <param name="buffer"></param>
            <param name="offset"></param>
            <param name="count"></param>
            <param name="token"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Data.SqlClient.SNI.SslOverTdsStream.ReadInternal(System.Byte[],System.Int32,System.Int32,System.Threading.CancellationToken,System.Boolean)">
            <summary>
            Read Internal is called synchronosly when async is false
            </summary>
        </member>
        <member name="M:Microsoft.Data.SqlClient.SNI.SslOverTdsStream.WriteInternal(System.Byte[],System.Int32,System.Int32,System.Threading.CancellationToken,System.Boolean)">
            <summary>
            The internal write method calls Sync APIs when Async flag is false
            </summary>
        </member>
        <member name="M:Microsoft.Data.SqlClient.SNI.SslOverTdsStream.SetLength(System.Int64)">
            <summary>
            Set stream length. 
            </summary>
            <param name="value">Length</param>
        </member>
        <member name="M:Microsoft.Data.SqlClient.SNI.SslOverTdsStream.Flush">
            <summary>
            Flush stream
            </summary>
        </member>
        <member name="P:Microsoft.Data.SqlClient.SNI.SslOverTdsStream.Position">
            <summary>
            Get/set stream position
            </summary>
        </member>
        <member name="M:Microsoft.Data.SqlClient.SNI.SslOverTdsStream.Seek(System.Int64,System.IO.SeekOrigin)">
            <summary>
            Seek in stream
            </summary>
            <param name="offset">Offset</param>
            <param name="origin">Origin</param>
            <returns>Position</returns>
        </member>
        <member name="P:Microsoft.Data.SqlClient.SNI.SslOverTdsStream.CanRead">
            <summary>
            Check if stream can be read from
            </summary>
        </member>
        <member name="P:Microsoft.Data.SqlClient.SNI.SslOverTdsStream.CanWrite">
            <summary>
            Check if stream can be written to
            </summary>
        </member>
        <member name="P:Microsoft.Data.SqlClient.SNI.SslOverTdsStream.CanSeek">
            <summary>
            Check if stream can be seeked
            </summary>
        </member>
        <member name="P:Microsoft.Data.SqlClient.SNI.SslOverTdsStream.Length">
            <summary>
            Get stream length
            </summary>
        </member>
        <member name="T:Microsoft.Data.SqlClient.SNI.SNIAsyncCallback">
            <summary>
            SNI Asynchronous callback
            </summary>
            <param name="packet">SNI packet</param>
            <param name="sniErrorCode">SNI error code</param>
        </member>
        <member name="T:Microsoft.Data.SqlClient.SNI.SNIProviders">
            <summary>
            SNI provider identifiers
            </summary>
        </member>
        <member name="T:Microsoft.Data.SqlClient.SNI.SNISMUXHeader">
            <summary>
            SMUX packet header
            </summary>
        </member>
        <member name="T:Microsoft.Data.SqlClient.SNI.SNISMUXFlags">
            <summary>
            SMUX packet flags
            </summary>
        </member>
        <member name="M:Microsoft.Data.SqlClient.SNI.SNICommon.ValidateSslServerCertificate(System.String,System.Object,System.Security.Cryptography.X509Certificates.X509Certificate,System.Security.Cryptography.X509Certificates.X509Chain,System.Net.Security.SslPolicyErrors)">
            <summary>
            Validate server certificate callback for SSL
            </summary>
            <param name="targetServerName">Server that client is expecting to connect to</param>
            <param name="sender">Sender object</param>
            <param name="cert">X.509 certificate</param>
            <param name="chain">X.509 chain</param>
            <param name="policyErrors">Policy errors</param>
            <returns>True if certificate is valid</returns>
        </member>
        <member name="M:Microsoft.Data.SqlClient.SNI.SNICommon.ReportSNIError(Microsoft.Data.SqlClient.SNI.SNIProviders,System.UInt32,System.UInt32,System.String)">
            <summary>
            Sets last error encountered for SNI
            </summary>
            <param name="provider">SNI provider</param>
            <param name="nativeError">Native error code</param>
            <param name="sniError">SNI error code</param>
            <param name="errorMessage">Error message</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Data.SqlClient.SNI.SNICommon.ReportSNIError(Microsoft.Data.SqlClient.SNI.SNIProviders,System.UInt32,System.Exception)">
            <summary>
            Sets last error encountered for SNI
            </summary>
            <param name="provider">SNI provider</param>
            <param name="sniError">SNI error code</param>
            <param name="sniException">SNI Exception</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Data.SqlClient.SNI.SNICommon.ReportSNIError(Microsoft.Data.SqlClient.SNI.SNIError)">
            <summary>
            Sets last error encountered for SNI
            </summary>
            <param name="error">SNI error</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Data.SqlClient.SNI.SSRP.GetPortByInstanceName(System.String,System.String)">
            <summary>
            Finds instance port number for given instance name.
            </summary>
            <param name="browserHostName">SQL Sever Browser hostname</param>
            <param name="instanceName">instance name to find port number</param>
            <returns>port number for given instance name</returns>
        </member>
        <member name="M:Microsoft.Data.SqlClient.SNI.SSRP.CreateInstanceInfoRequest(System.String)">
            <summary>
            Creates instance port lookup request (CLNT_UCAST_INST) for given instance name.
            </summary>
            <param name="instanceName">instance name to lookup port</param>
            <returns>Byte array of instance port lookup request (CLNT_UCAST_INST)</returns>
        </member>
        <member name="M:Microsoft.Data.SqlClient.SNI.SSRP.GetDacPortByInstanceName(System.String,System.String)">
            <summary>
            Finds DAC port for given instance name.
            </summary>
            <param name="browserHostName">SQL Sever Browser hostname</param>
            <param name="instanceName">instance name to lookup DAC port</param>
            <returns>DAC port for given instance name</returns>
        </member>
        <member name="M:Microsoft.Data.SqlClient.SNI.SSRP.CreateDacPortInfoRequest(System.String)">
            <summary>
            Creates DAC port lookup request (CLNT_UCAST_DAC) for given instance name.
            </summary>
            <param name="instanceName">instance name to lookup DAC port</param>
            <returns>Byte array of DAC port lookup request (CLNT_UCAST_DAC)</returns>
        </member>
        <member name="M:Microsoft.Data.SqlClient.SNI.SSRP.SendUDPRequest(System.String,System.Int32,System.Byte[])">
            <summary>
            Sends request to server, and receives response from server by UDP.
            </summary>
            <param name="browserHostname">UDP server hostname</param>
            <param name="port">UDP server port</param>
            <param name="requestPacket">request packet</param>
            <returns>response packet from UDP server</returns>
        </member>
        <member name="M:Microsoft.Data.SqlClient.SNI.LocalDB.LoadUserInstanceDll">
            <summary>
            Loads the User Instance dll.
            </summary>
        </member>
        <member name="M:Microsoft.Data.SqlClient.SNI.LocalDB.GetUserInstanceDllPath(Microsoft.Data.SqlClient.SNI.LocalDB.LocalDBErrorState@)">
            <summary>
            Retrieves the part of the sqlUserInstance.dll from the registry
            </summary>
            <param name="errorState">In case the dll path is not found, the error is set here.</param>
            <returns></returns>
        </member>
        <member name="T:Microsoft.Data.SqlClient.ActiveDirectoryAuthenticationTimeoutRetryState">
            <summary>
            AD auth retry states.
            </summary>
        </member>
        <member name="T:Microsoft.Data.SqlClient.ActiveDirectoryAuthenticationTimeoutRetryHelper">
            <summary>
            AD auth retry helper.
            </summary>
        </member>
        <member name="M:Microsoft.Data.SqlClient.ActiveDirectoryAuthenticationTimeoutRetryHelper.#ctor">
            <summary>
            Constructor.
            </summary>
        </member>
        <member name="P:Microsoft.Data.SqlClient.ActiveDirectoryAuthenticationTimeoutRetryHelper.State">
            <summary>
            Retry state.
            </summary>
        </member>
        <member name="P:Microsoft.Data.SqlClient.ActiveDirectoryAuthenticationTimeoutRetryHelper.CachedToken">
            <summary>
            Cached token.
            </summary>
        </member>
        <member name="M:Microsoft.Data.SqlClient.ActiveDirectoryAuthenticationTimeoutRetryHelper.CanRetryWithSqlException(Microsoft.Data.SqlClient.SqlException)">
            <summary>
            Whether login can be retried after a client/server connection timeout due to a long-time token acquisition.
            </summary>
        </member>
        <member name="T:Microsoft.Data.SqlClient.ActiveDirectoryNativeAuthenticationProvider">
            <summary>
            Default auth provider for AD Integrated.
            </summary>
        </member>
        <member name="M:Microsoft.Data.SqlClient.ActiveDirectoryNativeAuthenticationProvider.AcquireTokenAsync(Microsoft.Data.SqlClient.SqlAuthenticationParameters)">
            <summary>
            Get token.
            </summary>
        </member>
        <member name="M:Microsoft.Data.SqlClient.ActiveDirectoryNativeAuthenticationProvider.IsSupported(Microsoft.Data.SqlClient.SqlAuthenticationMethod)">
            <summary>
            Checks support for authentication type in lower case.
            Interactive authenticatin added.
            </summary>
        </member>
        <member name="T:Microsoft.Data.SqlClient.SqlAuthenticationParameters">
            <summary>
            AD Authentication parameters passed by driver to auth providers.
            </summary>
        </member>
        <member name="P:Microsoft.Data.SqlClient.SqlAuthenticationParameters.AuthenticationMethod">
            <summary>
            Authentication method.
            </summary>
        </member>
        <member name="P:Microsoft.Data.SqlClient.SqlAuthenticationParameters.Scopes">
            <summary>
            Resource URI.
            </summary>
        </member>
        <member name="P:Microsoft.Data.SqlClient.SqlAuthenticationParameters.Authority">
            <summary>
            Authority URI.
            </summary>
        </member>
        <member name="P:Microsoft.Data.SqlClient.SqlAuthenticationParameters.UserId">
            <summary>
            User login name/id.
            </summary>
        </member>
        <member name="P:Microsoft.Data.SqlClient.SqlAuthenticationParameters.Password">
            <summary>
            User password.
            </summary>
        </member>
        <member name="P:Microsoft.Data.SqlClient.SqlAuthenticationParameters.ConnectionId">
            <summary>
            Connection Id.
            </summary>
        </member>
        <member name="P:Microsoft.Data.SqlClient.SqlAuthenticationParameters.ServerName">
            <summary>
            Server name.
            </summary>
        </member>
        <member name="P:Microsoft.Data.SqlClient.SqlAuthenticationParameters.DatabaseName">
            <summary>
            Database name.
            </summary>
        </member>
        <member name="T:Microsoft.Data.SqlClient.SqlAuthenticationParameters.Builder">
            <summary>
            AD authentication parameter builder.
            </summary>
        </member>
        <member name="M:Microsoft.Data.SqlClient.SqlAuthenticationParameters.Builder.op_Implicit(Microsoft.Data.SqlClient.SqlAuthenticationParameters.Builder)~Microsoft.Data.SqlClient.SqlAuthenticationParameters">
            <summary>
            Implicitly converts to <see cref="T:Microsoft.Data.SqlClient.SqlAuthenticationParameters"/>.
            </summary>
        </member>
        <member name="M:Microsoft.Data.SqlClient.SqlAuthenticationParameters.Builder.WithUserId(System.String)">
            <summary>
            Set user id.
            </summary>
        </member>
        <member name="M:Microsoft.Data.SqlClient.SqlAuthenticationParameters.Builder.WithPassword(System.String)">
            <summary>
            Set password.
            </summary>
        </member>
        <member name="M:Microsoft.Data.SqlClient.SqlAuthenticationParameters.Builder.WithPassword(System.Security.SecureString)">
            <summary>
            Set password.
            </summary>
        </member>
        <member name="M:Microsoft.Data.SqlClient.SqlAuthenticationParameters.Builder.WithConnectionId(System.Guid)">
            <summary>
            Set a specific connection id instead of using a random one.
            </summary>
        </member>
        <member name="T:Microsoft.Data.SqlClient.SqlAuthenticationProvider">
            <summary>
            The public base class for auth providers.
            Implementations of this class must provide a default constructor if they are intended to be instantiated from app.config.
            </summary>
        </member>
        <member name="M:Microsoft.Data.SqlClient.SqlAuthenticationProvider.GetProvider(Microsoft.Data.SqlClient.SqlAuthenticationMethod)">
            <summary>
            Get an authentication provider by method.
            </summary>
            <param name="authenticationMethod">Authentication method.</param>
            <returns>Authentication provider or null if not found.</returns>
        </member>
        <member name="M:Microsoft.Data.SqlClient.SqlAuthenticationProvider.SetProvider(Microsoft.Data.SqlClient.SqlAuthenticationMethod,Microsoft.Data.SqlClient.SqlAuthenticationProvider)">
            <summary>
            Set an authentication provider by method.
            </summary>
            <param name="authenticationMethod">Authentication method.</param>
            <param name="provider">Authentication provider.</param>
            <returns>True if succeeded, false otherwise, e.g., the existing provider disallows overriding.</returns>
        </member>
        <member name="M:Microsoft.Data.SqlClient.SqlAuthenticationProvider.BeforeLoad(Microsoft.Data.SqlClient.SqlAuthenticationMethod)">
            <summary>
            This is called immediately before the provider is added in SQL driver's registry.
            Avoid performing long-waiting task in this method as it can block other threads from accessing provider registry.
            </summary>
            <param name="authenticationMethod">The authentication type in lower case.</param>
        </member>
        <member name="M:Microsoft.Data.SqlClient.SqlAuthenticationProvider.BeforeUnload(Microsoft.Data.SqlClient.SqlAuthenticationMethod)">
            <summary>
            This is called immediately before the provider is removed from SQL driver's registry.
            E.g., when a different provider with the same authentication overrides this provider in SQL driver's registry.
            Avoid performing long-waiting task in this method as it can block other threads from accessing provider registry.
            </summary>
            <param name="authenticationMethod">The authentication type in lower case.</param>
        </member>
        <member name="M:Microsoft.Data.SqlClient.SqlAuthenticationProvider.IsSupported(Microsoft.Data.SqlClient.SqlAuthenticationMethod)">
            <summary>
            A query method to check whether an authentication method is supported.
            </summary>
            <param name="authenticationMethod">Authentication method in lower case.</param>
        </member>
        <member name="M:Microsoft.Data.SqlClient.SqlAuthenticationProvider.AcquireTokenAsync(Microsoft.Data.SqlClient.SqlAuthenticationParameters)">
            <summary>
            Get a token.
            </summary>
        </member>
        <member name="T:Microsoft.Data.SqlClient.SqlAuthenticationProviderManager">
            <summary>
            Authentication provider manager.
            </summary>
        </member>
        <member name="M:Microsoft.Data.SqlClient.SqlAuthenticationProviderManager.#ctor(Microsoft.Data.SqlClient.SqlAuthenticationProviderConfigurationSection)">
            <summary>
            Constructor.
            </summary>
        </member>
        <member name="M:Microsoft.Data.SqlClient.SqlAuthenticationProviderManager.GetProvider(Microsoft.Data.SqlClient.SqlAuthenticationMethod)">
            <summary>
            Get an authentication provider by method.
            </summary>
            <param name="authenticationMethod">Authentication method.</param>
            <returns>Authentication provider or null if not found.</returns>
        </member>
        <member name="M:Microsoft.Data.SqlClient.SqlAuthenticationProviderManager.SetProvider(Microsoft.Data.SqlClient.SqlAuthenticationMethod,Microsoft.Data.SqlClient.SqlAuthenticationProvider)">
            <summary>
            Set an authentication provider by method.
            </summary>
            <param name="authenticationMethod">Authentication method.</param>
            <param name="provider">Authentication provider.</param>
            <returns>True if succeeded, false otherwise, e.g., the existing provider disallows overriding.</returns>
        </member>
        <member name="T:Microsoft.Data.SqlClient.SqlAuthenticationProviderConfigurationSection">
            <summary>
            The configuration section definition for reading app.config.
            </summary>
        </member>
        <member name="P:Microsoft.Data.SqlClient.SqlAuthenticationProviderConfigurationSection.Providers">
            <summary>
            User-defined auth providers.
            </summary>
        </member>
        <member name="P:Microsoft.Data.SqlClient.SqlAuthenticationProviderConfigurationSection.InitializerType">
            <summary>
            User-defined initializer.
            </summary>
        </member>
        <member name="T:Microsoft.Data.SqlClient.SqlAuthenticationInitializer">
            <summary>
            The abstract initializer class that users can implement to initialize their component before SqlAuthenticationProviderManager starts.
            </summary>
        </member>
        <member name="M:Microsoft.Data.SqlClient.SqlAuthenticationInitializer.Initialize">
            <summary>
            The initialize callback from SqlAuthenticationProviderManager. This is called before SqlAuthenticationProviderManager loads providers.
            </summary>
        </member>
        <member name="T:Microsoft.Data.SqlClient.SqlAuthenticationToken">
            <summary>
            AD authentication token.
            </summary>
        </member>
        <member name="P:Microsoft.Data.SqlClient.SqlAuthenticationToken.ExpiresOn">
            <summary>
            Token expiration time.
            </summary>
        </member>
        <member name="P:Microsoft.Data.SqlClient.SqlAuthenticationToken.AccessToken">
            <summary>
            Token string.
            </summary>
        </member>
        <member name="M:Microsoft.Data.SqlClient.SqlAuthenticationToken.#ctor(System.String,System.DateTimeOffset)">
            <summary>
            Constructor.
            </summary>
        </member>
        <member name="M:Microsoft.Data.SqlClient.SqlAuthenticationToken.#ctor(System.Byte[],System.DateTimeOffset)">
            <summary>
            Constructor.
            </summary>
        </member>
        <member name="M:Microsoft.Data.SqlClient.SqlAuthenticationToken.ToSqlFedAuthToken">
            <summary>
            Convert to driver's internal token class.
            </summary>
        </member>
        <member name="M:Microsoft.Data.SqlClient.SqlAuthenticationToken.AccessTokenStringFromBytes(System.Byte[])">
            <summary>
            Convert token bytes to string.
            </summary>
        </member>
        <member name="M:Microsoft.Data.SqlClient.SqlAuthenticationToken.AccessTokenBytesFromString(System.String)">
            <summary>
            Convert token string to bytes.
            </summary>
        </member>
        <member name="T:Microsoft.Data.SqlClient.ApplicationIntent">
            <summary>
            represents the application workload type when connecting to a server
            </summary>
        </member>
        <member name="T:Microsoft.Data.SqlClient.SqlClientDiagnosticListenerExtensions">
            <summary>
            Extension methods on the DiagnosticListener class to log SqlCommand data
            </summary>
        </member>
        <member name="F:Microsoft.Data.SqlClient.SqlCommand._wasBatchModeColumnEncryptionSettingSetOnce">
            <summary>
            Indicates if the column encryption setting was set at-least once in the batch rpc mode, when using AddBatchCommand.
            </summary>
        </member>
        <member name="F:Microsoft.Data.SqlClient.SqlCommand._columnEncryptionSetting">
            <summary>
            Column Encryption Override. Defaults to SqlConnectionSetting, in which case
            it will be Enabled if SqlConnectionOptions.IsColumnEncryptionSettingEnabled = true, Disabled if false.
            This may also be used to set other behavior which overrides connection level setting.
            </summary>
        </member>
        <member name="F:Microsoft.Data.SqlClient.SqlCommand._sleepDuringTryFetchInputParameterEncryptionInfo">
            <summary>
            Force the client to sleep during sp_describe_parameter_encryption in the function TryFetchInputParameterEncryptionInfo.
            </summary>
        </member>
        <member name="F:Microsoft.Data.SqlClient.SqlCommand._sleepDuringRunExecuteReaderTdsForSpDescribeParameterEncryption">
            <summary>
            Force the client to sleep during sp_describe_parameter_encryption in the function RunExecuteReaderTds.
            </summary>
        </member>
        <member name="F:Microsoft.Data.SqlClient.SqlCommand._sleepAfterReadDescribeEncryptionParameterResults">
            <summary>
            Force the client to sleep during sp_describe_parameter_encryption after ReadDescribeEncryptionParameterResults.
            </summary>
        </member>
        <member name="F:Microsoft.Data.SqlClient.SqlCommand._forceInternalEndQuery">
            <summary>
            Internal flag for testing purposes that forces all queries to internally end async calls.
            </summary>
        </member>
        <member name="P:Microsoft.Data.SqlClient.SqlCommand.IsColumnEncryptionEnabled">
            <summary>
            Return if column encryption setting is enabled.
            The order in the below if is important since _activeConnection.Parser can throw if the 
            underlying tds connection is closed and we don't want to change the behavior for folks
            not trying to use transparent parameter encryption i.e. who don't use (SqlCommandColumnEncryptionSetting.Enabled or _activeConnection.IsColumnEncryptionSettingEnabled) here.
            </summary>
        </member>
        <member name="F:Microsoft.Data.SqlClient.SqlCommand._currentlyExecutingDescribeParameterEncryptionRPC">
            <summary>
            This variable is used to keep track of which RPC batch's results are being read when reading the results of
            describe parameter encryption RPC requests in BatchRPCMode.
            </summary>
        </member>
        <member name="F:Microsoft.Data.SqlClient.SqlCommand._internalEndExecuteInitiated">
            <summary>
            A flag to indicate if EndExecute was already initiated by the Begin call.
            </summary>
        </member>
        <member name="P:Microsoft.Data.SqlClient.SqlCommand.IsDescribeParameterEncryptionRPCCurrentlyInProgress">
            <summary>
            A flag to indicate if we have in-progress describe parameter encryption RPC requests.
            Reset to false when completed.
            </summary>
        </member>
        <member name="P:Microsoft.Data.SqlClient.SqlCommand.CachingQueryMetadataPostponed">
            <summary>
            A flag to indicate whether we postponed caching the query metadata for this command.
            </summary>
        </member>
        <member name="M:Microsoft.Data.SqlClient.SqlCommand.ResetEncryptionState">
            <summary>
            Resets the encryption related state of the command object and each of the parameters.
            BatchRPC doesn't need special handling to cleanup the state of each RPC object and its parameters since a new RPC object and 
            parameters are generated on every execution.
            </summary>
        </member>
        <member name="M:Microsoft.Data.SqlClient.SqlCommand.PrepareTransparentEncryptionFinallyBlock(System.Boolean,System.Boolean,System.Boolean,System.Boolean,System.Collections.ObjectModel.ReadOnlyDictionary{Microsoft.Data.SqlClient._SqlRPC,Microsoft.Data.SqlClient._SqlRPC},Microsoft.Data.SqlClient.SqlDataReader)">
            <summary>
            Steps to be executed in the Prepare Transparent Encryption finally block.
            </summary>
        </member>
        <member name="M:Microsoft.Data.SqlClient.SqlCommand.PrepareForTransparentEncryption(System.Data.CommandBehavior,System.Boolean,System.Boolean,System.Int32,System.Threading.Tasks.TaskCompletionSource{System.Object},System.Threading.Tasks.Task@,System.Boolean,System.Boolean@,System.Boolean)">
            <summary>
            Executes the reader after checking to see if we need to encrypt input parameters and then encrypting it if required.
            TryFetchInputParameterEncryptionInfo() -> ReadDescribeEncryptionParameterResults()-> EncryptInputParameters() ->RunExecuteReaderTds()
            </summary>
            <param name="cmdBehavior"></param>
            <param name="returnStream"></param>
            <param name="isAsync"></param>
            <param name="timeout"></param>
            <param name="task"></param>
            <param name="asyncWrite"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Data.SqlClient.SqlCommand.TryFetchInputParameterEncryptionInfo(System.Int32,System.Boolean,System.Boolean,System.Boolean@,System.Threading.Tasks.Task@,System.Collections.ObjectModel.ReadOnlyDictionary{Microsoft.Data.SqlClient._SqlRPC,Microsoft.Data.SqlClient._SqlRPC}@)">
            <summary>
            Executes an RPC to fetch param encryption info from SQL Engine. If this method is not done writing
             the request to wire, it'll set the "task" parameter which can be used to create continuations.
            </summary>
            <param name="timeout"></param>
            <param name="isAsync"></param>
            <param name="asyncWrite"></param>
            <param name="inputParameterEncryptionNeeded"></param>
            <param name="task"></param>
            <param name="describeParameterEncryptionRpcOriginalRpcMap"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Data.SqlClient.SqlCommand.GetSqlParameterWithQueryText(System.String)">
            <summary>
            Constructs a SqlParameter with a given string value
            </summary>
            <param name="queryText"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Data.SqlClient.SqlCommand.PrepareDescribeParameterEncryptionRequest(Microsoft.Data.SqlClient._SqlRPC,Microsoft.Data.SqlClient._SqlRPC@,System.Byte[])">
            <summary>
            Constructs the sp_describe_parameter_encryption request with the values from the original RPC call.
            Prototype for sp_describe_parameter_encryption is 
            exec sp_describe_parameter_encryption @tsql=N'[SQL Statement]', @params=N'@p1 varbinary(256)'
            </summary>
            <param name="originalRpcRequest">Original RPC request</param>
            <param name="describeParameterEncryptionRequest">sp_describe_parameter_encryption request being built</param>
        </member>
        <member name="M:Microsoft.Data.SqlClient.SqlCommand.ReadDescribeEncryptionParameterResults(Microsoft.Data.SqlClient.SqlDataReader,System.Collections.ObjectModel.ReadOnlyDictionary{Microsoft.Data.SqlClient._SqlRPC,Microsoft.Data.SqlClient._SqlRPC})">
            <summary>
            Read the output of sp_describe_parameter_encryption
            </summary>
            <param name="ds">Resultset from calling to sp_describe_parameter_encryption</param>
            <param name="describeParameterEncryptionRpcOriginalRpcMap"> Readonly dictionary with the map of parameter encryption rpc requests with the corresponding original rpc requests.</param>
        </member>
        <member name="M:Microsoft.Data.SqlClient.SqlCommand.RunExecuteReaderTdsWithTransparentParameterEncryption(System.Data.CommandBehavior,Microsoft.Data.SqlClient.RunBehavior,System.Boolean,System.Boolean,System.Int32,System.Threading.Tasks.Task@,System.Boolean,System.Boolean,Microsoft.Data.SqlClient.SqlDataReader,System.Boolean,System.Threading.Tasks.Task)">
            <summary>
            RunExecuteReaderTds after Transparent Parameter Encryption is complete.
            </summary>
            <param name="cmdBehavior"></param>
            <param name="runBehavior"></param>
            <param name="returnStream"></param>
            <param name="isAsync"></param>
            <param name="timeout"></param>
            <param name="task"></param>
            <param name="asyncWrite"></param>
            <param name="ds"></param>
            <param name="describeParameterEncryptionRequest"></param>
            <param name="describeParameterEncryptionTask"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Data.SqlClient.SqlCommand.OnDoneDescribeParameterEncryptionProc(Microsoft.Data.SqlClient.TdsParserStateObject)">
            <summary>
            IMPORTANT NOTE: This is created as a copy of OnDoneProc below for Transparent Column Encryption improvement
            as there is not much time, to address regressions. Will revisit removing the duplication, when we have time again.
            </summary>
        </member>
        <member name="M:Microsoft.Data.SqlClient.SqlCommand.OnDoneProc">
            <summary>
            IMPORTANT NOTE: There is a copy of this function above in OnDoneDescribeParameterEncryptionProc.
            Please consider the changes being done in this function for the above function as well.
            </summary>
        </member>
        <member name="M:Microsoft.Data.SqlClient.SqlCommand.BuildStoredProcedureStatementForColumnEncryption(System.String,Microsoft.Data.SqlClient.SqlParameter[])">
            <summary>
            This function constructs a string parameter containing the exec statement in the following format
            N'EXEC sp_name @param1=@param1, @param1=@param2, ..., @paramN=@paramN'
            TODO: Need to handle return values.
            </summary>
            <param name="storedProcedureName">Stored procedure name</param>
            <param name="parameters">SqlParameter list</param>
            <returns>A string SqlParameter containing the constructed sql statement value</returns>
        </member>
        <member name="P:Microsoft.Data.SqlClient.SqlCommand.RowsAffectedByDescribeParameterEncryption">
            <summary>
            Get or add to the number of records affected by SpDescribeParameterEncryption.
            The below line is used only for debug asserts and not exposed publicly or impacts functionality otherwise.
            </summary>
        </member>
        <member name="M:Microsoft.Data.SqlClient.SqlCommand.ClearDescribeParameterEncryptionRequests">
            <summary>
            Clear the state in sqlcommand related to describe parameter encryption RPC requests.
            </summary>
        </member>
        <member name="M:Microsoft.Data.SqlClient.SqlCommand.SetColumnEncryptionSetting(Microsoft.Data.SqlClient.SqlCommandColumnEncryptionSetting)">
            <summary>
            Set the column encryption setting to the new one.
            Do not allow conflicting column encryption settings.
            </summary>
        </member>
        <member name="P:Microsoft.Data.SqlClient.SqlCommandBuilder.CatalogLocation">
            <devnote>SqlServer only supports CatalogLocation.Start</devnote>
        </member>
        <member name="P:Microsoft.Data.SqlClient.SqlCommandBuilder.CatalogSeparator">
            <devnote>SqlServer only supports '.'</devnote>
        </member>
        <member name="P:Microsoft.Data.SqlClient.SqlCommandBuilder.QuotePrefix">
            <devnote>SqlServer only supports '.'</devnote>
        </member>
        <member name="F:Microsoft.Data.SqlClient.SqlConnection._CustomColumnEncryptionKeyStoreProviders">
            <summary>
            Custom provider list should be provided by the user. We shallow copy the user supplied dictionary into a ReadOnlyDictionary.
            Custom provider list can only supplied once per application.
            </summary>
        </member>
        <member name="F:Microsoft.Data.SqlClient.SqlConnection._ColumnEncryptionTrustedMasterKeyPaths">
            <summary>
            Dictionary object holding trusted key paths for various SQL Servers.
            Key to the dictionary is a SQL Server Name
            IList contains a list of trusted key paths.
            </summary>
        </member>
        <member name="P:Microsoft.Data.SqlClient.SqlConnection.ColumnEncryptionKeyCacheTtl">
            <summary>
            Defines whether query metadata caching is enabled.
            </summary>
        </member>
        <member name="P:Microsoft.Data.SqlClient.SqlConnection.ColumnEncryptionQueryMetadataCacheEnabled">
            <summary>
            Defines whether query metadata caching is enabled.
            </summary>
        </member>
        <member name="M:Microsoft.Data.SqlClient.SqlConnection.TryGetColumnEncryptionKeyStoreProvider(System.String,Microsoft.Data.SqlClient.SqlColumnEncryptionKeyStoreProvider@)">
            <summary>
            This function walks through both system and custom column encryption key store providers and returns an object if found.
            </summary>
            <param name="providerName">Provider Name to be searched in System Provider diction and Custom provider dictionary.</param>
            <param name="columnKeyStoreProvider">If the provider is found, returns the corresponding SqlColumnEncryptionKeyStoreProvider instance.</param>
            <returns>true if the provider is found, else returns false</returns>
        </member>
        <member name="M:Microsoft.Data.SqlClient.SqlConnection.GetColumnEncryptionSystemKeyStoreProviders">
            <summary>
            This function returns a list of system provider dictionary currently supported by this driver.
            </summary>
            <returns>Combined list of provider names</returns>
        </member>
        <member name="M:Microsoft.Data.SqlClient.SqlConnection.GetColumnEncryptionCustomKeyStoreProviders">
            <summary>
            This function returns a list of custom provider dictionary currently registered.
            </summary>
            <returns>Combined list of provider names</returns>
        </member>
        <member name="P:Microsoft.Data.SqlClient.SqlConnection.IsColumnEncryptionSettingEnabled">
            <summary>
            Is this connection using column encryption ?
            </summary>
        </member>
        <member name="M:Microsoft.Data.SqlClient.SqlConnection.RegisterColumnEncryptionKeyStoreProviders(System.Collections.Generic.IDictionary{System.String,Microsoft.Data.SqlClient.SqlColumnEncryptionKeyStoreProvider})">
            <summary>
            This function should only be called once in an app. This does shallow copying of the dictionary so that 
            the app cannot alter the custom provider list once it has been set.
            
            Example:
            
            Dictionary&lt;string, SqlColumnEncryptionKeyStoreProvider&gt; customKeyStoreProviders = new Dictionary&lt;string, SqlColumnEncryptionKeyStoreProvider&gt;();
            MySqlClientHSMProvider myProvider = new MySqlClientHSMProvider();
            customKeyStoreProviders.Add(@"HSM Provider", myProvider);
            SqlConnection.RegisterColumnEncryptionKeyStoreProviders(customKeyStoreProviders);
            </summary>
            <param name="customProviders">Custom column encryption key provider dictionary</param>
        </member>
        <member name="P:Microsoft.Data.SqlClient.SqlConnection.EnclaveAttestationUrl">
            <summary>
            Get enclave attestation url to be used with enclave based Always Encrypted
            </summary>
        </member>
        <member name="M:Microsoft.Data.SqlClient.MetaType.AssertIsUserDefinedTypeInstance(System.Object,System.String)">
             <summary>
             Assert that the supplied object is an instance of a SQL User-Defined Type (UDT).
             </summary>
             <param name="sqlValue">Object instance to be tested.</param>
             <remarks>
             This method is only compiled with debug builds, and it a helper method for the GetComValueFromSqlVariant method defined in this class.
            
             The presence of the SqlUserDefinedTypeAttribute on the object's type
             is used to determine if the object is a UDT instance (if present it is a UDT, else it is not).
             </remarks>
             <exception cref="T:System.NullReferenceException">
             If sqlValue is null.  Callers must ensure the object is non-null.
             </exception>
        </member>
        <member name="T:Microsoft.Data.SqlClient.SqlInfoMessageEventHandler">
            <devdoc>
               <para>
                  Represents the method that will handle the <see cref='E:Microsoft.Data.SqlClient.SqlConnection.InfoMessage'/> event of a <see cref='T:Microsoft.Data.SqlClient.SqlConnection'/>.
               </para>
            </devdoc>
        </member>
        <member name="M:Microsoft.Data.SqlClient.SqlInternalConnectionTds.CheckEnlistedTransactionBinding">
            <summary>
            Validate the enlisted transaction state, taking into consideration the ambient transaction and transaction unbinding mode.
            If there is no enlisted transaction, this method is a nop.
            </summary>
            <remarks>
            <para>
            This method must be called while holding a lock on the SqlInternalConnection instance,
            to ensure we don't accidentally execute after the transaction has completed on a different thread, 
            causing us to unwittingly execute in auto-commit mode.
            </para>
            
            <para>
            When using Explicit transaction unbinding, 
            verify that the enlisted transaction is active and equal to the current ambient transaction.
            </para>
            
            <para>
            When using Implicit transaction unbinding,
            verify that the enlisted transaction is active.
            If it is not active, and the transaction object has been disposed, unbind from the transaction.
            If it is not active and not disposed, throw an exception.
            </para>
            </remarks>
        </member>
        <member name="M:Microsoft.Data.SqlClient.SqlInternalConnectionTds.OnFedAuthInfo(Microsoft.Data.SqlClient.SqlFedAuthInfo)">
            <summary>
            Generates (if appropriate) and sends a Federated Authentication Access token to the server, using the Federated Authentication Info.
            </summary>
            <param name="fedAuthInfo">Federated Authentication Info.</param>
        </member>
        <member name="M:Microsoft.Data.SqlClient.SqlInternalConnectionTds.TryGetFedAuthTokenLocked(Microsoft.Data.SqlClient.SqlFedAuthInfo,Microsoft.Data.ProviderBase.DbConnectionPoolAuthenticationContext,Microsoft.Data.SqlClient.SqlFedAuthToken@)">
            <summary>
            Tries to acquire a lock on the authentication context. If successful in acquiring the lock, gets a new token and assigns it in the out parameter. Else returns false.
            </summary>
            <param name="fedAuthInfo">Federated Authentication Info</param>
            <param name="dbConnectionPoolAuthenticationContext">Authentication Context cached in the connection pool.</param>
            <param name="fedAuthToken">Out parameter, carrying the token if we acquired a lock and got the token.</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Data.SqlClient.SqlInternalConnectionTds.GetFedAuthToken(Microsoft.Data.SqlClient.SqlFedAuthInfo)">
            <summary>
            Get the Federated Authentication Token.
            </summary>
            <param name="fedAuthInfo">Information obtained from server as Federated Authentication Info.</param>
            <returns>SqlFedAuthToken</returns>
        </member>
        <member name="P:Microsoft.Data.SqlClient.SqlParameter.CipherMetadata">
            <summary>
            Get or set the encryption related metadata of this SqlParameter.
            Should be set to a non-null value only once.
            </summary>
        </member>
        <member name="P:Microsoft.Data.SqlClient.SqlParameter.HasReceivedMetadata">
            <summary>
            Indicates if the parameter encryption metadata received by sp_describe_parameter_encryption.
            For unencrypted parameters, the encryption metadata should still be sent (and will indicate 
            that no encryption is needed).
            </summary>
        </member>
        <member name="P:Microsoft.Data.SqlClient.SqlParameter.NormalizationRuleVersion">
            <summary>
            Returns the normalization rule version number as a byte
            </summary>
        </member>
        <member name="M:Microsoft.Data.SqlClient.SqlParameter.GetMetadataForTypeInfo">
            <summary>
            Get SMI Metadata to write out type_info stream.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Data.SqlClient.SqlSequentialStream.SetClosed">
            <summary>
            Forces the stream to act as if it was closed (i.e. CanRead=false and Read() throws)
            This does not actually close the stream, read off the rest of the data or dispose this
            </summary>
        </member>
        <member name="M:Microsoft.Data.SqlClient.SqlSequentialStream.ValidateReadParameters(System.Byte[],System.Int32,System.Int32)">
            <summary>
            Checks the parameters passed into a Read() method are valid
            </summary>
            <param name="buffer"></param>
            <param name="offset"></param>
            <param name="count"></param>
        </member>
        <member name="M:Microsoft.Data.SqlClient.SqlSequentialTextReader.SetClosed">
            <summary>
            Forces the TextReader to act as if it was closed
            This does not actually close the stream, read off the rest of the data or dispose this
            </summary>
        </member>
        <member name="M:Microsoft.Data.SqlClient.SqlSequentialTextReader.InternalRead(System.Char[],System.Int32,System.Int32)">
            <summary>
            Performs the actual reading and converting
            NOTE: This assumes that buffer, index and count are all valid, we're not closed (!IsClosed) and that there is data left (IsDataLeft())
            </summary>
            <param name="buffer"></param>
            <param name="index"></param>
            <param name="count"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Data.SqlClient.SqlSequentialTextReader.PrepareByteBuffer(System.Int32,System.Int32@)">
            <summary>
            Creates a byte array large enough to store all bytes for the characters in the current encoding, then fills it with any leftover bytes
            </summary>
            <param name="numberOfChars">Number of characters that are to be read</param>
            <param name="byteBufferUsed">Number of bytes pre-filled by the leftover bytes</param>
            <returns>A byte array of the correct size, pre-filled with leftover bytes</returns>
        </member>
        <member name="M:Microsoft.Data.SqlClient.SqlSequentialTextReader.DecodeBytesToChars(System.Byte[],System.Int32,System.Char[],System.Int32,System.Int32)">
            <summary>
            Decodes the given bytes into characters, and stores the leftover bytes for later use
            </summary>
            <param name="inBuffer">Buffer of bytes to decode</param>
            <param name="inBufferCount">Number of bytes to decode from the inBuffer</param>
            <param name="outBuffer">Buffer to write the characters to</param>
            <param name="outBufferOffset">Offset to start writing to outBuffer at</param>
            <param name="outBufferCount">Maximum number of characters to decode</param>
            <returns>The actual number of characters decoded</returns>
        </member>
        <member name="P:Microsoft.Data.SqlClient.SqlSequentialTextReader.IsClosed">
            <summary>
            True if this TextReader is supposed to be closed
            </summary>
        </member>
        <member name="P:Microsoft.Data.SqlClient.SqlSequentialTextReader.HasPeekedChar">
            <summary>
            True if there is a peeked character available
            </summary>
        </member>
        <member name="M:Microsoft.Data.SqlClient.SqlSequentialTextReader.ValidateReadParameters(System.Char[],System.Int32,System.Int32)">
            <summary>
            Checks the parameters passed into a Read() method are valid
            </summary>
            <param name="buffer"></param>
            <param name="index"></param>
            <param name="count"></param>
        </member>
        <member name="M:Microsoft.Data.SqlClient.SQL.MultiSubnetFailoverWithFailoverPartner(System.Boolean,Microsoft.Data.SqlClient.SqlInternalConnectionTds)">
            <summary>
            used to block two scenarios if MultiSubnetFailover is true: 
            * server-provided failover partner - raising SqlException in this case
            * connection string with failover partner and MultiSubnetFailover=true - raising argument one in this case with the same message
            </summary>
        </member>
        <member name="M:Microsoft.Data.SqlClient.SQL.GetSNIErrorMessage(System.Int32)">
            <summary>
            gets a message for SNI error (sniError must be valid, non-zero error code)
            </summary>
        </member>
        <member name="T:Microsoft.Data.SqlClient.SqlServerEscapeHelper">
            <summary>
            This class holds helper methods to escape Microsoft SQL Server identifiers, such as table, schema, database or other names
            </summary>
        </member>
        <member name="M:Microsoft.Data.SqlClient.SqlServerEscapeHelper.EscapeIdentifier(System.String)">
            <summary>
            Escapes the identifier with square brackets. The input has to be in unescaped form, like the parts received from MultipartIdentifier.ParseMultipartIdentifier.
            </summary>
            <param name="name">name of the identifier, in unescaped form</param>
            <returns>escapes the name with [], also escapes the last close bracket with double-bracket</returns>
        </member>
        <member name="M:Microsoft.Data.SqlClient.SqlServerEscapeHelper.EscapeIdentifier(System.Text.StringBuilder,System.String)">
            <summary>
            Same as above EscapeIdentifier, except that output is written into StringBuilder
            </summary>
        </member>
        <member name="M:Microsoft.Data.SqlClient.SqlServerEscapeHelper.EscapeStringAsLiteral(System.String)">
            <summary>
             Escape a string to be used inside TSQL literal, such as N'somename' or 'somename'
            </summary>
        </member>
        <member name="M:Microsoft.Data.SqlClient.SqlServerEscapeHelper.MakeStringLiteral(System.String)">
            <summary>
            Escape a string as a TSQL literal, wrapping it around with single quotes.
            Use this method to escape input strings to prevent SQL injection 
            and to get correct behavior for embedded quotes.
            </summary>
            <param name="input">unescaped string</param>
            <returns>escaped and quoted literal string</returns>
        </member>
        <member name="T:Microsoft.Data.SqlClient.SysTxForGlobalTransactions">
            <summary>
            This class holds methods invoked on System.Transactions through reflection for Global Transactions
            </summary>
        </member>
        <member name="P:Microsoft.Data.SqlClient.SysTxForGlobalTransactions.EnlistPromotableSinglePhase">
            <summary>
            Enlists the given IPromotableSinglePhaseNotification and Non-MSDTC Promoter type into a transaction
            </summary>
            <returns>The MethodInfo instance to be invoked. Null if the method doesn't exist</returns>
        </member>
        <member name="P:Microsoft.Data.SqlClient.SysTxForGlobalTransactions.SetDistributedTransactionIdentifier">
            <summary>
            Sets the given DistributedTransactionIdentifier for a Transaction instance.
            Needs to be invoked when using a Non-MSDTC Promoter type
            </summary>
            <returns>The MethodInfo instance to be invoked. Null if the method doesn't exist</returns>
        </member>
        <member name="P:Microsoft.Data.SqlClient.SysTxForGlobalTransactions.GetPromotedToken">
            <summary>
            Gets the Promoted Token for a Transaction
            </summary>
            <returns>The MethodInfo instance to be invoked. Null if the method doesn't exist</returns>
        </member>
        <member name="T:Microsoft.Data.SqlClient.TdsEnums">
            <devdoc> Class of variables for the Tds connection.
            </devdoc>
        </member>
        <member name="T:Microsoft.Data.SqlClient.SqlConnectionColumnEncryptionSetting">
            <summary>
            Column Encryption Setting to be used for the SqlConnection.
            </summary>
        </member>
        <member name="F:Microsoft.Data.SqlClient.SqlConnectionColumnEncryptionSetting.Disabled">
            <summary>
            Disables column encryption by default on all commands on this connection.
            </summary>
        </member>
        <member name="F:Microsoft.Data.SqlClient.SqlConnectionColumnEncryptionSetting.Enabled">
            <summary>
            Enables column encryption by default on all commands on this connection.
            </summary>
        </member>
        <member name="T:Microsoft.Data.SqlClient.SqlCommandColumnEncryptionSetting">
            <summary>
            Column Encryption Setting to be used for the SqlCommand.
            </summary>
        </member>
        <member name="F:Microsoft.Data.SqlClient.SqlCommandColumnEncryptionSetting.UseConnectionSetting">
            <summary>
            if “Column Encryption Setting=Enabled” in the connection string, use Enabled. Otherwise, maps to Disabled.
            </summary>
        </member>
        <member name="F:Microsoft.Data.SqlClient.SqlCommandColumnEncryptionSetting.Enabled">
            <summary>
            Enables TCE for the command. Overrides the connection level setting for this command.
            </summary>
        </member>
        <member name="F:Microsoft.Data.SqlClient.SqlCommandColumnEncryptionSetting.ResultSetOnly">
            <summary>
            Parameters will not be encrypted, only the ResultSet will be decrypted. This is an optimization for queries that do not pass any encrypted input parameters.
            Overrides the connection level setting for this command.
            </summary>
        </member>
        <member name="F:Microsoft.Data.SqlClient.SqlCommandColumnEncryptionSetting.Disabled">
            <summary>
            Disables TCE for the command.Overrides the connection level setting for this command.
            </summary>
        </member>
        <member name="T:Microsoft.Data.SqlClient.FederatedAuthenticationFeatureExtensionData">
            <summary>
            Struct encapsulating the data to be sent to the server as part of Federated Authentication Feature Extension.
            </summary>
        </member>
        <member name="F:Microsoft.Data.SqlClient.SqlEnvChange.newBinValue">
            <summary>
            contains binary data, before using this field check newBinRented to see if you can take the field array or whether you should allocate and copy
            </summary>
        </member>
        <member name="F:Microsoft.Data.SqlClient.SqlEnvChange.oldBinValue">
            <summary>
            contains binary data, before using this field check newBinRented to see if you can take the field array or whether you should allocate and copy
            </summary>
        </member>
        <member name="M:Microsoft.Data.SqlClient.SqlMetaDataPriv.IsAlgorithmInitialized">
            <summary>
            Is the algorithm handle for the cipher encryption initialized ?
            </summary>
            <returns></returns>
        </member>
        <member name="P:Microsoft.Data.SqlClient.SqlMetaDataPriv.NormalizationRuleVersion">
            <summary>
            Returns the normalization rule version byte.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Data.SqlClient.TdsParserStateObject.NullBitmap.IsGuaranteedNull(System.Int32)">
            <summary>
            If this method returns true, the value is guaranteed to be null. This is not true vice versa: 
            if the bitmap value is false (if this method returns false), the value can be either null or non-null - no guarantee in this case.
            To determine whether it is null or not, read it from the TDS (per NBCROW design spec, for IMAGE/TEXT/NTEXT columns server might send
            bitmap = 0, when the actual value is null).
            </summary>
        </member>
        <member name="M:Microsoft.Data.SqlClient.TdsParserStateObject.IsConnectionAlive(System.Boolean)">
            <summary>
            Checks to see if the underlying connection is still alive (used by connection pool resiliency)
            NOTE: This is not safe to do on a connection that is currently in use
            NOTE: This will mark the connection as broken if it is found to be dead
            </summary>
            <param name="throwOnException">If true then an exception will be thrown if the connection is found to be dead, otherwise no exception will be thrown</param>
            <returns>True if the connection is still alive, otherwise false</returns>
        </member>
        <member name="M:Microsoft.Data.SqlClient.TdsParserStateObject.ValidateSNIConnection">
            <summary>
            Checks to see if the underlying connection is still valid (used by idle connection resiliency - for active connections) 
            NOTE: This is not safe to do on a connection that is currently in use
            NOTE: This will mark the connection as broken if it is found to be dead
            </summary>
            <returns>True if the connection is still alive, otherwise false</returns>
        </member>
        <member name="P:Microsoft.Data.SqlClient.TdsParserStateObject.HasErrorOrWarning">
            <summary>
            True if there is at least one error or warning (not counting the pre-attention errors\warnings)
            </summary>
        </member>
        <member name="M:Microsoft.Data.SqlClient.TdsParserStateObject.AddError(Microsoft.Data.SqlClient.SqlError)">
            <summary>
            Adds an error to the error collection
            </summary>
            <param name="error"></param>
        </member>
        <member name="P:Microsoft.Data.SqlClient.TdsParserStateObject.ErrorCount">
            <summary>
            Gets the number of errors currently in the error collection
            </summary>
        </member>
        <member name="M:Microsoft.Data.SqlClient.TdsParserStateObject.AddWarning(Microsoft.Data.SqlClient.SqlError)">
            <summary>
            Adds an warning to the warning collection
            </summary>
            <param name="error"></param>
        </member>
        <member name="P:Microsoft.Data.SqlClient.TdsParserStateObject.WarningCount">
            <summary>
            Gets the number of warnings currently in the warning collection
            </summary>
        </member>
        <member name="M:Microsoft.Data.SqlClient.TdsParserStateObject.GetFullErrorAndWarningCollection(System.Boolean@)">
            <summary>
            Gets the full list of errors and warnings (including the pre-attention ones), then wipes all error and warning lists
            </summary>
            <param name="broken">If true, the connection should be broken</param>
            <returns>An array containing all of the errors and warnings</returns>
        </member>
        <member name="M:Microsoft.Data.SqlClient.TdsParserStateObject.StoreErrorAndWarningForAttention">
            <summary>
            Stores away current errors and warnings so that an attention can be processed
            </summary>
        </member>
        <member name="M:Microsoft.Data.SqlClient.TdsParserStateObject.RestoreErrorAndWarningAfterAttention">
            <summary>
            Restores errors and warnings that were stored in order to process an attention
            </summary>
        </member>
        <member name="M:Microsoft.Data.SqlClient.TdsParserStateObject.CheckThrowSNIException">
            <summary>
            Checks if an error is stored in _error and, if so, throws an error
            </summary>
        </member>
        <member name="M:Microsoft.Data.SqlClient.TdsParserStateObject.AssertStateIsClean">
            <summary>
            Debug Only: Ensures that the TdsParserStateObject has no lingering state and can safely be re-used
            </summary>
        </member>
        <member name="T:Microsoft.Data.SqlClient.SqlEncryptionKeyInfo">
            <summary>
            <para> Represents a single encrypted value for a CEK. It contains the encrypted CEK,
             the store type, name,the key path and encryption algorithm.</para>
            </summary>
        </member>
        <member name="T:Microsoft.Data.SqlClient.SqlTceCipherInfoEntry">
            <summary>
            <para> Encapsulates one entry in the CipherInfo table sent as part of Colmetadata.
            The same CEK is encrypted multiple times with different master keys (for master key
            rotation scenario) We need to keep all these around until we can resolve the CEK
            using the correct master key.</para>
            </summary>
        </member>
        <member name="F:Microsoft.Data.SqlClient.SqlTceCipherInfoEntry._columnEncryptionKeyValues">
            <summary>
            List of Column Encryption Key Information.
            </summary>
        </member>
        <member name="F:Microsoft.Data.SqlClient.SqlTceCipherInfoEntry._ordinal">
            <summary>
            Key Ordinal.
            </summary>
        </member>
        <member name="F:Microsoft.Data.SqlClient.SqlTceCipherInfoEntry._databaseId">
            <summary>
            Database ID
            </summary>
        </member>
        <member name="F:Microsoft.Data.SqlClient.SqlTceCipherInfoEntry._cekId">
            <summary>
            Cek ID
            </summary>
        </member>
        <member name="F:Microsoft.Data.SqlClient.SqlTceCipherInfoEntry._cekVersion">
            <summary>
            Cek Version
            </summary>
        </member>
        <member name="F:Microsoft.Data.SqlClient.SqlTceCipherInfoEntry._cekMdVersion">
            <summary>
            Cek MD Version
            </summary>
        </member>
        <member name="P:Microsoft.Data.SqlClient.SqlTceCipherInfoEntry.Ordinal">
            <summary>
            Return the ordinal.
            </summary>
        </member>
        <member name="P:Microsoft.Data.SqlClient.SqlTceCipherInfoEntry.DatabaseId">
            <summary>
            Return the DatabaseID.
            </summary>
        </member>
        <member name="P:Microsoft.Data.SqlClient.SqlTceCipherInfoEntry.CekId">
            <summary>
            Return the CEK ID.
            </summary>
        </member>
        <member name="P:Microsoft.Data.SqlClient.SqlTceCipherInfoEntry.CekVersion">
            <summary>
            Return the CEK Version.
            </summary>
        </member>
        <member name="P:Microsoft.Data.SqlClient.SqlTceCipherInfoEntry.CekMdVersion">
            <summary>
            Return the CEK MD Version.
            </summary>
        </member>
        <member name="P:Microsoft.Data.SqlClient.SqlTceCipherInfoEntry.ColumnEncryptionKeyValues">
            <summary>
            Return the list of Column Encryption Key Values.
            </summary>
        </member>
        <member name="M:Microsoft.Data.SqlClient.SqlTceCipherInfoEntry.Add(System.Byte[],System.Int32,System.Int32,System.Int32,System.Byte[],System.String,System.String,System.String)">
            <summary>
            Add an entry to the list of ColumnEncryptionKeyValues.
            </summary>
            <param name="encryptedKey"></param>
            <param name="databaseId"></param>
            <param name="cekId"></param>
            <param name="cekVersion"></param>
            <param name="cekMdVersion"></param>
            <param name="keyPath"></param>
            <param name="keyStoreName"></param>
            <param name="algorithmName"></param>
        </member>
        <member name="M:Microsoft.Data.SqlClient.SqlTceCipherInfoEntry.#ctor(System.Int32)">
            <summary>
            Constructor.
            </summary>
            <param name="ordinal"></param>
        </member>
        <member name="T:Microsoft.Data.SqlClient.SqlTceCipherInfoTable">
             <summary> 
             <para> Represents a table with various CEKs used in a resultset. Each entry corresponds to one (unique) CEK. The CEK
             may have been encrypted using multiple master keys (giving us multiple CEK values). All these values form one single
             entry in this table.</para>
            </summary>
        </member>
        <member name="T:Microsoft.Data.SqlClient.SqlCipherMetadata">
            <summary>
            Represents Encryption related information of the cipher data.
            </summary>
        </member>
        <member name="F:Microsoft.Data.SqlClient.SqlCipherMetadata._sqlTceCipherInfoEntry">
            <summary>
            Cipher Info Entry.
            </summary>
        </member>
        <member name="F:Microsoft.Data.SqlClient.SqlCipherMetadata._cipherAlgorithmId">
            <summary>
            Encryption Algorithm Id.
            </summary>
        </member>
        <member name="F:Microsoft.Data.SqlClient.SqlCipherMetadata._cipherAlgorithmName">
            <summary>
            Encryption Algorithm Name.
            </summary>
        </member>
        <member name="F:Microsoft.Data.SqlClient.SqlCipherMetadata._encryptionType">
            <summary>
            Encryption Type.
            </summary>
        </member>
        <member name="F:Microsoft.Data.SqlClient.SqlCipherMetadata._normalizationRuleVersion">
            <summary>
            Normalization Rule Version.
            </summary>
        </member>
        <member name="F:Microsoft.Data.SqlClient.SqlCipherMetadata._sqlClientEncryptionAlgorithm">
            <summary>
            Encryption Algorithm Handle.
            </summary>
        </member>
        <member name="F:Microsoft.Data.SqlClient.SqlCipherMetadata._sqlEncryptionKeyInfo">
            <summary>
            Sql Encryption Key Info.
            </summary>
        </member>
        <member name="F:Microsoft.Data.SqlClient.SqlCipherMetadata._ordinal">
            <summary>
            Ordinal (into the Cek Table).
            </summary>
        </member>
        <member name="P:Microsoft.Data.SqlClient.SqlCipherMetadata.EncryptionInfo">
            <summary>
            Return the Encryption Info Entry.
            </summary>
        </member>
        <member name="P:Microsoft.Data.SqlClient.SqlCipherMetadata.CipherAlgorithmId">
            <summary>
            Return the cipher's encryption algorithm id.
            </summary>
        </member>
        <member name="P:Microsoft.Data.SqlClient.SqlCipherMetadata.CipherAlgorithmName">
            <summary>
            Return the cipher's encryption algorithm name (could be null).
            </summary>
        </member>
        <member name="P:Microsoft.Data.SqlClient.SqlCipherMetadata.EncryptionType">
            <summary>
            Return EncryptionType (Deterministic, Randomized, etc.)
            </summary>
        </member>
        <member name="P:Microsoft.Data.SqlClient.SqlCipherMetadata.NormalizationRuleVersion">
            <summary>
            Return normalization rule version.
            </summary>
        </member>
        <member name="P:Microsoft.Data.SqlClient.SqlCipherMetadata.CipherAlgorithm">
            <summary>
            Return the cipher encyrption algorithm handle.
            </summary>
        </member>
        <member name="P:Microsoft.Data.SqlClient.SqlCipherMetadata.EncryptionKeyInfo">
            <summary>
            Return Encryption Key Info.
            </summary>
        </member>
        <member name="P:Microsoft.Data.SqlClient.SqlCipherMetadata.CekTableOrdinal">
            <summary>
            Return Ordinal into Cek Table.
            </summary>
        </member>
        <member name="M:Microsoft.Data.SqlClient.SqlCipherMetadata.#ctor(System.Nullable{Microsoft.Data.SqlClient.SqlTceCipherInfoEntry},System.UInt16,System.Byte,System.String,System.Byte,System.Byte)">
            <summary>
            Constructor.
            </summary>
            <param name="sqlTceCipherInfoEntry"></param>
            <param name="sqlClientEncryptionAlgorithm"></param>
            <param name="cipherAlgorithmId"></param>
            <param name="encryptionType"></param>
            <param name="normalizationRuleVersion"></param>
        </member>
        <member name="M:Microsoft.Data.SqlClient.SqlCipherMetadata.IsAlgorithmInitialized">
            <summary>
            Do we have an handle to the cipher encryption algorithm already ?
            </summary>
            <returns></returns>
        </member>
        <member name="T:Microsoft.Data.SqlClient.SqlColumnEncryptionInputParameterInfo">
            <summary>
            Class encapsulating additional information when sending encrypted input parameters.
            </summary>
        </member>
        <member name="F:Microsoft.Data.SqlClient.SqlColumnEncryptionInputParameterInfo._smiParameterMetadata">
            <summary>
            Metadata of the parameter to write the TYPE_INFO of the unencrypted column data type.
            </summary>
        </member>
        <member name="F:Microsoft.Data.SqlClient.SqlColumnEncryptionInputParameterInfo._cipherMetadata">
            <summary>
            Column encryption related metadata.
            </summary>
        </member>
        <member name="F:Microsoft.Data.SqlClient.SqlColumnEncryptionInputParameterInfo._serializedWireFormat">
            <summary>
            Serialized format for a subset of members.
            Does not include _smiParameterMetadata's serialization.
            </summary>
        </member>
        <member name="P:Microsoft.Data.SqlClient.SqlColumnEncryptionInputParameterInfo.ParameterMetadata">
            <summary>
            Return the SMI Parameter Metadata.
            </summary>
        </member>
        <member name="P:Microsoft.Data.SqlClient.SqlColumnEncryptionInputParameterInfo.SerializedWireFormat">
            <summary>
            Return the serialized format for some members.
            This is pre-calculated and cached since members are immutable.
            Does not include _smiParameterMetadata's serialization.
            </summary>
        </member>
        <member name="M:Microsoft.Data.SqlClient.SqlColumnEncryptionInputParameterInfo.#ctor(Microsoft.Data.SqlClient.Server.SmiParameterMetaData,Microsoft.Data.SqlClient.SqlCipherMetadata)">
            <summary>
            Constructor.
            </summary>
            <param name="smiParameterMetadata"></param>
            <param name="cipherMetadata"></param>
        </member>
        <member name="M:Microsoft.Data.SqlClient.SqlColumnEncryptionInputParameterInfo.SerializeToWriteFormat">
            <summary>
            Serializes some data members to wire format.
            </summary>
        </member>
        <member name="M:Microsoft.Data.SqlClient.SqlColumnEncryptionInputParameterInfo.SerializeIntIntoBuffer(System.Int32,System.Byte[],System.Int32@)">
            <summary>
            Serializes an int into the provided buffer and offset.
            </summary>
        </member>
        <member name="T:Microsoft.Data.SqlClient.SqlClientEncryptionAlgorithm">
            <summary>
            Abstract base class for all TCE encryption algorithms. It exposes two functions
            	1. Encrypt - This function is used by SqlClient under the covers to transparently encrypt TCE enabled column data.
            	2. Decrypt - This function is used by SqlClient under the covers to transparently decrypt TCE enabled column data.
            </summary>
        </member>
        <member name="M:Microsoft.Data.SqlClient.SqlClientEncryptionAlgorithm.EncryptData(System.Byte[])">
            <summary>
            Encrypts the plainText with a column encryption key
            </summary>
            <param name="plainText">Plain text value to be encrypted</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Data.SqlClient.SqlClientEncryptionAlgorithm.DecryptData(System.Byte[])">
            <summary>
            Decrypts the cipherText with a column encryption key
            </summary>
            <param name="cipherText">Ciphertext value to be decrypted</param>
            <returns></returns>
        </member>
        <member name="T:Microsoft.Data.SqlClient.SqlClientEncryptionAlgorithmFactory">
            <summary>
            Abstract base class for all TCE encryption algorithm factory classes. Factory classes create instances of an encryption algorithm
            with a given key. At runtime when we determine a particular column is marked for TCE, based on the encryption algorithm we invoke 
            the corresponding factory class and retrieve an object to an encryption algorithm.
            </summary>
        </member>
        <member name="M:Microsoft.Data.SqlClient.SqlClientEncryptionAlgorithmFactory.Create(Microsoft.Data.SqlClient.SqlClientSymmetricKey,Microsoft.Data.SqlClient.SqlClientEncryptionType,System.String)">
            <summary>
            Creates an encrytion algorithm with a given key.
            </summary>
            <param name="rootKey">encryption key that should be passed to the encryption algorithm to be created</param>
            <param name="encryptionType">Encryption Type, some algorithms will need this</param>
            <param name="encryptionAlgorithm">Encryption algorithm name. Needed for extracting version bits</param>
            <returns>Return a newly created SqlClientEncryptionAlgorithm instance</returns>
        </member>
        <member name="T:Microsoft.Data.SqlClient.SqlClientEncryptionType">
            <summary>
            Encryption types supported in TCE
            </summary>
        </member>
        <member name="T:Microsoft.Data.SqlClient.SqlClientSymmetricKey">
            <summary>
            Base class containing raw key bytes for symmetric key algorithms. Some encryption algorithms can use the key directly while others derive sub keys from this.
            If an algorithm needs to derive more keys, have a derived class from this and use it in the corresponding encryption algorithm.
            </summary>
        </member>
        <member name="F:Microsoft.Data.SqlClient.SqlClientSymmetricKey._rootKey">
            <summary>
            The underlying key material
            </summary>
        </member>
        <member name="M:Microsoft.Data.SqlClient.SqlClientSymmetricKey.#ctor(System.Byte[])">
            <summary>
            Constructor that initializes the root key.
            </summary>
            <param name="rootKey">root key</param>
        </member>
        <member name="M:Microsoft.Data.SqlClient.SqlClientSymmetricKey.Finalize">
            <summary>
            Empty destructor for binary back compat.
            </summary>
        </member>
        <member name="P:Microsoft.Data.SqlClient.SqlClientSymmetricKey.RootKey">
            <summary>
            Returns a copy of the plain text key
            This is needed for actual encryption/decryption.
            </summary>
        </member>
        <member name="M:Microsoft.Data.SqlClient.SqlClientSymmetricKey.GetKeyHash">
            <summary>
            Computes SHA256 value of the plain text key bytes
            </summary>
            <returns>A string containing SHA256 hash of the root key</returns>
        </member>
        <member name="M:Microsoft.Data.SqlClient.SqlClientSymmetricKey.Length">
            <summary>
            Gets the length of the root key
            </summary>
            <returns>
            Returns the length of the root key
            </returns>
        </member>
        <member name="M:Microsoft.Data.SqlClient.SqlSecurityUtility.GetHMACWithSHA256(System.Byte[],System.Byte[],System.Byte[])">
            <summary>
            Computes a keyed hash of a given text and returns. It fills the buffer "hash" with computed hash value.
            </summary>
            <param name="plainText">Plain text bytes whose hash has to be computed.</param>
            <param name="key">key used for the HMAC</param>
            <param name="hash">Output buffer where the computed hash value is stored. If its less that 64 bytes, the hash is truncated</param>
            <returns>HMAC value</returns>
        </member>
        <member name="M:Microsoft.Data.SqlClient.SqlSecurityUtility.GetSHA256Hash(System.Byte[])">
            <summary>
            Computes SHA256 hash of a given input
            </summary>
            <param name="input">input byte array which needs to be hashed</param>
            <returns>Returns SHA256 hash in a string form</returns>
        </member>
        <member name="M:Microsoft.Data.SqlClient.SqlSecurityUtility.GenerateRandomBytes(System.Byte[])">
            <summary>
            Generates cryptographicall random bytes
            </summary>
            <param name="length">No of cryptographically random bytes to be generated</param>
            <returns>A byte array containing cryptographically generated random bytes</returns>
        </member>
        <member name="M:Microsoft.Data.SqlClient.SqlSecurityUtility.CompareBytes(System.Byte[],System.Byte[],System.Int32,System.Int32)">
            <summary>
            Compares two byte arrays and returns true if all bytes are equal
            </summary>
            <param name="buffer1">input buffer</param>
            <param name="buffer2">another buffer to be compared against</param>
            <returns>returns true if both the arrays have the same byte values else returns false</returns>
        </member>
        <member name="M:Microsoft.Data.SqlClient.SqlSecurityUtility.GetHexString(System.Byte[])">
            <summary>
            Gets hex representation of byte array.
            <param name="input">input byte array</param>
            </summary>
        </member>
        <member name="M:Microsoft.Data.SqlClient.SqlSecurityUtility.GetCurrentFunctionName">
            <summary>
            Returns the caller's function name in the format of [ClassName].[FunctionName]
            </summary>
        </member>
        <member name="M:Microsoft.Data.SqlClient.SqlSecurityUtility.ValidateAndGetEncryptionAlgorithmName(System.Byte,System.String)">
            <summary>
            Return the algorithm name mapped to an Id.
            </summary>
            <param name="cipherAlgorithmId"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Data.SqlClient.SqlSecurityUtility.GetRegisteredCipherAlgorithmIds">
            <summary>
            Retrieves a string with comma separated list of registered algorithm Ids (enclosed in quotes).
            </summary>
        </member>
        <member name="M:Microsoft.Data.SqlClient.SqlSecurityUtility.EncryptWithKey(System.Byte[],Microsoft.Data.SqlClient.SqlCipherMetadata,System.String)">
            <summary>
            Encrypts the plaintext.
            </summary>
        </member>
        <member name="M:Microsoft.Data.SqlClient.SqlSecurityUtility.GetBytesAsString(System.Byte[],System.Boolean,System.Int32)">
            <summary>
            Gets a string with first/last 10 bytes in the buff (useful for exception handling).
            </summary>
        </member>
        <member name="M:Microsoft.Data.SqlClient.SqlSecurityUtility.DecryptWithKey(System.Byte[],Microsoft.Data.SqlClient.SqlCipherMetadata,System.String)">
            <summary>
            Decrypts the ciphertext.
            </summary>
        </member>
        <member name="M:Microsoft.Data.SqlClient.SqlSecurityUtility.DecryptSymmetricKey(Microsoft.Data.SqlClient.SqlCipherMetadata,System.String)">
            <summary>
            <para> Decrypts the symmetric key and saves it in metadata. In addition, intializes 
            the SqlClientEncryptionAlgorithm for rapid decryption.</para>
            </summary>
        </member>
        <member name="M:Microsoft.Data.SqlClient.SqlSecurityUtility.DecryptSymmetricKey(System.Nullable{Microsoft.Data.SqlClient.SqlTceCipherInfoEntry},System.String,Microsoft.Data.SqlClient.SqlClientSymmetricKey@,System.Nullable{Microsoft.Data.SqlClient.SqlEncryptionKeyInfo}@)">
            <summary>
            Decrypts the symmetric key and saves it in metadata.
            </summary>
        </member>
        <member name="M:Microsoft.Data.SqlClient.SqlSecurityUtility.GetBase64LengthFromByteLength(System.Int32)">
            <summary>
            Calculates the length of the Base64 string used to represent a byte[] with the specified length.
            </summary>
            <param name="byteLength"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Data.SqlClient.SqlSecurityUtility.VerifyColumnMasterKeySignature(System.String,System.String,System.String,System.Boolean,System.Byte[])">
            <summary>
            Verifies Column Master Key Signature.
            </summary>
        </member>
        <member name="T:Microsoft.Data.SqlClient.SqlAeadAes256CbcHmac256Algorithm">
            <summary>
            This class implements authenticated encryption algorithm with associated data as described in 
            http://tools.ietf.org/html/draft-mcgrew-aead-aes-cbc-hmac-sha2-05. More specifically this implements
            AEAD_AES_256_CBC_HMAC_SHA256 algorithm.
            </summary>
        </member>
        <member name="F:Microsoft.Data.SqlClient.SqlAeadAes256CbcHmac256Algorithm.AlgorithmName">
            <summary>
            Algorithm Name
            </summary>
        </member>
        <member name="F:Microsoft.Data.SqlClient.SqlAeadAes256CbcHmac256Algorithm._KeySizeInBytes">
            <summary>
            Key size in bytes
            </summary>
        </member>
        <member name="F:Microsoft.Data.SqlClient.SqlAeadAes256CbcHmac256Algorithm._BlockSizeInBytes">
            <summary>
            Block size in bytes. AES uses 16 byte blocks.
            </summary>
        </member>
        <member name="F:Microsoft.Data.SqlClient.SqlAeadAes256CbcHmac256Algorithm._MinimumCipherTextLengthInBytesNoAuthenticationTag">
            <summary>
            Minimum Length of cipherText without authentication tag. This value is 1 (version byte) + 16 (IV) + 16 (minimum of 1 block of cipher Text)
            </summary>
        </member>
        <member name="F:Microsoft.Data.SqlClient.SqlAeadAes256CbcHmac256Algorithm._MinimumCipherTextLengthInBytesWithAuthenticationTag">
            <summary>
            Minimum Length of cipherText. This value is 1 (version byte) + 32 (authentication tag) + 16 (IV) + 16 (minimum of 1 block of cipher Text)
            </summary>
        </member>
        <member name="F:Microsoft.Data.SqlClient.SqlAeadAes256CbcHmac256Algorithm._cipherMode">
            <summary>
            Cipher Mode. For this algorithm, we only use CBC mode.
            </summary>
        </member>
        <member name="F:Microsoft.Data.SqlClient.SqlAeadAes256CbcHmac256Algorithm._paddingMode">
            <summary>
            Padding mode. This algorithm uses PKCS7.
            </summary>
        </member>
        <member name="F:Microsoft.Data.SqlClient.SqlAeadAes256CbcHmac256Algorithm._isDeterministic">
            <summary>
            Variable indicating whether this algorithm should work in Deterministic mode or Randomized mode.
            For deterministic encryption, we derive an IV from the plaintext data.
            For randomized encryption, we generate a cryptographically random IV.
            </summary>
        </member>
        <member name="F:Microsoft.Data.SqlClient.SqlAeadAes256CbcHmac256Algorithm._algorithmVersion">
            <summary>
            Algorithm Version.
            </summary>
        </member>
        <member name="F:Microsoft.Data.SqlClient.SqlAeadAes256CbcHmac256Algorithm._columnEncryptionKey">
            <summary>
            Column Encryption Key. This has a root key and three derived keys.
            </summary>
        </member>
        <member name="F:Microsoft.Data.SqlClient.SqlAeadAes256CbcHmac256Algorithm._cryptoProviderPool">
            <summary>
            The pool of crypto providers to use for encrypt/decrypt operations.
            </summary>
        </member>
        <member name="F:Microsoft.Data.SqlClient.SqlAeadAes256CbcHmac256Algorithm._version">
            <summary>
            Byte array with algorithm version used for authentication tag computation.
            </summary>
        </member>
        <member name="F:Microsoft.Data.SqlClient.SqlAeadAes256CbcHmac256Algorithm._versionSize">
            <summary>
            Byte array with algorithm version size used for authentication tag computation.
            </summary>
        </member>
        <member name="M:Microsoft.Data.SqlClient.SqlAeadAes256CbcHmac256Algorithm.#ctor(Microsoft.Data.SqlClient.SqlAeadAes256CbcHmac256EncryptionKey,Microsoft.Data.SqlClient.SqlClientEncryptionType,System.Byte)">
            <summary>
            Initializes a new instance of SqlAeadAes256CbcHmac256Algorithm algorithm with a given key and encryption type
            </summary>
            <param name="encryptionKey">
            Root encryption key from which three other keys will be derived
            </param>
            <param name="encryptionType">Encryption Type, accepted values are Deterministic and Randomized. 
            For Deterministic encryption, a synthetic IV will be genenrated during encryption
            For Randomized encryption, a random IV will be generated during encryption.
            </param>
            <param name="algorithmVersion">
            Algorithm version
            </param>
        </member>
        <member name="M:Microsoft.Data.SqlClient.SqlAeadAes256CbcHmac256Algorithm.EncryptData(System.Byte[])">
            <summary>
            Encryption Algorithm
            cell_iv = HMAC_SHA-2-256(iv_key, cell_data) truncated to 128 bits
            cell_ciphertext = AES-CBC-256(enc_key, cell_iv, cell_data) with PKCS7 padding.
            cell_tag = HMAC_SHA-2-256(mac_key, versionbyte + cell_iv + cell_ciphertext + versionbyte_length)
            cell_blob = versionbyte + cell_tag + cell_iv + cell_ciphertext
            </summary>
            <param name="plainText">Plaintext data to be encrypted</param>
            <returns>Returns the ciphertext corresponding to the plaintext.</returns>
        </member>
        <member name="M:Microsoft.Data.SqlClient.SqlAeadAes256CbcHmac256Algorithm.EncryptData(System.Byte[],System.Boolean)">
            <summary>
            Encryption Algorithm
            cell_iv = HMAC_SHA-2-256(iv_key, cell_data) truncated to 128 bits
            cell_ciphertext = AES-CBC-256(enc_key, cell_iv, cell_data) with PKCS7 padding.
            (optional) cell_tag = HMAC_SHA-2-256(mac_key, versionbyte + cell_iv + cell_ciphertext + versionbyte_length)
            cell_blob = versionbyte + [cell_tag] + cell_iv + cell_ciphertext
            </summary>
            <param name="plainText">Plaintext data to be encrypted</param>
            <param name="hasAuthenticationTag">Does the algorithm require authentication tag.</param>
            <returns>Returns the ciphertext corresponding to the plaintext.</returns>
        </member>
        <member name="M:Microsoft.Data.SqlClient.SqlAeadAes256CbcHmac256Algorithm.DecryptData(System.Byte[])">
            <summary>
            Decryption steps
            1. Validate version byte
            2. Validate Authentication tag
            3. Decrypt the message
            </summary>
            <param name="cipherText"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Data.SqlClient.SqlAeadAes256CbcHmac256Algorithm.DecryptData(System.Byte[],System.Boolean)">
            <summary>
            Decryption steps
            1. Validate version byte
            2. (optional) Validate Authentication tag
            3. Decrypt the message
            </summary>
            <param name="cipherText"></param>
            <param name="hasAuthenticationTag"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Data.SqlClient.SqlAeadAes256CbcHmac256Algorithm.DecryptData(System.Byte[],System.Byte[],System.Int32,System.Int32)">
            <summary>
            Decrypts plain text data using AES in CBC mode
            </summary>
            <param name="plainText"> cipher text data to be decrypted</param>
            <param name="iv">IV to be used for decryption</param>
            <returns>Returns decrypted plain text data</returns>
        </member>
        <member name="M:Microsoft.Data.SqlClient.SqlAeadAes256CbcHmac256Algorithm.PrepareAuthenticationTag(System.Byte[],System.Byte[],System.Int32,System.Int32)">
            <summary>
            Prepares an authentication tag.
            Authentication Tag = HMAC_SHA-2-256(mac_key, versionbyte + cell_iv + cell_ciphertext + versionbyte_length)
            </summary>
            <param name="cipherText"></param>
            <returns></returns>
        </member>
        <member name="T:Microsoft.Data.SqlClient.SqlAeadAes256CbcHmac256EncryptionKey">
            <summary>
            Encryption key class containing 4 keys. This class is used by SqlAeadAes256CbcHmac256Algorithm and SqlAes256CbcAlgorithm
            1) root key - Main key that is used to derive the keys used in the encryption algorithm
            2) encryption key - A derived key that is used to encrypt the plain text and generate cipher text
            3) mac_key - A derived key that is used to compute HMAC of the cipher text
            4) iv_key - A derived key that is used to generate a synthetic IV from plain text data.
            </summary>
        </member>
        <member name="F:Microsoft.Data.SqlClient.SqlAeadAes256CbcHmac256EncryptionKey.KeySize">
            <summary>
            Key size in bits
            </summary>
        </member>
        <member name="F:Microsoft.Data.SqlClient.SqlAeadAes256CbcHmac256EncryptionKey._encryptionKeySaltFormat">
            <summary>
            Encryption Key Salt format. This is used to derive the encryption key from the root key.
            </summary>
        </member>
        <member name="F:Microsoft.Data.SqlClient.SqlAeadAes256CbcHmac256EncryptionKey._macKeySaltFormat">
            <summary>
            MAC Key Salt format. This is used to derive the MAC key from the root key.
            </summary>
        </member>
        <member name="F:Microsoft.Data.SqlClient.SqlAeadAes256CbcHmac256EncryptionKey._ivKeySaltFormat">
            <summary>
            IV Key Salt format. This is used to derive the IV key from the root key. This is only used for Deterministic encryption.
            </summary>
        </member>
        <member name="F:Microsoft.Data.SqlClient.SqlAeadAes256CbcHmac256EncryptionKey._encryptionKey">
            <summary>
            Encryption Key
            </summary>
        </member>
        <member name="F:Microsoft.Data.SqlClient.SqlAeadAes256CbcHmac256EncryptionKey._macKey">
            <summary>
            MAC key
            </summary>
        </member>
        <member name="F:Microsoft.Data.SqlClient.SqlAeadAes256CbcHmac256EncryptionKey._ivKey">
            <summary>
            IV Key
            </summary>
        </member>
        <member name="F:Microsoft.Data.SqlClient.SqlAeadAes256CbcHmac256EncryptionKey._algorithmName">
            <summary>
            The name of the algorithm this key will be used with.
            </summary>
        </member>
        <member name="M:Microsoft.Data.SqlClient.SqlAeadAes256CbcHmac256EncryptionKey.#ctor(System.Byte[],System.String)">
            <summary>
            Derives all the required keys from the given root key
            </summary>
            <param name="rootKey">Root key used to derive all the required derived keys</param>
        </member>
        <member name="P:Microsoft.Data.SqlClient.SqlAeadAes256CbcHmac256EncryptionKey.EncryptionKey">
            <summary>
            Encryption key should be used for encryption and decryption
            </summary>
        </member>
        <member name="P:Microsoft.Data.SqlClient.SqlAeadAes256CbcHmac256EncryptionKey.MACKey">
            <summary>
            MAC key should be used to compute and validate HMAC
            </summary>
        </member>
        <member name="P:Microsoft.Data.SqlClient.SqlAeadAes256CbcHmac256EncryptionKey.IVKey">
            <summary>
            IV key should be used to compute synthetic IV from a given plain text
            </summary>
        </member>
        <member name="T:Microsoft.Data.SqlClient.ColumnMasterKeyMetadataSignatureVerificationCache">
            <summary>
            Cache for storing result of signature verfication of CMK Metadata
            </summary>
        </member>
        <member name="M:Microsoft.Data.SqlClient.ColumnMasterKeyMetadataSignatureVerificationCache.GetSignatureVerificationResult(System.String,System.String,System.Boolean,System.Byte[])">
            <summary>
            Get signature verification result for given CMK metadata (KeystoreName, MasterKeyPath, allowEnclaveComputations) and a given signature
            </summary>
            <param name="keyStoreName">Key Store name for CMK</param>
            <param name="masterKeyPath">Key Path for CMK</param>
            <param name="allowEnclaveComputations">boolean indicating whether the key can be sent to enclave</param>
            <param name="signature">Signature for the CMK metadata</param>
            <returns>null if the data is not found in cache otherwise returns true/false indicating signature verification success/failure</returns>
        </member>
        <member name="M:Microsoft.Data.SqlClient.ColumnMasterKeyMetadataSignatureVerificationCache.AddSignatureVerificationResult(System.String,System.String,System.Boolean,System.Byte[],System.Boolean)">
            <summary>
            Add signature verification result for given CMK metadata (KeystoreName, MasterKeyPath, allowEnclaveComputations) and a given signature in the cache
            </summary>
            <param name="keyStoreName">Key Store name for CMK</param>
            <param name="masterKeyPath">Key Path for CMK</param>
            <param name="allowEnclaveComputations">boolean indicating whether the key can be sent to enclave</param>
            <param name="signature">Signature for the CMK metadata</param>
            <param name="result">result indicating signature verification success/failure</param>
        </member>
        <member name="T:Microsoft.Data.SqlClient.SqlAes256CbcAlgorithm">
            <summary>
            This class implements AES_256_CBC algorithm.
            </summary>
        </member>
        <member name="F:Microsoft.Data.SqlClient.SqlAes256CbcAlgorithm.AlgorithmName">
            <summary>
            Algorithm Name
            </summary>
        </member>
        <member name="M:Microsoft.Data.SqlClient.SqlAes256CbcAlgorithm.#ctor(Microsoft.Data.SqlClient.SqlAeadAes256CbcHmac256EncryptionKey,Microsoft.Data.SqlClient.SqlClientEncryptionType,System.Byte)">
            <summary>
            Initializes a new instance of SqlAes256CbcAlgorithm algorithm with a given key and encryption type
            </summary>
            <param name="encryptionKey">
            Root encryption key from which three other keys will be derived
            </param>
            <param name="encryptionType">Encryption Type, accepted values are Deterministic and Randomized. 
            For Deterministic encryption, a synthetic IV will be genenrated during encryption
            For Randomized encryption, a random IV will be generated during encryption.
            </param>
            <param name="algorithmVersion">
            Algorithm version
            </param>
        </member>
        <member name="M:Microsoft.Data.SqlClient.SqlAes256CbcAlgorithm.EncryptData(System.Byte[])">
            <summary>
            Encryption Algorithm
            Simply call the base class, indicating we don't need an authentication tag.
            </summary>
            <param name="plainText">Plaintext data to be encrypted</param>
            <returns>Returns the ciphertext corresponding to the plaintext.</returns>
        </member>
        <member name="M:Microsoft.Data.SqlClient.SqlAes256CbcAlgorithm.DecryptData(System.Byte[])">
            <summary>
            Decryption Algorithm
            Simply call the base class, indicating we don't have an authentication tag.
            </summary>
            <param name="cipherText"></param>
            <returns></returns>
        </member>
        <member name="T:Microsoft.Data.SqlClient.SqlClientEncryptionAlgorithmFactoryList">
            <summary>
            <para> Implements a global directory of all the encryption algorithms registered with client.</para>
            </summary>
        </member>
        <member name="M:Microsoft.Data.SqlClient.SqlClientEncryptionAlgorithmFactoryList.GetRegisteredCipherAlgorithmNames">
            <summary>
            Get the registered list of algorithms as a comma separated list with algorithm names
            wrapped in single quotes.
            </summary>
        </member>
        <member name="M:Microsoft.Data.SqlClient.SqlClientEncryptionAlgorithmFactoryList.GetAlgorithm(Microsoft.Data.SqlClient.SqlClientSymmetricKey,System.Byte,System.String,Microsoft.Data.SqlClient.SqlClientEncryptionAlgorithm@)">
            <summary>
            Gets the algorithm handle instance for a given algorithm and instantiates it using the provided key and the encryption type.
            </summary>
            <param name="key"></param>
            <param name="type"></param>
            <param name="algorithmName"></param>
            <param name="encryptionAlgorithm"></param>
        </member>
        <member name="T:Microsoft.Data.SqlClient.SqlAeadAes256CbcHmac256Factory">
            <summary>
            This is a factory class for AEAD_AES_256_CBC_HMAC_SHA256
            </summary>
        </member>
        <member name="F:Microsoft.Data.SqlClient.SqlAeadAes256CbcHmac256Factory._encryptionAlgorithms">
            <summary>
            Factory classes caches the SqlAeadAes256CbcHmac256EncryptionKey objects to avoid computation of the derived keys
            </summary>
        </member>
        <member name="M:Microsoft.Data.SqlClient.SqlAeadAes256CbcHmac256Factory.Create(Microsoft.Data.SqlClient.SqlClientSymmetricKey,Microsoft.Data.SqlClient.SqlClientEncryptionType,System.String)">
            <summary>
            Creates an instance of AeadAes256CbcHmac256Algorithm class with a given key
            </summary>
            <param name="encryptionKey">Root key</param>
            <param name="encryptionType">Encryption Type. Expected values are either Determinitic or Randomized.</param>
            <param name="encryptionAlgorithm">Encryption Algorithm.</param>
            <returns></returns>
        </member>
        <member name="T:Microsoft.Data.SqlClient.SqlAes256CbcFactory">
            <summary>
            This is a factory class for AES_256_CBC.
            </summary>
        </member>
        <member name="F:Microsoft.Data.SqlClient.SqlAes256CbcFactory._encryptionAlgorithms">
            <summary>
            Factory classes caches the SqlAeadAes256CbcHmac256EncryptionKey objects to avoid computation of the derived keys
            </summary>
        </member>
        <member name="M:Microsoft.Data.SqlClient.SqlAes256CbcFactory.Create(Microsoft.Data.SqlClient.SqlClientSymmetricKey,Microsoft.Data.SqlClient.SqlClientEncryptionType,System.String)">
            <summary>
            Creates an instance of SqlAes256CbcAlgorithm class with a given key
            </summary>
            <param name="encryptionKey">Root key</param>
            <param name="encryptionType">Encryption Type. Expected values are either Determinitic or Randomized.</param>
            <param name="encryptionAlgorithm">Encryption Algorithm.</param>
            <returns></returns>
        </member>
        <member name="T:Microsoft.Data.SqlClient.SqlSymmetricKeyCache">
            <summary>
            <para> Implements a cache of Symmetric Keys (once they are decrypted).Useful for rapidly decrypting multiple data values.</para>
            </summary>
        </member>
        <member name="M:Microsoft.Data.SqlClient.SqlSymmetricKeyCache.GetKey(Microsoft.Data.SqlClient.SqlEncryptionKeyInfo,System.String,Microsoft.Data.SqlClient.SqlClientSymmetricKey@)">
            <summary>
            <para> Retrieves Symmetric Key (in plaintext) given the encryption material.</para>
            </summary>
        </member>
        <member name="T:Microsoft.Data.SqlClient.SqlColumnEncryptionKeyStoreProvider">
            <summary>
            Abstract base class for all column encryption Key Store providers. It exposes two functions
            	1. DecryptColumnEncryptionKey - This is the function used by SqlClient under the covers to decrypt encrypted column encryption key blob.
            	2. EncryptColumnEncryptionKey - This will be used by client tools that generate DDL for customers
                3. SignColumnMasterKeyMetadata - This will be used by client tools that generate Column Master Keys (CMK) for customers
                4. VerifyColumnMasterKeyMetadata - This will be used by SqlClient under the covers to verify the CMKs received from SQL Server
            </summary>
        </member>
        <member name="M:Microsoft.Data.SqlClient.SqlColumnEncryptionKeyStoreProvider.DecryptColumnEncryptionKey(System.String,System.String,System.Byte[])">
            <summary>
            This function must be implemented by the corresponding Key Store providers. This function should use an asymmetric key identified by the key path
            and decrypt an encrypted column encryption key with a given encryption algorithm.
            </summary>
            <param name="masterKeyPath">Complete path of an asymmetric key. Path format is specific to a key store provider.</param>
            <param name="encryptionAlgorithm">Asymmetric Key Encryption Algorithm</param>
            <param name="encryptedColumnEncryptionKey">Encrypted Column Encryption Key</param>
            <returns>Plain text column encryption key</returns>
        </member>
        <member name="M:Microsoft.Data.SqlClient.SqlColumnEncryptionKeyStoreProvider.EncryptColumnEncryptionKey(System.String,System.String,System.Byte[])">
            <summary>
            This function must be implemented by the corresponding Key Store providers. This function should use an asymmetric key identified by a key path
            and encrypt a plain text column encryption key with a given asymmetric key encryption algorithm.
            </summary>
            <param name="keyPath">Complete path of an asymmetric key. Path format is specific to a key store provider.</param>
            <param name="encryptionAlgorithm">Asymmetric Key Encryption Algorithm</param>
            <param name="columnEncryptionKey">Plain text column encryption key to be encrypted</param>
            <returns>Encrypted column encryption key</returns>
        </member>
        <member name="M:Microsoft.Data.SqlClient.SqlColumnEncryptionKeyStoreProvider.SignColumnMasterKeyMetadata(System.String,System.Boolean)">
            <summary>
            This function must be implemented by the corresponding Key Store providers that wish to use enclaves with Always Encrypted.
            This function has a default implementation in the base class that throws NotImplementedException to ensure that 
            it does not break applications that rely on an old API
            Digitally sign the specified column master key metadata: the key path and the property indicating whether column master key supports enclave computations.
            </summary>
            <param name="masterKeyPath">Complete path of an asymmetric key. Path format is specific to a key store provider.</param>
            <param name="allowEnclaveComputations">Boolean indicating whether this key can be sent to trusted enclave</param>
            <returns>Encrypted column encryption key</returns>
        </member>
        <member name="M:Microsoft.Data.SqlClient.SqlColumnEncryptionKeyStoreProvider.VerifyColumnMasterKeyMetadata(System.String,System.Boolean,System.Byte[])">
            <summary>
            This function must be implemented by the corresponding Key Store providers that wish to use enclaves with Always Encrypted.
            This function has a default implementation in the base class that throws NotImplementedException to ensure that 
            it does not break applications that rely on an old API
            Verifies whether the specified signature is valid for the column master key with the specified metadata properties: the key path and the property indicating whether column master key supports enclave computations.
            </summary>
            <param name="masterKeyPath">Complete path of an asymmetric key. Path format is specific to a key store provider.</param>
            <param name="allowEnclaveComputations">Boolean indicating whether this key can be sent to trusted enclave</param>
            <param name="signature">Signature for the master key metadata</param>
            <returns>Boolean indicating whether the master key metadata can be verified based on the provided signature</returns>
        </member>
        <member name="T:Microsoft.Data.SqlClient.EnclavePackage">
            <summary>
            Class encapsulating necessary information about the byte package that needs to be sent to the enclave
            </summary>
        </member>
        <member name="M:Microsoft.Data.SqlClient.EnclavePackage.#ctor(System.Byte[],Microsoft.Data.SqlClient.SqlEnclaveSession)">
            <summary>
            Constructor
            </summary>
            <param name="enclavePackageBytes">byte package to be sent to enclave</param>
            <param name="enclaveSession"> enclave session to be used</param>
        </member>
        <member name="T:Microsoft.Data.SqlClient.SqlEnclaveSession">
            <summary>
            Encapsulates the state of a secure session between SqlClient and an enclave inside SQL Server, which can be used for computations on encrypted columns protected with Always Encrypted.
            </summary>
        </member>
        <member name="P:Microsoft.Data.SqlClient.SqlEnclaveSession.SessionId">
            <summary>
            A session id
            </summary>
        </member>
        <member name="M:Microsoft.Data.SqlClient.SqlEnclaveSession.GetSessionKey">
            <summary>
            The symmetric key SqlClient uses to encrypt all the information it sends to the enclave using the session. 
            </summary>
        </member>
        <member name="M:Microsoft.Data.SqlClient.SqlEnclaveSession.Clone(System.Byte[])">
            <summary>
            Deep copy the array into a new array
            </summary>
            <param name="arrayToClone"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Data.SqlClient.SqlEnclaveSession.#ctor(System.Byte[],System.Int64)">
            <summary>
            Creates a new session
            </summary>
            <param name="sessionKey">The symmetric key used to encrypt all the information sent using the session.</param>
            <param name="sessionId">The session id.</param>
            <param name="counter">The counter that helps prevent replay attacks and is incremented each time the session is retrieved from the cache.</param>
        </member>
        <member name="T:Microsoft.Data.SqlClient.SqlQueryMetadataCache">
            <summary>
            <para> Implements a cache of query paramater metadata that is used to avoid the extra roundtrip to the server for every execution of the same query.</para>
            </summary>
        </member>
        <member name="M:Microsoft.Data.SqlClient.SqlQueryMetadataCache.GetQueryMetadataIfExists(Microsoft.Data.SqlClient.SqlCommand)">
            <summary>
            <para> Retrieves the query metadata for a specific query from the cache.</para>
            </summary>
        </member>
        <member name="M:Microsoft.Data.SqlClient.SqlQueryMetadataCache.AddQueryMetadata(Microsoft.Data.SqlClient.SqlCommand,System.Boolean)">
            <summary>
            <para> Add the metadata for a specific query to the cache.</para>
            </summary>
        </member>
        <member name="M:Microsoft.Data.SqlClient.SqlQueryMetadataCache.InvalidateCacheEntry(Microsoft.Data.SqlClient.SqlCommand)">
            <summary>
            <para> Remove the metadata for a specific query from the cache.</para>
            </summary>
        </member>
        <member name="M:Microsoft.Data.SqlClient.SqlQueryMetadataCache.IncrementCacheHits">
            <summary>
            Increments the counter for the cache hits in the query metadata cache.
            </summary>
        </member>
        <member name="M:Microsoft.Data.SqlClient.SqlQueryMetadataCache.IncrementCacheMisses">
            <summary>
            Increments the counter for the cache misses in the query metadata cache.
            </summary>
        </member>
        <member name="M:Microsoft.Data.SqlClient.SqlQueryMetadataCache.ResetCacheCounts">
            <summary>
            Resets the counters for the cache hits and misses in the query metadata cache.
            </summary>
        </member>
        <member name="T:Microsoft.Data.SqlClient.SqlColumnEncryptionEnclaveProviderConfigurationSection">
            <summary>
            The configuration section definition for reading app.config.
            </summary>
        </member>
        <member name="P:Microsoft.Data.SqlClient.SqlColumnEncryptionEnclaveProviderConfigurationSection.Providers">
            <summary>
            User-defined SqlColumnEncryptionEnclaveProviders.
            </summary>
        </member>
        <member name="M:Microsoft.Data.SqlClient.SqlColumnEncryptionEnclaveProviderConfigurationManager.#ctor(Microsoft.Data.SqlClient.SqlColumnEncryptionEnclaveProviderConfigurationSection)">
            <summary>
            Constructor.
            </summary>
        </member>
        <member name="M:Microsoft.Data.SqlClient.SqlColumnEncryptionEnclaveProviderConfigurationManager.GetSqlColumnEncryptionEnclaveProvider(System.String)">
            <summary>
            Lookup SqlColumnEncryptionEnclaveProvider for a given SqlColumnEncryptionEnclaveProviderName
            </summary>
            <param name="SqlColumnEncryptionEnclaveProviderName"></param>
            <returns>SqlColumnEncryptionEnclaveProvider for a give sqlColumnEncryptionEnclaveProviderName if found, else returns null</returns>
        </member>
        <member name="T:Microsoft.Data.SqlClient.ColumnEncryptionKeyInfo">
            <summary>
            Class encapsulating Column encryption key info
            </summary>
        </member>
        <member name="M:Microsoft.Data.SqlClient.ColumnEncryptionKeyInfo.#ctor(System.Byte[],System.Int32,System.Byte[],System.Int32)">
            <summary>
            Constructor
            </summary>
            <param name="decryptedKey">Decrypted key bytes</param>
            <param name="databaseId">database id for this column encryption key</param>
            <param name="keyMetadataVersion">key metadata version for this column encryption key</param>
            <param name="keyid">key id for this column encryption key</param>
        </member>
        <member name="M:Microsoft.Data.SqlClient.ColumnEncryptionKeyInfo.GetLengthForSerialization">
            <summary>
            Calculates number of bytes required to serialize this object
            </summary>
            <returns>Number of bytes required for serialization</returns>
        </member>
        <member name="M:Microsoft.Data.SqlClient.ColumnEncryptionKeyInfo.SerializeToBuffer(System.Byte[],System.Int32)">
            <summary>
            Serialize this object in a given byte[] starting at a given offset
            </summary>
            <param name="bytePackage">byte array for serialization</param>
            <param name="startOffset">start offset in byte array</param>
            <returns>next available offset</returns>
        </member>
        <member name="T:Microsoft.Data.SqlClient.SqlColumnEncryptionCertificateStoreProvider">
            <summary>
            Certificate Key Store Provider class
            </summary>
        </member>
        <member name="F:Microsoft.Data.SqlClient.SqlColumnEncryptionCertificateStoreProvider.ProviderName">
            <summary>
            Name for the certificate key store provider.
            </summary>
        </member>
        <member name="F:Microsoft.Data.SqlClient.SqlColumnEncryptionCertificateStoreProvider.RSAEncryptionAlgorithmWithOAEP">
            <summary>
            RSA_OAEP is the only algorithm supported for encrypting/decrypting column encryption keys.
            </summary>
        </member>
        <member name="F:Microsoft.Data.SqlClient.SqlColumnEncryptionCertificateStoreProvider._certLocationLocalMachine">
            <summary>
            LocalMachine certificate store location. Valid certificate locations are LocalMachine and CurrentUser.
            </summary>
        </member>
        <member name="F:Microsoft.Data.SqlClient.SqlColumnEncryptionCertificateStoreProvider._certLocationCurrentUser">
            <summary>
            CurrentUser certificate store location. Valid certificate locations are LocalMachine and CurrentUser.
            </summary>
        </member>
        <member name="F:Microsoft.Data.SqlClient.SqlColumnEncryptionCertificateStoreProvider._myCertificateStore">
            <summary>
            Valid certificate store
            </summary>
        </member>
        <member name="F:Microsoft.Data.SqlClient.SqlColumnEncryptionCertificateStoreProvider._certificatePathFormat">
            <summary>
            Certificate path format. This is a custom format.
            </summary>
        </member>
        <member name="F:Microsoft.Data.SqlClient.SqlColumnEncryptionCertificateStoreProvider._hashingAlgorithm">
            <summary>
            Hashig algoirthm used for signing
            </summary>
        </member>
        <member name="F:Microsoft.Data.SqlClient.SqlColumnEncryptionCertificateStoreProvider._version">
            <summary>
            Algorithm version
            </summary>
        </member>
        <member name="M:Microsoft.Data.SqlClient.SqlColumnEncryptionCertificateStoreProvider.DecryptColumnEncryptionKey(System.String,System.String,System.Byte[])">
            <summary>
            This function uses a certificate specified by the key path
            and decrypts an encrypted CEK with RSA encryption algorithm.
            </summary>
            <param name="masterKeyPath">Complete path of a certificate</param>
            <param name="encryptionAlgorithm">Asymmetric Key Encryption Algorithm</param>
            <param name="encryptedColumnEncryptionKey">Encrypted Column Encryption Key</param>
            <returns>Plain text column encryption key</returns>
        </member>
        <member name="M:Microsoft.Data.SqlClient.SqlColumnEncryptionCertificateStoreProvider.EncryptColumnEncryptionKey(System.String,System.String,System.Byte[])">
            <summary>
            This function uses a certificate specified by the key path
            and encrypts CEK with RSA encryption algorithm.
            </summary>
            <param name="keyPath">Complete path of a certificate</param>
            <param name="encryptionAlgorithm">Asymmetric Key Encryption Algorithm</param>
            <param name="columnEncryptionKey">Plain text column encryption key</param>
            <returns>Encrypted column encryption key</returns>
        </member>
        <member name="M:Microsoft.Data.SqlClient.SqlColumnEncryptionCertificateStoreProvider.SignColumnMasterKeyMetadata(System.String,System.Boolean)">
            <summary>
            This function must be implemented by the corresponding Key Store providers. This function should use an asymmetric key identified by a key path
            and sign the masterkey metadata consisting of (masterKeyPath, allowEnclaveComputations bit, providerName).
            </summary>
            <param name="masterKeyPath">Complete path of an asymmetric key. Path format is specific to a key store provider.</param>
            <param name="allowEnclaveComputations">Boolean indicating whether this key can be sent to trusted enclave</param>
            <returns>Signature for master key metadata</returns>
        </member>
        <member name="M:Microsoft.Data.SqlClient.SqlColumnEncryptionCertificateStoreProvider.VerifyColumnMasterKeyMetadata(System.String,System.Boolean,System.Byte[])">
            <summary>
            This function must be implemented by the corresponding Key Store providers. This function should use an asymmetric key identified by a key path
            and verify the masterkey metadata consisting of (masterKeyPath, allowEnclaveComputations bit, providerName).
            </summary>
            <param name="masterKeyPath">Complete path of an asymmetric key. Path format is specific to a key store provider.</param>
            <param name="allowEnclaveComputations">Boolean indicating whether this key can be sent to trusted enclave</param>
            <param name="signature">Signature for the master key metadata</param>
            <returns>Boolean indicating whether the master key metadata can be verified based on the provided signature</returns>
        </member>
        <member name="M:Microsoft.Data.SqlClient.SqlColumnEncryptionCertificateStoreProvider.ValidateEncryptionAlgorithm(System.String,System.Boolean)">
            <summary>
            This function validates that the encryption algorithm is RSA_OAEP and if it is not,
            then throws an exception
            </summary>
            <param name="encryptionAlgorithm">Asymmetric key encryptio algorithm</param>
        </member>
        <member name="M:Microsoft.Data.SqlClient.SqlColumnEncryptionCertificateStoreProvider.ValidateCertificatePathLength(System.String,System.Boolean)">
            <summary>
            Certificate path length has to fit in two bytes, so check its value against Int16.MaxValue
            </summary>
            <param name="masterKeyPath"></param>
            <param name="isSystemOp"></param>
        </member>
        <member name="M:Microsoft.Data.SqlClient.SqlColumnEncryptionCertificateStoreProvider.GetValidCertificateLocations">
            <summary>
            Gets a string array containing Valid certificate locations.
            </summary>
        </member>
        <member name="M:Microsoft.Data.SqlClient.SqlColumnEncryptionCertificateStoreProvider.ValidateNonEmptyCertificatePath(System.String,System.Boolean)">
            <summary>
            Checks if the certificate path is Empty or Null (and raises exception if they are).
            </summary>
        </member>
        <member name="M:Microsoft.Data.SqlClient.SqlColumnEncryptionCertificateStoreProvider.GetCertificateByPath(System.String,System.Boolean)">
            <summary>
            Parses the given certificate path, searches in certificate store and returns a matching certificate
            </summary>
            <param name="keyPath">
            Certificate key path. Format of the path is [LocalMachine|CurrentUser]/[storename]/thumbprint
            </param>
            <returns>Returns the certificate identified by the certificate path</returns>
        </member>
        <member name="M:Microsoft.Data.SqlClient.SqlColumnEncryptionCertificateStoreProvider.GetCertificate(System.Security.Cryptography.X509Certificates.StoreLocation,System.Security.Cryptography.X509Certificates.StoreName,System.String,System.String,System.Boolean)">
            <summary>
            Searches for a certificate in certificate store and returns the matching certificate
            </summary>
            <param name="storeLocation">Store Location: This can be one of LocalMachine or UserName</param>
            <param name="storeName">Store Location: Currently this can only be My store.</param>
            <param name="thumbprint">Certificate thumbprint</param>
            <returns>Matching certificate</returns>
        </member>
        <member name="M:Microsoft.Data.SqlClient.SqlColumnEncryptionCertificateStoreProvider.RSAEncrypt(System.Byte[],System.Security.Cryptography.X509Certificates.X509Certificate2)">
            <summary>
            Encrypt the text using specified certificate.
            </summary>
            <param name="plaintext">Text to encrypt.</param>
            <param name="certificate">Certificate object.</param>
            <param name="masterKeyPath">Master key path that was used.</param>
            <returns>Returns an encrypted blob or throws an exception if there are any errors.</returns>
        </member>
        <member name="M:Microsoft.Data.SqlClient.SqlColumnEncryptionCertificateStoreProvider.RSADecrypt(System.Byte[],System.Security.Cryptography.X509Certificates.X509Certificate2)">
            <summary>
            Encrypt the text using specified certificate.
            </summary>
            <param name="plaintext">Text to decrypt.</param>
            <param name="certificate">Certificate object.</param>
            <param name="masterKeyPath">Master key path that was used.</param>
        </member>
        <member name="M:Microsoft.Data.SqlClient.SqlColumnEncryptionCertificateStoreProvider.RSASignHashedData(System.Byte[],System.Security.Cryptography.X509Certificates.X509Certificate2)">
            <summary>
            Generates signature based on RSA PKCS#v1.5 scheme using a specified certificate. 
            </summary>
            <param name="dataToSign">Text to sign.</param>
            <param name="certificate">Certificate object.</param>
            <returns>Signature</returns>
        </member>
        <member name="M:Microsoft.Data.SqlClient.SqlColumnEncryptionCertificateStoreProvider.RSAVerifySignature(System.Byte[],System.Byte[],System.Security.Cryptography.X509Certificates.X509Certificate2)">
            <summary>
            Verifies the given RSA PKCSv1.5 signature.
            </summary>
            <param name="dataToVerify"></param>
            <param name="signature"></param>
            <param name="certificate"></param>
            <returns>true if signature is valid, false if it is not valid</returns>
        </member>
        <member name="T:Microsoft.Data.SqlClient.SqlColumnEncryptionCngProvider">
            <summary>
            Provides implementation similar to certificate store provider.
            A CEK encrypted with certificate provider should be decryptable by this provider and vice versa.
            
            Envolope Format for the encrypted column encryption key  
                      version + keyPathLength + ciphertextLength + keyPath + ciphertext +  signature
            version: A single byte indicating the format version.
            keyPathLength: Length of the keyPath.
            ciphertextLength: ciphertext length
            keyPath: keyPath used to encrypt the column encryption key. This is only used for troubleshooting purposes and is not verified during decryption.
            ciphertext: Encrypted column encryption key
            signature: Signature of the entire byte array. Signature is validated before decrypting the column encryption key.
            </summary>
        </member>
        <member name="F:Microsoft.Data.SqlClient.SqlColumnEncryptionCngProvider.ProviderName">
            <summary>
            Name for the CNG key store provider.
            </summary>
        </member>
        <member name="F:Microsoft.Data.SqlClient.SqlColumnEncryptionCngProvider.RSAEncryptionAlgorithmWithOAEP">
            <summary>
            RSA_OAEP is the only algorithm supported for encrypting/decrypting column encryption keys using this provider.
            For now, we are keeping all the providers in sync.
            </summary>
        </member>
        <member name="F:Microsoft.Data.SqlClient.SqlColumnEncryptionCngProvider._version">
            <summary>
            Algorithm version
            </summary>
        </member>
        <member name="M:Microsoft.Data.SqlClient.SqlColumnEncryptionCngProvider.DecryptColumnEncryptionKey(System.String,System.String,System.Byte[])">
            <summary>
            This function uses the asymmetric key specified by the key path
            and decrypts an encrypted CEK with RSA encryption algorithm.
            </summary>
            <param name="masterKeyPath">Complete path of an asymmetric key in CNG</param>
            <param name="encryptionAlgorithm">Asymmetric Key Encryption Algorithm</param>
            <param name="encryptedColumnEncryptionKey">Encrypted Column Encryption Key</param>
            <returns>Plain text column encryption key</returns>
        </member>
        <member name="M:Microsoft.Data.SqlClient.SqlColumnEncryptionCngProvider.EncryptColumnEncryptionKey(System.String,System.String,System.Byte[])">
            <summary>
            This function uses the asymmetric key specified by the key path
            and encrypts CEK with RSA encryption algorithm.
            </summary>
            <param name="keyPath">Complete path of an asymmetric key in AKV</param>
            <param name="encryptionAlgorithm">Asymmetric Key Encryption Algorithm</param>
            <param name="columnEncryptionKey">Plain text column encryption key</param>
            <returns>Encrypted column encryption key</returns>
        </member>
        <member name="M:Microsoft.Data.SqlClient.SqlColumnEncryptionCngProvider.SignColumnMasterKeyMetadata(System.String,System.Boolean)">
            <summary>
            Throws NotSupportedException. In this version of .NET Framework this provider does not support signing column master key metadata.
            </summary>
            <param name="masterKeyPath">Complete path of an asymmetric key. Path format is specific to a key store provider.</param>
            <param name="allowEnclaveComputations">Boolean indicating whether this key can be sent to trusted enclave</param>
            <returns>Encrypted column encryption key</returns>
        </member>
        <member name="M:Microsoft.Data.SqlClient.SqlColumnEncryptionCngProvider.VerifyColumnMasterKeyMetadata(System.String,System.Boolean,System.Byte[])">
            <summary>
            Throws NotSupportedException. In this version of .NET Framework this provider does not support verifying signatures of column master key metadata.
            </summary>
            <param name="masterKeyPath">Complete path of an asymmetric key. Path format is specific to a key store provider.</param>
            <param name="allowEnclaveComputations">Boolean indicating whether this key can be sent to trusted enclave</param>
            <param name="signature">Signature for the master key metadata</param>
            <returns>Boolean indicating whether the master key metadata can be verified based on the provided signature</returns>
        </member>
        <member name="M:Microsoft.Data.SqlClient.SqlColumnEncryptionCngProvider.ValidateEncryptionAlgorithm(System.String,System.Boolean)">
            <summary>
            This function validates that the encryption algorithm is RSA_OAEP and if it is not,
            then throws an exception
            </summary>
            <param name="encryptionAlgorithm">Asymmetric key encryptio algorithm</param>
            <param name="isSystemOp">Indicates if ADO.NET calls or the customer calls the API</param>
        </member>
        <member name="M:Microsoft.Data.SqlClient.SqlColumnEncryptionCngProvider.ValidateNonEmptyKeyPath(System.String,System.Boolean)">
            <summary>
            Checks if the CNG key path is Empty or Null (and raises exception if they are).
            </summary>
            <param name="masterKeyPath">keypath containing the CNG provider name and key name</param>
            <param name="isSystemOp">Indicates if ADO.NET calls or the customer calls the API</param>
        </member>
        <member name="M:Microsoft.Data.SqlClient.SqlColumnEncryptionCngProvider.RSAEncrypt(System.Security.Cryptography.RSACng,System.Byte[])">
            <summary>
            Encrypt the text using specified CNG key.
            </summary>
            <param name="rsaCngProvider">RSA CNG Provider.</param>
            <param name="columnEncryptionKey">Plain text Column Encryption Key.</param>
            <returns>Returns an encrypted blob or throws an exception if there are any errors.</returns>
        </member>
        <member name="M:Microsoft.Data.SqlClient.SqlColumnEncryptionCngProvider.RSADecrypt(System.Security.Cryptography.RSACng,System.Byte[])">
            <summary>
            Decrypt the text using the specified CNG key.
            </summary>
            <param name="rsaCngProvider">RSA CNG Provider.</param>
            <param name="encryptedColumnEncryptionKey">Encrypted Column Encryption Key.</param>
            <returns>Returns the decrypted plaintext Column Encryption Key or throws an exception if there are any errors.</returns>
        </member>
        <member name="M:Microsoft.Data.SqlClient.SqlColumnEncryptionCngProvider.RSASignHashedData(System.Byte[],System.Security.Cryptography.RSACng)">
            <summary>
            Generates signature based on RSA PKCS#v1.5 scheme using a specified CNG Key. 
            </summary>
            <param name="dataToSign">Text to sign.</param>
            <param name="rsaCngProvider">RSA CNG Provider.</param>
            <returns>Signature</returns>
        </member>
        <member name="M:Microsoft.Data.SqlClient.SqlColumnEncryptionCngProvider.RSAVerifySignature(System.Byte[],System.Byte[],System.Security.Cryptography.RSACng)">
            <summary>
            Verifies the given RSA PKCSv1.5 signature.
            </summary>
            <param name="dataToVerify"></param>
            <param name="signature"></param>
            <param name="rsaCngProvider">RSA CNG Provider.</param>
            <returns>true if signature is valid, false if it is not valid</returns>
        </member>
        <member name="M:Microsoft.Data.SqlClient.SqlColumnEncryptionCngProvider.GetKeySize(System.Security.Cryptography.RSACng)">
            <summary>
            Gets the public Key size in bytes
            </summary>
            <param name="rsaCngProvider">RSA CNG Provider.</param>
            <returns>Key size in bytes</returns>
        </member>
        <member name="M:Microsoft.Data.SqlClient.SqlColumnEncryptionCngProvider.CreateRSACngProvider(System.String,System.Boolean)">
            <summary>
            Creates a RSACng object from the given keyName
            </summary>
            <param name="keyPath"></param>
            <param name="isSystemOp">Indicates if ADO.NET calls or the customer calls the API</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Data.SqlClient.SqlColumnEncryptionCngProvider.GetCngProviderAndKeyId(System.String,System.Boolean,System.String@,System.String@)">
            <summary>
            Extracts the CNG provider and key name from the key path
            </summary>
            <param name="masterKeyPath">keypath in the format [CNG Provider]\[KeyName]</param>
            <param name="isSystemOp">Indicates if ADO.NET calls or the customer calls the API</param>
            <param name="cngProvider">CNG Provider</param>
            <param name="keyIdentifier">Key identifier inside the CNG provider</param>
        </member>
        <member name="T:Microsoft.Data.SqlClient.SqlColumnEncryptionCspProvider">
            <summary>
            Provides implementation similar to certificate store provider.
            A CEK encrypted with certificate store provider should be decryptable by this provider and vice versa.
            
            Envolope Format for the encrypted column encryption key  
                      version + keyPathLength + ciphertextLength + keyPath + ciphertext +  signature
            version: A single byte indicating the format version.
            keyPathLength: Length of the keyPath.
            ciphertextLength: ciphertext length
            keyPath: keyPath used to encrypt the column encryption key. This is only used for troubleshooting purposes and is not verified during decryption.
            ciphertext: Encrypted column encryption key
            signature: Signature of the entire byte array. Signature is validated before decrypting the column encryption key.
            </summary>
        </member>
        <member name="F:Microsoft.Data.SqlClient.SqlColumnEncryptionCspProvider.ProviderName">
            <summary>
            Name for the CSP key store provider.
            </summary>
        </member>
        <member name="F:Microsoft.Data.SqlClient.SqlColumnEncryptionCspProvider.RSAEncryptionAlgorithmWithOAEP">
            <summary>
            RSA_OAEP is the only algorithm supported for encrypting/decrypting column encryption keys using this provider.
            For now, we are keeping all the providers in sync.
            </summary>
        </member>
        <member name="F:Microsoft.Data.SqlClient.SqlColumnEncryptionCspProvider.HashingAlgorithm">
            <summary>
            Hashing algoirthm used for signing
            </summary>
        </member>
        <member name="F:Microsoft.Data.SqlClient.SqlColumnEncryptionCspProvider._version">
            <summary>
            Algorithm version
            </summary>
        </member>
        <member name="M:Microsoft.Data.SqlClient.SqlColumnEncryptionCspProvider.DecryptColumnEncryptionKey(System.String,System.String,System.Byte[])">
            <summary>
            This function uses the asymmetric key specified by the key path
            and decrypts an encrypted CEK with RSA encryption algorithm.
            </summary>
            <param name="masterKeyPath">Complete path of an asymmetric key in CSP</param>
            <param name="encryptionAlgorithm">Asymmetric Key Encryption Algorithm</param>
            <param name="encryptedColumnEncryptionKey">Encrypted Column Encryption Key</param>
            <returns>Plain text column encryption key</returns>
        </member>
        <member name="M:Microsoft.Data.SqlClient.SqlColumnEncryptionCspProvider.EncryptColumnEncryptionKey(System.String,System.String,System.Byte[])">
            <summary>
            This function uses the asymmetric key specified by the key path
            and encrypts CEK with RSA encryption algorithm.
            </summary>
            <param name="keyPath">Complete path of an asymmetric key in AKV</param>
            <param name="encryptionAlgorithm">Asymmetric Key Encryption Algorithm</param>
            <param name="columnEncryptionKey">Plain text column encryption key</param>
            <returns>Encrypted column encryption key</returns>
        </member>
        <member name="M:Microsoft.Data.SqlClient.SqlColumnEncryptionCspProvider.SignColumnMasterKeyMetadata(System.String,System.Boolean)">
            <summary>
            Throws NotSupportedException. In this version of .NET Framework this provider does not support signing column master key metadata.
            </summary>
            <param name="masterKeyPath">Complete path of an asymmetric key. Path format is specific to a key store provider.</param>
            <param name="allowEnclaveComputations">Boolean indicating whether this key can be sent to trusted enclave</param>
            <returns>Encrypted column encryption key</returns>
        </member>
        <member name="M:Microsoft.Data.SqlClient.SqlColumnEncryptionCspProvider.VerifyColumnMasterKeyMetadata(System.String,System.Boolean,System.Byte[])">
            <summary>
            Throws NotSupportedException. In this version of .NET Framework this provider does not support verifying signatures of column master key metadata.
            </summary>
            <param name="masterKeyPath">Complete path of an asymmetric key. Path format is specific to a key store provider.</param>
            <param name="allowEnclaveComputations">Boolean indicating whether this key can be sent to trusted enclave</param>
            <param name="signature">Signature for the master key metadata</param>
            <returns>Boolean indicating whether the master key metadata can be verified based on the provided signature</returns>
        </member>
        <member name="M:Microsoft.Data.SqlClient.SqlColumnEncryptionCspProvider.ValidateEncryptionAlgorithm(System.String,System.Boolean)">
            <summary>
            This function validates that the encryption algorithm is RSA_OAEP and if it is not,
            then throws an exception
            </summary>
            <param name="encryptionAlgorithm">Asymmetric key encryptio algorithm</param>
            <param name="isSystemOp">Indicates if ADO.NET calls or the customer calls the API</param>
        </member>
        <member name="M:Microsoft.Data.SqlClient.SqlColumnEncryptionCspProvider.ValidateNonEmptyCSPKeyPath(System.String,System.Boolean)">
            <summary>
            Checks if the CSP key path is Empty or Null (and raises exception if they are).
            </summary>
            <param name="masterKeyPath">CSP key path.</param>
            <param name="isSystemOp">Indicates if ADO.NET calls or the customer calls the API</param>
        </member>
        <member name="M:Microsoft.Data.SqlClient.SqlColumnEncryptionCspProvider.RSAEncrypt(System.Security.Cryptography.RSACryptoServiceProvider,System.Byte[])">
            <summary>
            Encrypt the text using specified CSP key.
            </summary>
            <param name="masterKeyPath">CSP key path.</param>
            <param name="encryptionAlgorithm">Encryption Algorithm.</param>
            <param name="columnEncryptionKey">Plain text Column Encryption Key.</param>
            <returns>Returns an encrypted blob or throws an exception if there are any errors.</returns>
        </member>
        <member name="M:Microsoft.Data.SqlClient.SqlColumnEncryptionCspProvider.RSADecrypt(System.Security.Cryptography.RSACryptoServiceProvider,System.Byte[])">
            <summary>
            Decrypt the text using specified CSP key.
            </summary>
            <param name="masterKeyPath">CSP key url.</param>
            <param name="encryptionAlgorithm">Encryption Algorithm.</param>
            <param name="encryptedColumnEncryptionKey">Encrypted Column Encryption Key.</param>
            <returns>Returns the decrypted plaintext Column Encryption Key or throws an exception if there are any errors.</returns>
        </member>
        <member name="M:Microsoft.Data.SqlClient.SqlColumnEncryptionCspProvider.RSASignHashedData(System.Byte[],System.Security.Cryptography.RSACryptoServiceProvider)">
            <summary>
            Generates signature based on RSA PKCS#v1.5 scheme using a specified CSP Key URL. 
            </summary>
            <param name="dataToSign">Text to sign.</param>
            <param name="rscp">RSA Provider with a given key</param>
            <returns>Signature</returns>
        </member>
        <member name="M:Microsoft.Data.SqlClient.SqlColumnEncryptionCspProvider.RSAVerifySignature(System.Byte[],System.Byte[],System.Security.Cryptography.RSACryptoServiceProvider)">
            <summary>
            Verifies the given RSA PKCSv1.5 signature.
            </summary>
            <param name="dataToVerify"></param>
            <param name="signature"></param>
            <param name="rscp">RSA Provider with a given key</param>
            <returns>true if signature is valid, false if it is not valid</returns>
        </member>
        <member name="M:Microsoft.Data.SqlClient.SqlColumnEncryptionCspProvider.GetKeySize(System.Security.Cryptography.RSACryptoServiceProvider)">
            <summary>
            Gets the public Key size in bytes
            </summary>
            <param name="rscp">RSA Provider with a given key</param>
            <returns>Key size in bytes</returns>
        </member>
        <member name="M:Microsoft.Data.SqlClient.SqlColumnEncryptionCspProvider.CreateRSACryptoProvider(System.String,System.Boolean)">
            <summary>
            Creates a RSACryptoServiceProvider from the given key path which contains both CSP name and key name
            </summary>
            <param name="keyPath">key path in the format of [CAPI provider name]\[key name]</param>
            <param name="isSystemOp">Indicates if ADO.NET calls or the customer calls the API</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Data.SqlClient.SqlColumnEncryptionCspProvider.GetCspProviderAndKeyName(System.String,System.Boolean,System.String@,System.String@)">
            <summary>
            Extracts the CSP provider name and key name from the given key path
            </summary>
            <param name="keyPath">key path in the format of [CSP provider name]\[key name]</param>
            <param name="isSystemOp">Indicates if ADO.NET calls or the customer calls the API</param>
            <param name="cspProviderName">output containing the CSP provider name</param>
            <param name="keyIdentifier">output containing the key name</param>
        </member>
        <member name="M:Microsoft.Data.SqlClient.SqlColumnEncryptionCspProvider.GetProviderType(System.String,System.String,System.Boolean)">
            <summary>
            Gets the provider type from a given CAPI provider name
            </summary>
            <param name="providerName">CAPI provider name</param>
            <param name="keyPath">key path in the format of [CSP provider name]\[key name]</param>
            <param name="isSystemOp">Indicates if ADO.NET calls or the customer calls the API</param>
            <returns></returns>
        </member>
        <member name="T:Microsoft.Data.SqlTypes.SqlTypeWorkarounds">
            <summary>
            This type provides workarounds for the separation between System.Data.Common
            and Microsoft.Data.SqlClient.  The latter wants to access internal members of the former, and
            this class provides ways to do that.  We must review and update this implementation any time the
            implementation of the corresponding types in System.Data.Common change.
            </summary>
        </member>
        <member name="M:Microsoft.Data.SqlTypes.SqlTypeWorkarounds.SqlMoneyCtor(System.Int64,System.Int32)">
            <summary>
            Constructs a SqlMoney from a long value without scaling. The ignored parameter exists
            only to distinguish this constructor from the constructor that takes a long.
            Used only internally.
            </summary>
        </member>
        <member name="P:System.NotImplemented.ByDesign">
            <summary>
            Permanent NotImplementedException with no message shown to user.
            </summary>
        </member>
        <member name="M:System.NotImplemented.ByDesignWithMessage(System.String)">
            <summary>
            Permanent NotImplementedException with localized message shown to user.
            </summary>
        </member>
        <member name="M:System.NotImplemented.ActiveIssue(System.String)">
            <summary>
            Temporary NotImplementedException with no message shown to user.
            Example: Exception.ActiveIssue("https://github.com/dotnet/corefx/issues/xxxx") or Exception.ActiveIssue("TFS xxxxxx").
            </summary>
        </member>
        <member name="T:System.Threading.Tasks.TaskToApm">
            <summary>
            Provides support for efficiently using Tasks to implement the APM (Begin/End) pattern.
            </summary>
        </member>
        <member name="M:System.Threading.Tasks.TaskToApm.Begin(System.Threading.Tasks.Task,System.AsyncCallback,System.Object)">
            <summary>
            Marshals the Task as an IAsyncResult, using the supplied callback and state
            to implement the APM pattern.
            </summary>
            <param name="task">The Task to be marshaled.</param>
            <param name="callback">The callback to be invoked upon completion.</param>
            <param name="state">The state to be stored in the IAsyncResult.</param>
            <returns>An IAsyncResult to represent the task's asynchronous operation.</returns>
        </member>
        <member name="M:System.Threading.Tasks.TaskToApm.End(System.IAsyncResult)">
            <summary>Processes an IAsyncResult returned by Begin.</summary>
            <param name="asyncResult">The IAsyncResult to unwrap.</param>
        </member>
        <member name="M:System.Threading.Tasks.TaskToApm.End``1(System.IAsyncResult)">
            <summary>Processes an IAsyncResult returned by Begin.</summary>
            <param name="asyncResult">The IAsyncResult to unwrap.</param>
        </member>
        <member name="M:System.Threading.Tasks.TaskToApm.InvokeCallbackWhenTaskCompletes(System.Threading.Tasks.Task,System.AsyncCallback,System.IAsyncResult)">
            <summary>Invokes the callback asynchronously when the task has completed.</summary>
            <param name="antecedent">The Task to await.</param>
            <param name="callback">The callback to invoke when the Task completes.</param>
            <param name="asyncResult">The Task used as the IAsyncResult.</param>
        </member>
        <member name="T:System.Threading.Tasks.TaskToApm.TaskWrapperAsyncResult">
            <summary>
            Provides a simple IAsyncResult that wraps a Task.  This, in effect, allows
            for overriding what's seen for the CompletedSynchronously and AsyncState values.
            </summary>
        </member>
        <member name="F:System.Threading.Tasks.TaskToApm.TaskWrapperAsyncResult.Task">
            <summary>The wrapped Task.</summary>
        </member>
        <member name="F:System.Threading.Tasks.TaskToApm.TaskWrapperAsyncResult._state">
            <summary>The new AsyncState value.</summary>
        </member>
        <member name="F:System.Threading.Tasks.TaskToApm.TaskWrapperAsyncResult._completedSynchronously">
            <summary>The new CompletedSynchronously value.</summary>
        </member>
        <member name="M:System.Threading.Tasks.TaskToApm.TaskWrapperAsyncResult.#ctor(System.Threading.Tasks.Task,System.Object,System.Boolean)">
            <summary>Initializes the IAsyncResult with the Task to wrap and the overriding AsyncState and CompletedSynchronously values.</summary>
            <param name="task">The Task to wrap.</param>
            <param name="state">The new AsyncState value</param>
            <param name="completedSynchronously">The new CompletedSynchronously value.</param>
        </member>
        <member name="T:System.IO.PathInternal">
            <summary>Contains internal path helpers that are shared between many projects.</summary>
        </member>
        <member name="M:System.IO.PathInternal.IsValidDriveChar(System.Char)">
            <summary>
            Returns true if the given character is a valid drive letter
            </summary>
        </member>
        <member name="M:System.IO.PathInternal.EnsureExtendedPrefixIfNeeded(System.String)">
            <summary>
            Adds the extended path prefix (\\?\) if not already a device path, IF the path is not relative,
            AND the path is more than 259 characters. (> MAX_PATH + null). This will also insert the extended
            prefix if the path ends with a period or a space. Trailing periods and spaces are normally eaten
            away from paths during normalization, but if we see such a path at this point it should be
            normalized and has retained the final characters. (Typically from one of the *Info classes)
            </summary>
        </member>
        <member name="M:System.IO.PathInternal.EnsureExtendedPrefixOverMaxPath(System.String)">
            <summary>
            DO NOT USE- Use EnsureExtendedPrefixIfNeeded. This will be removed shortly.
            Adds the extended path prefix (\\?\) if not already a device path, IF the path is not relative,
            AND the path is more than 259 characters. (> MAX_PATH + null)
            </summary>
        </member>
        <member name="M:System.IO.PathInternal.EnsureExtendedPrefix(System.String)">
            <summary>
            Adds the extended path prefix (\\?\) if not relative or already a device path.
            </summary>
        </member>
        <member name="M:System.IO.PathInternal.IsDevice(System.ReadOnlySpan{System.Char})">
            <summary>
            Returns true if the path uses any of the DOS device path syntaxes. ("\\.\", "\\?\", or "\??\")
            </summary>
        </member>
        <member name="M:System.IO.PathInternal.IsDeviceUNC(System.ReadOnlySpan{System.Char})">
            <summary>
            Returns true if the path is a device UNC (\\?\UNC\, \\.\UNC\)
            </summary>
        </member>
        <member name="M:System.IO.PathInternal.IsExtended(System.ReadOnlySpan{System.Char})">
            <summary>
            Returns true if the path uses the canonical form of extended syntax ("\\?\" or "\??\"). If the
            path matches exactly (cannot use alternate directory separators) Windows will skip normalization
            and path length checks.
            </summary>
        </member>
        <member name="M:System.IO.PathInternal.HasWildCardCharacters(System.ReadOnlySpan{System.Char})">
            <summary>
            Check for known wildcard characters. '*' and '?' are the most common ones.
            </summary>
        </member>
        <member name="M:System.IO.PathInternal.GetRootLength(System.ReadOnlySpan{System.Char})">
            <summary>
            Gets the length of the root of the path (drive, share, etc.).
            </summary>
        </member>
        <member name="M:System.IO.PathInternal.IsPartiallyQualified(System.ReadOnlySpan{System.Char})">
            <summary>
            Returns true if the path specified is relative to the current drive or working directory.
            Returns false if the path is fixed to a specific drive or UNC path.  This method does no
            validation of the path (URIs will be returned as relative as a result).
            </summary>
            <remarks>
            Handles paths that use the alternate directory separator.  It is a frequent mistake to
            assume that rooted paths (Path.IsPathRooted) are not relative.  This isn't the case.
            "C:a" is drive relative- meaning that it will be resolved against the current directory
            for C: (rooted, but relative). "C:\a" is rooted and not relative (the current directory
            will not be used to modify the path).
            </remarks>
        </member>
        <member name="M:System.IO.PathInternal.IsDirectorySeparator(System.Char)">
            <summary>
            True if the given character is a directory separator.
            </summary>
        </member>
        <member name="M:System.IO.PathInternal.NormalizeDirectorySeparators(System.String)">
            <summary>
            Normalize separators in the given path. Converts forward slashes into back slashes and compresses slash runs, keeping initial 2 if present.
            Also trims initial whitespace in front of "rooted" paths (see PathStartSkip).
            
            This effectively replicates the behavior of the legacy NormalizePath when it was called with fullCheck=false and expandShortpaths=false.
            The current NormalizePath gets directory separator normalization from Win32's GetFullPathName(), which will resolve relative paths and as
            such can't be used here (and is overkill for our uses).
            
            Like the current NormalizePath this will not try and analyze periods/spaces within directory segments.
            </summary>
            <remarks>
            The only callers that used to use Path.Normalize(fullCheck=false) were Path.GetDirectoryName() and Path.GetPathRoot(). Both usages do
            not need trimming of trailing whitespace here.
            
            GetPathRoot() could technically skip normalizing separators after the second segment- consider as a future optimization.
            
            For legacy desktop behavior with ExpandShortPaths:
             - It has no impact on GetPathRoot() so doesn't need consideration.
             - It could impact GetDirectoryName(), but only if the path isn't relative (C:\ or \\Server\Share).
            
            In the case of GetDirectoryName() the ExpandShortPaths behavior was undocumented and provided inconsistent results if the path was
            fixed/relative. For example: "C:\PROGRA~1\A.TXT" would return "C:\Program Files" while ".\PROGRA~1\A.TXT" would return ".\PROGRA~1". If you
            ultimately call GetFullPath() this doesn't matter, but if you don't or have any intermediate string handling could easily be tripped up by
            this undocumented behavior.
            
            We won't match this old behavior because:
            
              1. It was undocumented
              2. It was costly (extremely so if it actually contained '~')
              3. Doesn't play nice with string logic
              4. Isn't a cross-plat friendly concept/behavior
            </remarks>
        </member>
        <member name="M:System.IO.PathInternal.IsEffectivelyEmpty(System.ReadOnlySpan{System.Char})">
            <summary>
            Returns true if the path is effectively empty for the current OS.
            For unix, this is empty or null. For Windows, this is empty, null, or 
            just spaces ((char)32).
            </summary>
        </member>
        <member name="T:System.Net.NetEventSource">
            <summary>Provides logging facilities for System.Net libraries.</summary>
        </member>
        <member name="F:System.Net.NetEventSource.Log">
            <summary>The single event source instance to use for all logging.</summary>
        </member>
        <member name="M:System.Net.NetEventSource.Enter(System.Object,System.FormattableString,System.String)">
            <summary>Logs entrance to a method.</summary>
            <param name="thisOrContextObject">`this`, or another object that serves to provide context for the operation.</param>
            <param name="formattableString">A description of the entrance, including any arguments to the call.</param>
            <param name="memberName">The calling member.</param>
        </member>
        <member name="M:System.Net.NetEventSource.Enter(System.Object,System.Object,System.String)">
            <summary>Logs entrance to a method.</summary>
            <param name="thisOrContextObject">`this`, or another object that serves to provide context for the operation.</param>
            <param name="arg0">The object to log.</param>
            <param name="memberName">The calling member.</param>
        </member>
        <member name="M:System.Net.NetEventSource.Enter(System.Object,System.Object,System.Object,System.String)">
            <summary>Logs entrance to a method.</summary>
            <param name="thisOrContextObject">`this`, or another object that serves to provide context for the operation.</param>
            <param name="arg0">The first object to log.</param>
            <param name="arg1">The second object to log.</param>
            <param name="memberName">The calling member.</param>
        </member>
        <member name="M:System.Net.NetEventSource.Enter(System.Object,System.Object,System.Object,System.Object,System.String)">
            <summary>Logs entrance to a method.</summary>
            <param name="thisOrContextObject">`this`, or another object that serves to provide context for the operation.</param>
            <param name="arg0">The first object to log.</param>
            <param name="arg1">The second object to log.</param>
            <param name="arg2">The third object to log.</param>
            <param name="memberName">The calling member.</param>
        </member>
        <member name="M:System.Net.NetEventSource.Exit(System.Object,System.FormattableString,System.String)">
            <summary>Logs exit from a method.</summary>
            <param name="thisOrContextObject">`this`, or another object that serves to provide context for the operation.</param>
            <param name="formattableString">A description of the exit operation, including any return values.</param>
            <param name="memberName">The calling member.</param>
        </member>
        <member name="M:System.Net.NetEventSource.Exit(System.Object,System.Object,System.String)">
            <summary>Logs exit from a method.</summary>
            <param name="thisOrContextObject">`this`, or another object that serves to provide context for the operation.</param>
            <param name="arg0">A return value from the member.</param>
            <param name="memberName">The calling member.</param>
        </member>
        <member name="M:System.Net.NetEventSource.Exit(System.Object,System.Object,System.Object,System.String)">
            <summary>Logs exit from a method.</summary>
            <param name="thisOrContextObject">`this`, or another object that serves to provide context for the operation.</param>
            <param name="arg0">A return value from the member.</param>
            <param name="arg1">A second return value from the member.</param>
            <param name="memberName">The calling member.</param>
        </member>
        <member name="M:System.Net.NetEventSource.Info(System.Object,System.FormattableString,System.String)">
            <summary>Logs an information message.</summary>
            <param name="thisOrContextObject">`this`, or another object that serves to provide context for the operation.</param>
            <param name="formattableString">The message to be logged.</param>
            <param name="memberName">The calling member.</param>
        </member>
        <member name="M:System.Net.NetEventSource.Info(System.Object,System.Object,System.String)">
            <summary>Logs an information message.</summary>
            <param name="thisOrContextObject">`this`, or another object that serves to provide context for the operation.</param>
            <param name="message">The message to be logged.</param>
            <param name="memberName">The calling member.</param>
        </member>
        <member name="M:System.Net.NetEventSource.Error(System.Object,System.FormattableString,System.String)">
            <summary>Logs an error message.</summary>
            <param name="thisOrContextObject">`this`, or another object that serves to provide context for the operation.</param>
            <param name="formattableString">The message to be logged.</param>
            <param name="memberName">The calling member.</param>
        </member>
        <member name="M:System.Net.NetEventSource.Error(System.Object,System.Object,System.String)">
            <summary>Logs an error message.</summary>
            <param name="thisOrContextObject">`this`, or another object that serves to provide context for the operation.</param>
            <param name="message">The message to be logged.</param>
            <param name="memberName">The calling member.</param>
        </member>
        <member name="M:System.Net.NetEventSource.Fail(System.Object,System.FormattableString,System.String)">
            <summary>Logs a fatal error and raises an assert.</summary>
            <param name="thisOrContextObject">`this`, or another object that serves to provide context for the operation.</param>
            <param name="formattableString">The message to be logged.</param>
            <param name="memberName">The calling member.</param>
        </member>
        <member name="M:System.Net.NetEventSource.Fail(System.Object,System.Object,System.String)">
            <summary>Logs a fatal error and raises an assert.</summary>
            <param name="thisOrContextObject">`this`, or another object that serves to provide context for the operation.</param>
            <param name="message">The message to be logged.</param>
            <param name="memberName">The calling member.</param>
        </member>
        <member name="M:System.Net.NetEventSource.DumpBuffer(System.Object,System.Byte[],System.String)">
            <summary>Logs the contents of a buffer.</summary>
            <param name="thisOrContextObject">`this`, or another object that serves to provide context for the operation.</param>
            <param name="buffer">The buffer to be logged.</param>
            <param name="memberName">The calling member.</param>
        </member>
        <member name="M:System.Net.NetEventSource.DumpBuffer(System.Object,System.Byte[],System.Int32,System.Int32,System.String)">
            <summary>Logs the contents of a buffer.</summary>
            <param name="thisOrContextObject">`this`, or another object that serves to provide context for the operation.</param>
            <param name="buffer">The buffer to be logged.</param>
            <param name="offset">The starting offset from which to log.</param>
            <param name="count">The number of bytes to log.</param>
            <param name="memberName">The calling member.</param>
        </member>
        <member name="M:System.Net.NetEventSource.DumpBuffer(System.Object,System.IntPtr,System.Int32,System.String)">
            <summary>Logs the contents of a buffer.</summary>
            <param name="thisOrContextObject">`this`, or another object that serves to provide context for the operation.</param>
            <param name="bufferPtr">The starting location of the buffer to be logged.</param>
            <param name="count">The number of bytes to log.</param>
            <param name="memberName">The calling member.</param>
        </member>
        <member name="M:System.Net.NetEventSource.Associate(System.Object,System.Object,System.String)">
            <summary>Logs a relationship between two objects.</summary>
            <param name="first">The first object.</param>
            <param name="second">The second object.</param>
            <param name="memberName">The calling member.</param>
        </member>
        <member name="M:System.Net.NetEventSource.Associate(System.Object,System.Object,System.Object,System.String)">
            <summary>Logs a relationship between two objects.</summary>
            <param name="thisOrContextObject">`this`, or another object that serves to provide context for the operation.</param>
            <param name="first">The first object.</param>
            <param name="second">The second object.</param>
            <param name="memberName">The calling member.</param>
        </member>
        <member name="T:System.SR">
            <summary>
              A strongly-typed resource class, for looking up localized strings, etc.
            </summary>
        </member>
        <member name="P:System.SR.ResourceManager">
            <summary>
              Returns the cached ResourceManager instance used by this class.
            </summary>
        </member>
        <member name="P:System.SR.Culture">
            <summary>
              Overrides the current thread's CurrentUICulture property for all
              resource lookups using this strongly typed resource class.
            </summary>
        </member>
        <member name="P:System.SR.ADP_BadParameterName">
            <summary>
              Looks up a localized string similar to Specified parameter name &apos;{0}&apos; is not valid..
            </summary>
        </member>
        <member name="P:System.SR.ADP_CalledTwice">
            <summary>
              Looks up a localized string similar to The method &apos;{0}&apos; cannot be called more than once for the same execution..
            </summary>
        </member>
        <member name="P:System.SR.ADP_ClosedConnectionError">
            <summary>
              Looks up a localized string similar to Invalid operation. The connection is closed..
            </summary>
        </member>
        <member name="P:System.SR.ADP_CollectionIndexInt32">
            <summary>
              Looks up a localized string similar to Invalid index {0} for this {1} with Count={2}..
            </summary>
        </member>
        <member name="P:System.SR.ADP_CollectionIndexString">
            <summary>
              Looks up a localized string similar to An {0} with {1} &apos;{2}&apos; is not contained by this {3}..
            </summary>
        </member>
        <member name="P:System.SR.ADP_CollectionInvalidType">
            <summary>
              Looks up a localized string similar to The {0} only accepts non-null {1} type objects, not {2} objects..
            </summary>
        </member>
        <member name="P:System.SR.ADP_CollectionIsNotParent">
            <summary>
              Looks up a localized string similar to The {0} is already contained by another {1}..
            </summary>
        </member>
        <member name="P:System.SR.ADP_CollectionNullValue">
            <summary>
              Looks up a localized string similar to The {0} only accepts non-null {1} type objects..
            </summary>
        </member>
        <member name="P:System.SR.ADP_CollectionRemoveInvalidObject">
            <summary>
              Looks up a localized string similar to Attempted to remove an {0} that is not contained by this {1}..
            </summary>
        </member>
        <member name="P:System.SR.ADP_CommandTextRequired">
            <summary>
              Looks up a localized string similar to {0}: CommandText property has not been initialized.
            </summary>
        </member>
        <member name="P:System.SR.ADP_ConnectionAlreadyOpen">
            <summary>
              Looks up a localized string similar to The connection was not closed. {0}.
            </summary>
        </member>
        <member name="P:System.SR.ADP_ConnectionIsDisabled">
            <summary>
              Looks up a localized string similar to The connection has been disabled..
            </summary>
        </member>
        <member name="P:System.SR.ADP_ConnectionRequired">
            <summary>
              Looks up a localized string similar to {0}: Connection property has not been initialized..
            </summary>
        </member>
        <member name="P:System.SR.ADP_ConnectionStateMsg">
            <summary>
              Looks up a localized string similar to The connection&apos;s current state: {0}..
            </summary>
        </member>
        <member name="P:System.SR.ADP_ConnectionStateMsg_Closed">
            <summary>
              Looks up a localized string similar to The connection&apos;s current state is closed..
            </summary>
        </member>
        <member name="P:System.SR.ADP_ConnectionStateMsg_Connecting">
            <summary>
              Looks up a localized string similar to The connection&apos;s current state is connecting..
            </summary>
        </member>
        <member name="P:System.SR.ADP_ConnectionStateMsg_Open">
            <summary>
              Looks up a localized string similar to The connection&apos;s current state is open..
            </summary>
        </member>
        <member name="P:System.SR.ADP_ConnectionStateMsg_OpenExecuting">
            <summary>
              Looks up a localized string similar to The connection&apos;s current state is executing..
            </summary>
        </member>
        <member name="P:System.SR.ADP_ConnectionStateMsg_OpenFetching">
            <summary>
              Looks up a localized string similar to The connection&apos;s current state is fetching..
            </summary>
        </member>
        <member name="P:System.SR.ADP_ConnectionStringSyntax">
            <summary>
              Looks up a localized string similar to Format of the initialization string does not conform to specification starting at index {0}..
            </summary>
        </member>
        <member name="P:System.SR.ADP_DataReaderClosed">
            <summary>
              Looks up a localized string similar to Invalid attempt to call {0} when reader is closed..
            </summary>
        </member>
        <member name="P:System.SR.ADP_DbTypeNotSupported">
            <summary>
              Looks up a localized string similar to No mapping exists from DbType {0} to a known {1}..
            </summary>
        </member>
        <member name="P:System.SR.ADP_DeriveParametersNotSupported">
            <summary>
              Looks up a localized string similar to {0} DeriveParameters only supports CommandType.StoredProcedure, not CommandType. {1}..
            </summary>
        </member>
        <member name="P:System.SR.ADP_DoubleValuedProperty">
            <summary>
              Looks up a localized string similar to The acceptable values for the property &apos;{0}&apos; are &apos;{1}&apos; or &apos;{2}&apos;..
            </summary>
        </member>
        <member name="P:System.SR.ADP_EmptyDatabaseName">
            <summary>
              Looks up a localized string similar to Database cannot be null, the empty string, or string of only whitespace..
            </summary>
        </member>
        <member name="P:System.SR.ADP_InternalConnectionError">
            <summary>
              Looks up a localized string similar to Internal DbConnection Error: {0}.
            </summary>
        </member>
        <member name="P:System.SR.ADP_InternalProviderError">
            <summary>
              Looks up a localized string similar to Internal .NET Framework Data Provider error {0}..
            </summary>
        </member>
        <member name="P:System.SR.ADP_InvalidArgumentLength">
            <summary>
              Looks up a localized string similar to The length of argument &apos;{0}&apos; exceeds its limit of &apos;{1}&apos;..
            </summary>
        </member>
        <member name="P:System.SR.ADP_InvalidCommandTimeout">
            <summary>
              Looks up a localized string similar to Invalid CommandTimeout value {0}; the value must be &gt;= 0..
            </summary>
        </member>
        <member name="P:System.SR.ADP_InvalidConnectionOptionValue">
            <summary>
              Looks up a localized string similar to Invalid value for key &apos;{0}&apos;..
            </summary>
        </member>
        <member name="P:System.SR.ADP_InvalidConnectionOptionValueLength">
            <summary>
              Looks up a localized string similar to The value&apos;s length for key &apos;{0}&apos; exceeds it&apos;s limit of &apos;{1}&apos;..
            </summary>
        </member>
        <member name="P:System.SR.ADP_InvalidDataLength2">
            <summary>
              Looks up a localized string similar to Specified length &apos;{0}&apos; is out of range..
            </summary>
        </member>
        <member name="P:System.SR.ADP_InvalidDataType">
            <summary>
              Looks up a localized string similar to The parameter data type of {0} is invalid..
            </summary>
        </member>
        <member name="P:System.SR.ADP_InvalidDestinationBufferIndex">
            <summary>
              Looks up a localized string similar to Invalid destination buffer (size of {0}) offset: {1}.
            </summary>
        </member>
        <member name="P:System.SR.ADP_InvalidEnumerationValue">
            <summary>
              Looks up a localized string similar to The {0} enumeration value, {1}, is invalid..
            </summary>
        </member>
        <member name="P:System.SR.ADP_InvalidMetaDataValue">
            <summary>
              Looks up a localized string similar to Invalid value for this metadata..
            </summary>
        </member>
        <member name="P:System.SR.ADP_InvalidMinMaxPoolSizeValues">
            <summary>
              Looks up a localized string similar to Invalid min or max pool size values, min pool size cannot be greater than the max pool size..
            </summary>
        </member>
        <member name="P:System.SR.ADP_InvalidMixedUsageOfAccessTokenAndAuthentication">
            <summary>
              Looks up a localized string similar to Cannot set the AccessToken property if &apos;Authentication&apos; has been specified in the connection string..
            </summary>
        </member>
        <member name="P:System.SR.ADP_InvalidMixedUsageOfAccessTokenAndIntegratedSecurity">
            <summary>
              Looks up a localized string similar to Cannot set the AccessToken property if the &apos;Integrated Security&apos; connection string keyword has been set to &apos;true&apos; or &apos;SSPI&apos;..
            </summary>
        </member>
        <member name="P:System.SR.ADP_InvalidMixedUsageOfAccessTokenAndUserIDPassword">
            <summary>
              Looks up a localized string similar to Cannot set the AccessToken property if &apos;UserID&apos;, &apos;UID&apos;, &apos;Password&apos;, or &apos;PWD&apos; has been specified in connection string..
            </summary>
        </member>
        <member name="P:System.SR.ADP_InvalidMixedUsageOfCredentialAndAccessToken">
            <summary>
              Looks up a localized string similar to Cannot set the Credential property if the AccessToken property is already set..
            </summary>
        </member>
        <member name="P:System.SR.ADP_InvalidMixedUsageOfSecureAndClearCredential">
            <summary>
              Looks up a localized string similar to Cannot use Credential with UserID, UID, Password, or PWD connection string keywords..
            </summary>
        </member>
        <member name="P:System.SR.ADP_InvalidMixedUsageOfSecureCredentialAndIntegratedSecurity">
            <summary>
              Looks up a localized string similar to Cannot use Credential with Integrated Security connection string keyword..
            </summary>
        </member>
        <member name="P:System.SR.ADP_InvalidMultipartName">
            <summary>
              Looks up a localized string similar to {0} &apos;{1}&apos;..
            </summary>
        </member>
        <member name="P:System.SR.ADP_InvalidMultipartNameQuoteUsage">
            <summary>
              Looks up a localized string similar to {0} &apos;{1}&apos;, incorrect usage of quotes..
            </summary>
        </member>
        <member name="P:System.SR.ADP_InvalidMultipartNameToManyParts">
            <summary>
              Looks up a localized string similar to {0} &apos;{1}&apos;, the current limit of &apos;{2}&apos; is insufficient..
            </summary>
        </member>
        <member name="P:System.SR.ADP_InvalidOffsetValue">
            <summary>
              Looks up a localized string similar to Invalid parameter Offset value &apos;{0}&apos;. The value must be greater than or equal to 0..
            </summary>
        </member>
        <member name="P:System.SR.ADP_InvalidPrefixSuffix">
            <summary>
              Looks up a localized string similar to Specified QuotePrefix and QuoteSuffix values do not match..
            </summary>
        </member>
        <member name="P:System.SR.ADP_InvalidSeekOrigin">
            <summary>
              Looks up a localized string similar to Specified SeekOrigin value is invalid..
            </summary>
        </member>
        <member name="P:System.SR.ADP_InvalidSizeValue">
            <summary>
              Looks up a localized string similar to Invalid parameter Size value &apos;{0}&apos;. The value must be greater than or equal to 0..
            </summary>
        </member>
        <member name="P:System.SR.ADP_InvalidSourceBufferIndex">
            <summary>
              Looks up a localized string similar to Invalid source buffer (size of {0}) offset: {1}.
            </summary>
        </member>
        <member name="P:System.SR.ADP_KeywordNotSupported">
            <summary>
              Looks up a localized string similar to Keyword not supported: &apos;{0}&apos;..
            </summary>
        </member>
        <member name="P:System.SR.ADP_LocalTransactionPresent">
            <summary>
              Looks up a localized string similar to Cannot enlist in the transaction because a local transaction is in progress on the connection.  Finish local transaction and retry..
            </summary>
        </member>
        <member name="P:System.SR.ADP_MismatchedAsyncResult">
            <summary>
              Looks up a localized string similar to Mismatched end method call for asyncResult.  Expected call to {0} but {1} was called instead..
            </summary>
        </member>
        <member name="P:System.SR.ADP_MissingConnectionOptionValue">
            <summary>
              Looks up a localized string similar to Use of key &apos;{0}&apos; requires the key &apos;{1}&apos; to be present..
            </summary>
        </member>
        <member name="P:System.SR.ADP_MustBeReadOnly">
            <summary>
              Looks up a localized string similar to {0} must be marked as read only..
            </summary>
        </member>
        <member name="P:System.SR.ADP_NegativeParameter">
            <summary>
              Looks up a localized string similar to Invalid value for argument &apos;{0}&apos;. The value must be greater than or equal to 0..
            </summary>
        </member>
        <member name="P:System.SR.ADP_NoConnectionString">
            <summary>
              Looks up a localized string similar to The ConnectionString property has not been initialized..
            </summary>
        </member>
        <member name="P:System.SR.ADP_NonPooledOpenTimeout">
            <summary>
              Looks up a localized string similar to Timeout attempting to open the connection.  The time period elapsed prior to attempting to open the connection has been exceeded.  This may have occurred because of too many simultaneous non-pooled connection attempts..
            </summary>
        </member>
        <member name="P:System.SR.ADP_NonSeqByteAccess">
            <summary>
              Looks up a localized string similar to Invalid {2} attempt at dataIndex &apos;{0}&apos;.  With CommandBehavior.SequentialAccess, you may only read from dataIndex &apos;{1}&apos; or greater..
            </summary>
        </member>
        <member name="P:System.SR.ADP_NonSequentialColumnAccess">
            <summary>
              Looks up a localized string similar to Invalid attempt to read from column ordinal &apos;{0}&apos;.  With CommandBehavior.SequentialAccess, you may only read from column ordinal &apos;{1}&apos; or greater..
            </summary>
        </member>
        <member name="P:System.SR.ADP_NoStoredProcedureExists">
            <summary>
              Looks up a localized string similar to The stored procedure &apos;{0}&apos; doesn&apos;t exist..
            </summary>
        </member>
        <member name="P:System.SR.ADP_NotSupportedEnumerationValue">
            <summary>
              Looks up a localized string similar to The {0} enumeration value, {1}, is not supported by the {2} method..
            </summary>
        </member>
        <member name="P:System.SR.ADP_OpenConnectionPropertySet">
            <summary>
              Looks up a localized string similar to Not allowed to change the &apos;{0}&apos; property. {1}.
            </summary>
        </member>
        <member name="P:System.SR.ADP_OpenConnectionRequired">
            <summary>
              Looks up a localized string similar to {0} requires an open and available Connection. {1}.
            </summary>
        </member>
        <member name="P:System.SR.ADP_OpenReaderExists">
            <summary>
              Looks up a localized string similar to There is already an open DataReader associated with this Command which must be closed first..
            </summary>
        </member>
        <member name="P:System.SR.ADP_OperationAborted">
            <summary>
              Looks up a localized string similar to Operation aborted..
            </summary>
        </member>
        <member name="P:System.SR.ADP_OperationAbortedExceptionMessage">
            <summary>
              Looks up a localized string similar to Operation aborted due to an exception (see InnerException for details)..
            </summary>
        </member>
        <member name="P:System.SR.ADP_ParallelTransactionsNotSupported">
            <summary>
              Looks up a localized string similar to {0} does not support parallel transactions..
            </summary>
        </member>
        <member name="P:System.SR.ADP_ParameterConversionFailed">
            <summary>
              Looks up a localized string similar to Failed to convert parameter value from a {0} to a {1}..
            </summary>
        </member>
        <member name="P:System.SR.ADP_ParameterValueOutOfRange">
            <summary>
              Looks up a localized string similar to Parameter value &apos;{0}&apos; is out of range..
            </summary>
        </member>
        <member name="P:System.SR.ADP_PendingAsyncOperation">
            <summary>
              Looks up a localized string similar to Can not start another operation while there is an asynchronous operation pending..
            </summary>
        </member>
        <member name="P:System.SR.ADP_PooledOpenTimeout">
            <summary>
              Looks up a localized string similar to Timeout expired.  The timeout period elapsed prior to obtaining a connection from the pool.  This may have occurred because all pooled connections were in use and max pool size was reached..
            </summary>
        </member>
        <member name="P:System.SR.ADP_PrepareParameterScale">
            <summary>
              Looks up a localized string similar to {0}.Prepare method requires parameters of type &apos;{1}&apos; have an explicitly set Precision and Scale..
            </summary>
        </member>
        <member name="P:System.SR.ADP_PrepareParameterSize">
            <summary>
              Looks up a localized string similar to {0}.Prepare method requires all variable length parameters to have an explicitly set non-zero Size..
            </summary>
        </member>
        <member name="P:System.SR.ADP_PrepareParameterType">
            <summary>
              Looks up a localized string similar to {0}.Prepare method requires all parameters to have an explicitly set type..
            </summary>
        </member>
        <member name="P:System.SR.ADP_SingleValuedProperty">
            <summary>
              Looks up a localized string similar to The only acceptable value for the property &apos;{0}&apos; is &apos;{1}&apos;..
            </summary>
        </member>
        <member name="P:System.SR.ADP_StreamClosed">
            <summary>
              Looks up a localized string similar to Invalid attempt to {0} when stream is closed..
            </summary>
        </member>
        <member name="P:System.SR.ADP_TransactionCompletedButNotDisposed">
            <summary>
              Looks up a localized string similar to The transaction associated with the current connection has completed but has not been disposed.  The transaction must be disposed before the connection can be used to execute SQL statements..
            </summary>
        </member>
        <member name="P:System.SR.ADP_TransactionConnectionMismatch">
            <summary>
              Looks up a localized string similar to The transaction is either not associated with the current connection or has been completed..
            </summary>
        </member>
        <member name="P:System.SR.ADP_TransactionPresent">
            <summary>
              Looks up a localized string similar to Connection currently has transaction enlisted.  Finish current transaction and retry..
            </summary>
        </member>
        <member name="P:System.SR.ADP_TransactionRequired">
            <summary>
              Looks up a localized string similar to {0} requires the command to have a transaction when the connection assigned to the command is in a pending local transaction.  The Transaction property of the command has not been initialized..
            </summary>
        </member>
        <member name="P:System.SR.ADP_TransactionZombied">
            <summary>
              Looks up a localized string similar to This {0} has completed; it is no longer usable..
            </summary>
        </member>
        <member name="P:System.SR.ADP_UninitializedParameterSize">
            <summary>
              Looks up a localized string similar to {1}[{0}]: the Size property has an invalid size of 0..
            </summary>
        </member>
        <member name="P:System.SR.ADP_UnknownDataType">
            <summary>
              Looks up a localized string similar to No mapping exists from object type {0} to a known managed provider native type..
            </summary>
        </member>
        <member name="P:System.SR.ADP_UnknownDataTypeCode">
            <summary>
              Looks up a localized string similar to Unable to handle an unknown TypeCode {0} returned by Type {1}..
            </summary>
        </member>
        <member name="P:System.SR.ADP_VersionDoesNotSupportDataType">
            <summary>
              Looks up a localized string similar to The version of SQL Server in use does not support datatype &apos;{0}&apos;..
            </summary>
        </member>
        <member name="P:System.SR.Arg_ArrayPlusOffTooSmall">
            <summary>
              Looks up a localized string similar to Destination array is not long enough to copy all the items in the collection. Check array index and length..
            </summary>
        </member>
        <member name="P:System.SR.Arg_RankMultiDimNotSupported">
            <summary>
              Looks up a localized string similar to Only single dimensional arrays are supported for the requested action..
            </summary>
        </member>
        <member name="P:System.SR.Arg_RemoveArgNotFound">
            <summary>
              Looks up a localized string similar to Cannot remove the specified item because it was not found in the specified Collection..
            </summary>
        </member>
        <member name="P:System.SR.ArgumentOutOfRange_NeedNonNegNum">
            <summary>
              Looks up a localized string similar to Non-negative number required..
            </summary>
        </member>
        <member name="P:System.SR.AZURESQL_ChinaEndpoint">
            <summary>
              Looks up a localized string similar to .database.chinacloudapi.cn.
            </summary>
        </member>
        <member name="P:System.SR.AZURESQL_GenericEndpoint">
            <summary>
              Looks up a localized string similar to .database.windows.net.
            </summary>
        </member>
        <member name="P:System.SR.AZURESQL_GermanEndpoint">
            <summary>
              Looks up a localized string similar to .database.cloudapi.de.
            </summary>
        </member>
        <member name="P:System.SR.AZURESQL_UsGovEndpoint">
            <summary>
              Looks up a localized string similar to .database.usgovcloudapi.net.
            </summary>
        </member>
        <member name="P:System.SR.Data_InvalidOffsetLength">
            <summary>
              Looks up a localized string similar to Offset and length were out of bounds for the array or count is greater than the number of elements from index to the end of the source collection..
            </summary>
        </member>
        <member name="P:System.SR.event_OperationReturnedSomething">
            <summary>
              Looks up a localized string similar to {0} returned {1}..
            </summary>
        </member>
        <member name="P:System.SR.GT_Disabled">
            <summary>
              Looks up a localized string similar to Global Transactions are not enabled for this Azure SQL Database. Please contact Azure SQL Database support for assistance..
            </summary>
        </member>
        <member name="P:System.SR.IEnumerableOfSqlDataRecordHasNoRows">
            <summary>
              Looks up a localized string similar to There are no records in the SqlDataRecord enumeration. To send a table-valued parameter with no rows, use a null reference for the value instead..
            </summary>
        </member>
        <member name="P:System.SR.InvalidSchemaTableOrdinals">
            <summary>
              Looks up a localized string similar to Invalid column ordinals in schema table.  ColumnOrdinals, if present, must not have duplicates or gaps..
            </summary>
        </member>
        <member name="P:System.SR.LocalDB_FailedGetDLLHandle">
            <summary>
              Looks up a localized string similar to Local Database Runtime: Cannot load SQLUserInstance.dll..
            </summary>
        </member>
        <member name="P:System.SR.LocalDB_MethodNotFound">
            <summary>
              Looks up a localized string similar to Invalid SQLUserInstance.dll found at the location specified in the registry. Verify that the Local Database Runtime feature of SQL Server Express is properly installed..
            </summary>
        </member>
        <member name="P:System.SR.LocalDB_UnobtainableMessage">
            <summary>
              Looks up a localized string similar to Cannot obtain Local Database Runtime error message.
            </summary>
        </member>
        <member name="P:System.SR.LocalDBNotSupported">
            <summary>
              Looks up a localized string similar to LocalDB is not supported on this platform..
            </summary>
        </member>
        <member name="P:System.SR.MDF_AmbigousCollectionName">
            <summary>
              Looks up a localized string similar to The collection name &apos;{0}&apos; matches at least two collections with the same name but with different case, but does not match any of them exactly..
            </summary>
        </member>
        <member name="P:System.SR.MDF_CollectionNameISNotUnique">
            <summary>
              Looks up a localized string similar to There are multiple collections named &apos;{0}&apos;..
            </summary>
        </member>
        <member name="P:System.SR.MDF_DataTableDoesNotExist">
            <summary>
              Looks up a localized string similar to The collection &apos;{0}&apos; is missing from the metadata XML..
            </summary>
        </member>
        <member name="P:System.SR.MDF_IncorrectNumberOfDataSourceInformationRows">
            <summary>
              Looks up a localized string similar to The DataSourceInformation table must contain exactly one row..
            </summary>
        </member>
        <member name="P:System.SR.MDF_InvalidXml">
            <summary>
              Looks up a localized string similar to The metadata XML is invalid..
            </summary>
        </member>
        <member name="P:System.SR.MDF_InvalidXmlInvalidValue">
            <summary>
              Looks up a localized string similar to The metadata XML is invalid. The {1} column of the {0} collection must contain a non-empty string..
            </summary>
        </member>
        <member name="P:System.SR.MDF_InvalidXmlMissingColumn">
            <summary>
              Looks up a localized string similar to The metadata XML is invalid. The {0} collection must contain a {1} column and it must be a string column..
            </summary>
        </member>
        <member name="P:System.SR.MDF_MissingDataSourceInformationColumn">
            <summary>
              Looks up a localized string similar to One of the required DataSourceInformation tables columns is missing..
            </summary>
        </member>
        <member name="P:System.SR.MDF_MissingRestrictionColumn">
            <summary>
              Looks up a localized string similar to One or more of the required columns of the restrictions collection is missing..
            </summary>
        </member>
        <member name="P:System.SR.MDF_MissingRestrictionRow">
            <summary>
              Looks up a localized string similar to A restriction exists for which there is no matching row in the restrictions collection..
            </summary>
        </member>
        <member name="P:System.SR.MDF_NoColumns">
            <summary>
              Looks up a localized string similar to The schema table contains no columns..
            </summary>
        </member>
        <member name="P:System.SR.MDF_QueryFailed">
            <summary>
              Looks up a localized string similar to Unable to build the &apos;{0}&apos; collection because execution of the SQL query failed. See the inner exception for details..
            </summary>
        </member>
        <member name="P:System.SR.MDF_TooManyRestrictions">
            <summary>
              Looks up a localized string similar to More restrictions were provided than the requested schema (&apos;{0}&apos;) supports..
            </summary>
        </member>
        <member name="P:System.SR.MDF_UnableToBuildCollection">
            <summary>
              Looks up a localized string similar to Unable to build schema collection &apos;{0}&apos;;.
            </summary>
        </member>
        <member name="P:System.SR.MDF_UndefinedCollection">
            <summary>
              Looks up a localized string similar to The requested collection ({0}) is not defined..
            </summary>
        </member>
        <member name="P:System.SR.MDF_UnsupportedVersion">
            <summary>
              Looks up a localized string similar to The requested collection ({0}) is not supported by this version of the provider..
            </summary>
        </member>
        <member name="P:System.SR.net_auth_message_not_encrypted">
            <summary>
              Looks up a localized string similar to Protocol error: A received message contains a valid signature but it was not encrypted as required by the effective Protection Level..
            </summary>
        </member>
        <member name="P:System.SR.net_context_buffer_too_small">
            <summary>
              Looks up a localized string similar to Insufficient buffer space. Required: {0} Actual: {1}..
            </summary>
        </member>
        <member name="P:System.SR.net_gssapi_operation_failed">
            <summary>
              Looks up a localized string similar to GSSAPI operation failed with status: {0} (Minor status: {1})..
            </summary>
        </member>
        <member name="P:System.SR.net_gssapi_operation_failed_detailed">
            <summary>
              Looks up a localized string similar to GSSAPI operation failed with error - {0} ({1})..
            </summary>
        </member>
        <member name="P:System.SR.net_invalid_enum">
            <summary>
              Looks up a localized string similar to The specified value is not valid in the &apos;{0}&apos; enumeration..
            </summary>
        </member>
        <member name="P:System.SR.net_log_operation_failed_with_error">
            <summary>
              Looks up a localized string similar to {0} failed with error {1}..
            </summary>
        </member>
        <member name="P:System.SR.net_MethodNotImplementedException">
            <summary>
              Looks up a localized string similar to This method is not implemented by this class..
            </summary>
        </member>
        <member name="P:System.SR.net_nego_channel_binding_not_supported">
            <summary>
              Looks up a localized string similar to No support for channel binding on operating systems other than Windows..
            </summary>
        </member>
        <member name="P:System.SR.net_nego_not_supported_empty_target_with_defaultcreds">
            <summary>
              Looks up a localized string similar to Target name should be non empty if default credentials are passed..
            </summary>
        </member>
        <member name="P:System.SR.net_nego_protection_level_not_supported">
            <summary>
              Looks up a localized string similar to Requested protection level is not supported with the GSSAPI implementation currently installed..
            </summary>
        </member>
        <member name="P:System.SR.net_nego_server_not_supported">
            <summary>
              Looks up a localized string similar to Server implementation is not supported.
            </summary>
        </member>
        <member name="P:System.SR.net_ntlm_not_possible_default_cred">
            <summary>
              Looks up a localized string similar to NTLM authentication is not possible with default credentials on this platform..
            </summary>
        </member>
        <member name="P:System.SR.net_securitypackagesupport">
            <summary>
              Looks up a localized string similar to The requested security package is not supported..
            </summary>
        </member>
        <member name="P:System.SR.NullSchemaTableDataTypeNotSupported">
            <summary>
              Looks up a localized string similar to DateType column for field &apos;{0}&apos; in schema table is null.  DataType must be non-null..
            </summary>
        </member>
        <member name="P:System.SR.PlatformNotSupported_DataSqlClient">
            <summary>
              Looks up a localized string similar to Microsoft.Data.SqlClient is not supported on this platform..
            </summary>
        </member>
        <member name="P:System.SR.SNI_ERROR_1">
            <summary>
              Looks up a localized string similar to I/O Error detected in read/write operation.
            </summary>
        </member>
        <member name="P:System.SR.SNI_ERROR_11">
            <summary>
              Looks up a localized string similar to Timeout error.
            </summary>
        </member>
        <member name="P:System.SR.SNI_ERROR_12">
            <summary>
              Looks up a localized string similar to No server name supplied.
            </summary>
        </member>
        <member name="P:System.SR.SNI_ERROR_13">
            <summary>
              Looks up a localized string similar to TerminateListener() has been called.
            </summary>
        </member>
        <member name="P:System.SR.SNI_ERROR_14">
            <summary>
              Looks up a localized string similar to Win9x not supported.
            </summary>
        </member>
        <member name="P:System.SR.SNI_ERROR_15">
            <summary>
              Looks up a localized string similar to Function not supported.
            </summary>
        </member>
        <member name="P:System.SR.SNI_ERROR_16">
            <summary>
              Looks up a localized string similar to Shared-Memory heap error.
            </summary>
        </member>
        <member name="P:System.SR.SNI_ERROR_17">
            <summary>
              Looks up a localized string similar to Cannot find an ip/ipv6 type address to connect.
            </summary>
        </member>
        <member name="P:System.SR.SNI_ERROR_18">
            <summary>
              Looks up a localized string similar to Connection has been closed by peer.
            </summary>
        </member>
        <member name="P:System.SR.SNI_ERROR_19">
            <summary>
              Looks up a localized string similar to Physical connection is not usable.
            </summary>
        </member>
        <member name="P:System.SR.SNI_ERROR_2">
            <summary>
              Looks up a localized string similar to Connection was terminated.
            </summary>
        </member>
        <member name="P:System.SR.SNI_ERROR_20">
            <summary>
              Looks up a localized string similar to Connection has been closed.
            </summary>
        </member>
        <member name="P:System.SR.SNI_ERROR_21">
            <summary>
              Looks up a localized string similar to Encryption is enforced but there is no valid certificate.
            </summary>
        </member>
        <member name="P:System.SR.SNI_ERROR_22">
            <summary>
              Looks up a localized string similar to Couldn&apos;t load library.
            </summary>
        </member>
        <member name="P:System.SR.SNI_ERROR_23">
            <summary>
              Looks up a localized string similar to Cannot open a new thread in server process.
            </summary>
        </member>
        <member name="P:System.SR.SNI_ERROR_24">
            <summary>
              Looks up a localized string similar to Cannot post event to completion port.
            </summary>
        </member>
        <member name="P:System.SR.SNI_ERROR_25">
            <summary>
              Looks up a localized string similar to Connection string is not valid.
            </summary>
        </member>
        <member name="P:System.SR.SNI_ERROR_26">
            <summary>
              Looks up a localized string similar to Error Locating Server/Instance Specified.
            </summary>
        </member>
        <member name="P:System.SR.SNI_ERROR_27">
            <summary>
              Looks up a localized string similar to Error getting enabled protocols list from registry.
            </summary>
        </member>
        <member name="P:System.SR.SNI_ERROR_28">
            <summary>
              Looks up a localized string similar to Server doesn&apos;t support requested protocol.
            </summary>
        </member>
        <member name="P:System.SR.SNI_ERROR_29">
            <summary>
              Looks up a localized string similar to Shared Memory is not supported for clustered server connectivity.
            </summary>
        </member>
        <member name="P:System.SR.SNI_ERROR_3">
            <summary>
              Looks up a localized string similar to Asynchronous operations not supported.
            </summary>
        </member>
        <member name="P:System.SR.SNI_ERROR_30">
            <summary>
              Looks up a localized string similar to Invalid attempt bind to shared memory segment.
            </summary>
        </member>
        <member name="P:System.SR.SNI_ERROR_31">
            <summary>
              Looks up a localized string similar to Encryption(ssl/tls) handshake failed.
            </summary>
        </member>
        <member name="P:System.SR.SNI_ERROR_32">
            <summary>
              Looks up a localized string similar to Packet size too large for SSL Encrypt/Decrypt operations.
            </summary>
        </member>
        <member name="P:System.SR.SNI_ERROR_33">
            <summary>
              Looks up a localized string similar to SSRP error.
            </summary>
        </member>
        <member name="P:System.SR.SNI_ERROR_34">
            <summary>
              Looks up a localized string similar to Could not connect to the Shared Memory pipe.
            </summary>
        </member>
        <member name="P:System.SR.SNI_ERROR_35">
            <summary>
              Looks up a localized string similar to An internal exception was caught.
            </summary>
        </member>
        <member name="P:System.SR.SNI_ERROR_36">
            <summary>
              Looks up a localized string similar to The Shared Memory dll used to connect to SQL Server 2000 was not found.
            </summary>
        </member>
        <member name="P:System.SR.SNI_ERROR_37">
            <summary>
              Looks up a localized string similar to The SQL Server 2000 Shared Memory client dll appears to be invalid/corrupted.
            </summary>
        </member>
        <member name="P:System.SR.SNI_ERROR_38">
            <summary>
              Looks up a localized string similar to Cannot open a Shared Memory connection to SQL Server 2000.
            </summary>
        </member>
        <member name="P:System.SR.SNI_ERROR_39">
            <summary>
              Looks up a localized string similar to Shared memory connectivity to SQL Server 2000 is either disabled or not available on this machine.
            </summary>
        </member>
        <member name="P:System.SR.SNI_ERROR_40">
            <summary>
              Looks up a localized string similar to Could not open a connection to SQL Server.
            </summary>
        </member>
        <member name="P:System.SR.SNI_ERROR_41">
            <summary>
              Looks up a localized string similar to Cannot open a Shared Memory connection to a remote SQL server.
            </summary>
        </member>
        <member name="P:System.SR.SNI_ERROR_42">
            <summary>
              Looks up a localized string similar to Could not establish dedicated administrator connection (DAC) on default port. Make sure that DAC is enabled.
            </summary>
        </member>
        <member name="P:System.SR.SNI_ERROR_43">
            <summary>
              Looks up a localized string similar to An error occurred while obtaining the dedicated administrator connection (DAC) port. Make sure that SQL Browser is running, or check the error log for the port number.
            </summary>
        </member>
        <member name="P:System.SR.SNI_ERROR_44">
            <summary>
              Looks up a localized string similar to Could not compose Service Principal Name (SPN) for Windows Integrated Authentication. Possible causes are server(s) incorrectly specified to connection API calls, Domain Name System (DNS) lookup failure or memory shortage.
            </summary>
        </member>
        <member name="P:System.SR.SNI_ERROR_47">
            <summary>
              Looks up a localized string similar to Connecting with the MultiSubnetFailover connection option to a SQL Server instance configured with more than 64 IP addresses is not supported..
            </summary>
        </member>
        <member name="P:System.SR.SNI_ERROR_48">
            <summary>
              Looks up a localized string similar to Connecting to a named SQL Server instance using the MultiSubnetFailover connection option is not supported..
            </summary>
        </member>
        <member name="P:System.SR.SNI_ERROR_49">
            <summary>
              Looks up a localized string similar to Connecting to a SQL Server instance using the MultiSubnetFailover connection option is only supported when using the TCP protocol..
            </summary>
        </member>
        <member name="P:System.SR.SNI_ERROR_5">
            <summary>
              Looks up a localized string similar to Invalid parameter(s) found.
            </summary>
        </member>
        <member name="P:System.SR.SNI_ERROR_50">
            <summary>
              Looks up a localized string similar to Local Database Runtime error occurred. .
            </summary>
        </member>
        <member name="P:System.SR.SNI_ERROR_51">
            <summary>
              Looks up a localized string similar to An instance name was not specified while connecting to a Local Database Runtime. Specify an instance name in the format (localdb)\instance_name..
            </summary>
        </member>
        <member name="P:System.SR.SNI_ERROR_52">
            <summary>
              Looks up a localized string similar to Unable to locate a Local Database Runtime installation. Verify that SQL Server Express is properly installed and that the Local Database Runtime feature is enabled..
            </summary>
        </member>
        <member name="P:System.SR.SNI_ERROR_53">
            <summary>
              Looks up a localized string similar to Invalid Local Database Runtime registry configuration found. Verify that SQL Server Express is properly installed..
            </summary>
        </member>
        <member name="P:System.SR.SNI_ERROR_54">
            <summary>
              Looks up a localized string similar to Unable to locate the registry entry for SQLUserInstance.dll file path. Verify that the Local Database Runtime feature of SQL Server Express is properly installed..
            </summary>
        </member>
        <member name="P:System.SR.SNI_ERROR_55">
            <summary>
              Looks up a localized string similar to Registry value contains an invalid SQLUserInstance.dll file path. Verify that the Local Database Runtime feature of SQL Server Express is properly installed..
            </summary>
        </member>
        <member name="P:System.SR.SNI_ERROR_56">
            <summary>
              Looks up a localized string similar to Unable to load the SQLUserInstance.dll from the location specified in the registry. Verify that the Local Database Runtime feature of SQL Server Express is properly installed..
            </summary>
        </member>
        <member name="P:System.SR.SNI_ERROR_57">
            <summary>
              Looks up a localized string similar to Invalid SQLUserInstance.dll found at the location specified in the registry. Verify that the Local Database Runtime feature of SQL Server Express is properly installed..
            </summary>
        </member>
        <member name="P:System.SR.SNI_ERROR_6">
            <summary>
              Looks up a localized string similar to Unsupported protocol specified.
            </summary>
        </member>
        <member name="P:System.SR.SNI_ERROR_7">
            <summary>
              Looks up a localized string similar to Invalid connection found when setting up new session protocol.
            </summary>
        </member>
        <member name="P:System.SR.SNI_ERROR_8">
            <summary>
              Looks up a localized string similar to Protocol not supported.
            </summary>
        </member>
        <member name="P:System.SR.SNI_ERROR_9">
            <summary>
              Looks up a localized string similar to Associating port with I/O completion mechanism failed.
            </summary>
        </member>
        <member name="P:System.SR.SNI_PN0">
            <summary>
              Looks up a localized string similar to HTTP Provider.
            </summary>
        </member>
        <member name="P:System.SR.SNI_PN1">
            <summary>
              Looks up a localized string similar to Named Pipes Provider.
            </summary>
        </member>
        <member name="P:System.SR.SNI_PN2">
            <summary>
              Looks up a localized string similar to Session Provider.
            </summary>
        </member>
        <member name="P:System.SR.SNI_PN3">
            <summary>
              Looks up a localized string similar to Sign Provider.
            </summary>
        </member>
        <member name="P:System.SR.SNI_PN4">
            <summary>
              Looks up a localized string similar to Shared Memory Provider.
            </summary>
        </member>
        <member name="P:System.SR.SNI_PN5">
            <summary>
              Looks up a localized string similar to SMux Provider.
            </summary>
        </member>
        <member name="P:System.SR.SNI_PN6">
            <summary>
              Looks up a localized string similar to SSL Provider.
            </summary>
        </member>
        <member name="P:System.SR.SNI_PN7">
            <summary>
              Looks up a localized string similar to TCP Provider.
            </summary>
        </member>
        <member name="P:System.SR.SNI_PN8">
            <summary>
              Looks up a localized string similar to .
            </summary>
        </member>
        <member name="P:System.SR.SNI_PN9">
            <summary>
              Looks up a localized string similar to SQL Network Interfaces.
            </summary>
        </member>
        <member name="P:System.SR.Snix_AutoEnlist">
            <summary>
              Looks up a localized string similar to Connection open and login was successful, but then an error occurred while enlisting the connection into the current distributed transaction..
            </summary>
        </member>
        <member name="P:System.SR.Snix_Close">
            <summary>
              Looks up a localized string similar to A transport-level error has occurred during connection clean-up..
            </summary>
        </member>
        <member name="P:System.SR.Snix_Connect">
            <summary>
              Looks up a localized string similar to A network-related or instance-specific error occurred while establishing a connection to SQL Server. The server was not found or was not accessible. Verify that the instance name is correct and that SQL Server is configured to allow remote connections..
            </summary>
        </member>
        <member name="P:System.SR.Snix_EnableMars">
            <summary>
              Looks up a localized string similar to Connection open and login was successful, but then an error occurred while enabling MARS for this connection..
            </summary>
        </member>
        <member name="P:System.SR.Snix_Execute">
            <summary>
              Looks up a localized string similar to A transport-level error has occurred when sending the request to the server..
            </summary>
        </member>
        <member name="P:System.SR.Snix_GetMarsSession">
            <summary>
              Looks up a localized string similar to Failed to establish a MARS session in preparation to send the request to the server..
            </summary>
        </member>
        <member name="P:System.SR.Snix_Login">
            <summary>
              Looks up a localized string similar to A connection was successfully established with the server, but then an error occurred during the login process..
            </summary>
        </member>
        <member name="P:System.SR.Snix_LoginSspi">
            <summary>
              Looks up a localized string similar to A connection was successfully established with the server, but then an error occurred when obtaining the security/SSPI context information for integrated security login..
            </summary>
        </member>
        <member name="P:System.SR.Snix_PreLogin">
            <summary>
              Looks up a localized string similar to A connection was successfully established with the server, but then an error occurred during the pre-login handshake..
            </summary>
        </member>
        <member name="P:System.SR.Snix_PreLoginBeforeSuccessfulWrite">
            <summary>
              Looks up a localized string similar to The client was unable to establish a connection because of an error during connection initialization process before login. Possible causes include the following:  the client tried to connect to an unsupported version of SQL Server; the server was too busy to accept new connections; or there was a resource limitation (insufficient memory or maximum allowed connections) on the server..
            </summary>
        </member>
        <member name="P:System.SR.Snix_ProcessSspi">
            <summary>
              Looks up a localized string similar to A transport-level error has occurred during SSPI handshake..
            </summary>
        </member>
        <member name="P:System.SR.Snix_Read">
            <summary>
              Looks up a localized string similar to A transport-level error has occurred when receiving results from the server..
            </summary>
        </member>
        <member name="P:System.SR.Snix_SendRows">
            <summary>
              Looks up a localized string similar to A transport-level error has occurred while sending information to the server..
            </summary>
        </member>
        <member name="P:System.SR.SQL_AuthenticationAndIntegratedSecurity">
            <summary>
              Looks up a localized string similar to Cannot use &apos;Authentication&apos; with &apos;Integrated Security&apos;..
            </summary>
        </member>
        <member name="P:System.SR.SQL_BatchedUpdatesNotAvailableOnContextConnection">
            <summary>
              Looks up a localized string similar to Batching updates is not supported on the context connection..
            </summary>
        </member>
        <member name="P:System.SR.SQL_BulkCopyDestinationTableName">
            <summary>
              Looks up a localized string similar to SqlBulkCopy.WriteToServer failed because the SqlBulkCopy.DestinationTableName is an invalid multipart name.
            </summary>
        </member>
        <member name="P:System.SR.SQL_BulkLoadCannotConvertValue">
            <summary>
              Looks up a localized string similar to The given value of type {0} from the data source cannot be converted to type {1} of the specified target column..
            </summary>
        </member>
        <member name="P:System.SR.SQL_BulkLoadConflictingTransactionOption">
            <summary>
              Looks up a localized string similar to Must not specify SqlBulkCopyOption.UseInternalTransaction and pass an external Transaction at the same time..
            </summary>
        </member>
        <member name="P:System.SR.SQL_BulkLoadExistingTransaction">
            <summary>
              Looks up a localized string similar to Unexpected existing transaction..
            </summary>
        </member>
        <member name="P:System.SR.SQL_BulkLoadInvalidDestinationTable">
            <summary>
              Looks up a localized string similar to Cannot access destination table &apos;{0}&apos;..
            </summary>
        </member>
        <member name="P:System.SR.SQL_BulkLoadInvalidOperationInsideEvent">
            <summary>
              Looks up a localized string similar to Function must not be called during event..
            </summary>
        </member>
        <member name="P:System.SR.SQL_BulkLoadInvalidTimeout">
            <summary>
              Looks up a localized string similar to Timeout Value &apos;{0}&apos; is less than 0..
            </summary>
        </member>
        <member name="P:System.SR.SQL_BulkLoadInvalidVariantValue">
            <summary>
              Looks up a localized string similar to Value cannot be converted to SqlVariant..
            </summary>
        </member>
        <member name="P:System.SR.Sql_BulkLoadLcidMismatch">
            <summary>
              Looks up a localized string similar to The locale id &apos;{0}&apos; of the source column &apos;{1}&apos; and the locale id &apos;{2}&apos; of the destination column &apos;{3}&apos; do not match..
            </summary>
        </member>
        <member name="P:System.SR.SQL_BulkLoadMappingInaccessible">
            <summary>
              Looks up a localized string similar to The mapped collection is in use and cannot be accessed at this time;.
            </summary>
        </member>
        <member name="P:System.SR.SQL_BulkLoadMappingsNamesOrOrdinalsOnly">
            <summary>
              Looks up a localized string similar to Mappings must be either all name or all ordinal based..
            </summary>
        </member>
        <member name="P:System.SR.SQL_BulkLoadMissingDestinationTable">
            <summary>
              Looks up a localized string similar to The DestinationTableName property must be set before calling this method..
            </summary>
        </member>
        <member name="P:System.SR.SQL_BulkLoadNoCollation">
            <summary>
              Looks up a localized string similar to Failed to obtain column collation information for the destination table. If the table is not in the current database the name must be qualified using the database name (e.g. [mydb]..[mytable](e.g. [mydb]..[mytable]); this also applies to temporary-tables (e.g. #mytable would be specified as tempdb..#mytable)..
            </summary>
        </member>
        <member name="P:System.SR.SQL_BulkLoadNonMatchingColumnMapping">
            <summary>
              Looks up a localized string similar to The given ColumnMapping does not match up with any column in the source or destination..
            </summary>
        </member>
        <member name="P:System.SR.SQL_BulkLoadNonMatchingColumnName">
            <summary>
              Looks up a localized string similar to The given ColumnName &apos;{0}&apos; does not match up with any column in data source..
            </summary>
        </member>
        <member name="P:System.SR.SQL_BulkLoadNotAllowDBNull">
            <summary>
              Looks up a localized string similar to Column &apos;{0}&apos; does not allow DBNull.Value..
            </summary>
        </member>
        <member name="P:System.SR.SQL_BulkLoadPendingOperation">
            <summary>
              Looks up a localized string similar to Attempt to invoke bulk copy on an object that has a pending operation..
            </summary>
        </member>
        <member name="P:System.SR.SQL_BulkLoadStringTooLong">
            <summary>
              Looks up a localized string similar to String or binary data would be truncated..
            </summary>
        </member>
        <member name="P:System.SR.SQL_CannotCreateAuthInitializer">
            <summary>
              Looks up a localized string similar to Failed to instantiate a SqlAuthenticationInitializer with type &apos;{0}&apos;..
            </summary>
        </member>
        <member name="P:System.SR.SQL_CannotCreateAuthProvider">
            <summary>
              Looks up a localized string similar to Failed to instantiate an authentication provider with type &apos;{1}&apos; for &apos;{0}&apos;..
            </summary>
        </member>
        <member name="P:System.SR.SQL_CannotCreateNormalizer">
            <summary>
              Looks up a localized string similar to Cannot create normalizer for &apos;{0}&apos;..
            </summary>
        </member>
        <member name="P:System.SR.SQL_CannotFindAuthProvider">
            <summary>
              Looks up a localized string similar to Cannot find an authentication provider for &apos;{0}&apos;..
            </summary>
        </member>
        <member name="P:System.SR.SQL_CannotGetAuthProviderConfig">
            <summary>
              Looks up a localized string similar to Failed to read the config section for authentication providers..
            </summary>
        </member>
        <member name="P:System.SR.SQL_CannotGetDTCAddress">
            <summary>
              Looks up a localized string similar to Unable to get the address of the distributed transaction coordinator for the server, from the server.  Is DTC enabled on the server?.
            </summary>
        </member>
        <member name="P:System.SR.SQL_CannotInitializeAuthProvider">
            <summary>
              Looks up a localized string similar to The provider &apos;{0}&apos; threw an exception while initializing..
            </summary>
        </member>
        <member name="P:System.SR.SQL_CannotModifyPropertyAsyncOperationInProgress">
            <summary>
              Looks up a localized string similar to {0} cannot be changed while async operation is in progress..
            </summary>
        </member>
        <member name="P:System.SR.SQL_ChangePasswordArgumentMissing">
            <summary>
              Looks up a localized string similar to The &apos;{0}&apos; argument must not be null or empty..
            </summary>
        </member>
        <member name="P:System.SR.SQL_ChangePasswordConflictsWithSSPI">
            <summary>
              Looks up a localized string similar to ChangePassword can only be used with SQL authentication, not with integrated security..
            </summary>
        </member>
        <member name="P:System.SR.SQL_ChangePasswordRequiresYukon">
            <summary>
              Looks up a localized string similar to ChangePassword requires SQL Server 9.0 or later..
            </summary>
        </member>
        <member name="P:System.SR.SQL_ChangePasswordUseOfUnallowedKey">
            <summary>
              Looks up a localized string similar to The keyword &apos;{0}&apos; must not be specified in the connectionString argument to ChangePassword..
            </summary>
        </member>
        <member name="P:System.SR.SQL_ConnectionDoomed">
            <summary>
              Looks up a localized string similar to The requested operation cannot be completed because the connection has been broken..
            </summary>
        </member>
        <member name="P:System.SR.SQL_ConnectionLockedForBcpEvent">
            <summary>
              Looks up a localized string similar to The connection cannot be used because there is an ongoing operation that must be finished..
            </summary>
        </member>
        <member name="P:System.SR.SQL_CredentialsNotProvided">
            <summary>
              Looks up a localized string similar to Either Credential or both &apos;User ID&apos; and &apos;Password&apos; (or &apos;UID&apos; and &apos;PWD&apos;) connection string keywords must be specified, if &apos;Authentication={0}&apos;..
            </summary>
        </member>
        <member name="P:System.SR.SQL_CultureIdError">
            <summary>
              Looks up a localized string similar to The Collation specified by SQL Server is not supported..
            </summary>
        </member>
        <member name="P:System.SR.SQL_DbTypeNotSupportedOnThisPlatform">
            <summary>
              Looks up a localized string similar to Type {0} is not supported on this platform..
            </summary>
        </member>
        <member name="P:System.SR.SQL_Duration_Login_Begin">
            <summary>
              Looks up a localized string similar to The duration spent while attempting to connect to this server was - [Pre-Login] initialization={0}; handshake={1}; [Login] initialization={2}; .
            </summary>
        </member>
        <member name="P:System.SR.SQL_Duration_Login_ProcessConnectionAuth">
            <summary>
              Looks up a localized string similar to The duration spent while attempting to connect to this server was - [Pre-Login] initialization={0}; handshake={1}; [Login] initialization={2}; authentication={3}; .
            </summary>
        </member>
        <member name="P:System.SR.SQL_Duration_PostLogin">
            <summary>
              Looks up a localized string similar to The duration spent while attempting to connect to this server was - [Pre-Login] initialization={0}; handshake={1}; [Login] initialization={2}; authentication={3}; [Post-Login] complete={4}; .
            </summary>
        </member>
        <member name="P:System.SR.SQL_Duration_PreLogin_Begin">
            <summary>
              Looks up a localized string similar to The duration spent while attempting to connect to this server was - [Pre-Login] initialization={0};.
            </summary>
        </member>
        <member name="P:System.SR.SQL_Duration_PreLoginHandshake">
            <summary>
              Looks up a localized string similar to The duration spent while attempting to connect to this server was - [Pre-Login] initialization={0}; handshake={1}; .
            </summary>
        </member>
        <member name="P:System.SR.SQL_EncryptionNotSupportedByClient">
            <summary>
              Looks up a localized string similar to The instance of SQL Server you attempted to connect to requires encryption but this machine does not support it..
            </summary>
        </member>
        <member name="P:System.SR.SQL_EncryptionNotSupportedByServer">
            <summary>
              Looks up a localized string similar to The instance of SQL Server you attempted to connect to does not support encryption..
            </summary>
        </member>
        <member name="P:System.SR.SQL_EnumeratedRecordFieldCountChanged">
            <summary>
              Looks up a localized string similar to Number of fields in record &apos;{0}&apos; does not match the number in the original record..
            </summary>
        </member>
        <member name="P:System.SR.SQL_EnumeratedRecordMetaDataChanged">
            <summary>
              Looks up a localized string similar to Metadata for field &apos;{0}&apos; of record &apos;{1}&apos; did not match the original record&apos;s metadata..
            </summary>
        </member>
        <member name="P:System.SR.SQL_ExClientConnectionId">
            <summary>
              Looks up a localized string similar to ClientConnectionId:{0}.
            </summary>
        </member>
        <member name="P:System.SR.SQL_ExErrorNumberStateClass">
            <summary>
              Looks up a localized string similar to Error Number:{0},State:{1},Class:{2}.
            </summary>
        </member>
        <member name="P:System.SR.SQL_ExOriginalClientConnectionId">
            <summary>
              Looks up a localized string similar to ClientConnectionId before routing:{0}.
            </summary>
        </member>
        <member name="P:System.SR.SQL_ExRoutingDestination">
            <summary>
              Looks up a localized string similar to Routing Destination:{0}.
            </summary>
        </member>
        <member name="P:System.SR.SQL_GlobalizationInvariantModeNotSupported">
            <summary>
              Looks up a localized string similar to Globalization Invariant Mode is not supported..
            </summary>
        </member>
        <member name="P:System.SR.SQL_InstanceFailure">
            <summary>
              Looks up a localized string similar to Instance failure..
            </summary>
        </member>
        <member name="P:System.SR.SQL_IntegratedWithUserIDAndPassword">
            <summary>
              Looks up a localized string similar to Cannot use &apos;Authentication=Active Directory Integrated&apos; with &apos;User ID&apos;, &apos;UID&apos;, &apos;Password&apos; or &apos;PWD&apos; connection string keywords..
            </summary>
        </member>
        <member name="P:System.SR.SQL_InteractiveWithoutUserID">
            <summary>
              Looks up a localized string similar to Cannot use &apos;Authentication=Active Directory Interactive&apos; without &apos;User ID&apos; or &apos;UID&apos; connection string keywords..
            </summary>
        </member>
        <member name="P:System.SR.SQL_InteractiveWithPassword">
            <summary>
              Looks up a localized string similar to Cannot use &apos;Authentication=Active Directory Interactive&apos; with &apos;PWD&apos; connection string keywords..
            </summary>
        </member>
        <member name="P:System.SR.Sql_InternalError">
            <summary>
              Looks up a localized string similar to Internal Error.
            </summary>
        </member>
        <member name="P:System.SR.SQL_InvalidBufferSizeOrIndex">
            <summary>
              Looks up a localized string similar to Buffer offset &apos;{1}&apos; plus the bytes available &apos;{0}&apos; is greater than the length of the passed in buffer..
            </summary>
        </member>
        <member name="P:System.SR.SQL_InvalidDataLength">
            <summary>
              Looks up a localized string similar to Data length &apos;{0}&apos; is less than 0..
            </summary>
        </member>
        <member name="P:System.SR.SQL_InvalidInternalPacketSize">
            <summary>
              Looks up a localized string similar to Invalid internal packet size:.
            </summary>
        </member>
        <member name="P:System.SR.SQL_InvalidPacketSizeValue">
            <summary>
              Looks up a localized string similar to Invalid &apos;Packet Size&apos;.  The value must be an integer &gt;= 512 and &lt;= 32768..
            </summary>
        </member>
        <member name="P:System.SR.SQL_InvalidParameterNameLength">
            <summary>
              Looks up a localized string similar to The length of the parameter &apos;{0}&apos; exceeds the limit of 128 characters..
            </summary>
        </member>
        <member name="P:System.SR.SQL_InvalidParameterTypeNameFormat">
            <summary>
              Looks up a localized string similar to Invalid 3 part name format for TypeName..
            </summary>
        </member>
        <member name="P:System.SR.SQL_InvalidPartnerConfiguration">
            <summary>
              Looks up a localized string similar to Server {0}, database {1} is not configured for database mirroring..
            </summary>
        </member>
        <member name="P:System.SR.SQL_InvalidRead">
            <summary>
              Looks up a localized string similar to Invalid attempt to read when no data is present..
            </summary>
        </member>
        <member name="P:System.SR.SQL_InvalidSQLServerVersionUnknown">
            <summary>
              Looks up a localized string similar to Unsupported SQL Server version.  The .NET Framework SqlClient Data Provider can only be used with SQL Server versions 7.0 and later..
            </summary>
        </member>
        <member name="P:System.SR.SQL_InvalidSSPIPacketSize">
            <summary>
              Looks up a localized string similar to Invalid SSPI packet size..
            </summary>
        </member>
        <member name="P:System.SR.SQL_InvalidTDSPacketSize">
            <summary>
              Looks up a localized string similar to Invalid Packet Size..
            </summary>
        </member>
        <member name="P:System.SR.SQL_InvalidTDSVersion">
            <summary>
              Looks up a localized string similar to The SQL Server instance returned an invalid or unsupported protocol version during login negotiation..
            </summary>
        </member>
        <member name="P:System.SR.SQL_InvalidUdt3PartNameFormat">
            <summary>
              Looks up a localized string similar to Invalid 3 part name format for UdtTypeName..
            </summary>
        </member>
        <member name="P:System.SR.SQL_KerberosTicketMissingError">
            <summary>
              Looks up a localized string similar to Cannot authenticate using Kerberos. Ensure Kerberos has been initialized on the client with &apos;kinit&apos; and a Service Principal Name has been registered for the SQL Server to allow Kerberos authentication..
            </summary>
        </member>
        <member name="P:System.SR.SQL_MarsUnsupportedOnConnection">
            <summary>
              Looks up a localized string similar to The connection does not support MultipleActiveResultSets..
            </summary>
        </member>
        <member name="P:System.SR.SQL_MoneyOverflow">
            <summary>
              Looks up a localized string similar to SqlDbType.SmallMoney overflow.  Value &apos;{0}&apos; is out of range.  Must be between -214,748.3648 and 214,748.3647..
            </summary>
        </member>
        <member name="P:System.SR.SQL_MSALFailure">
            <summary>
              Looks up a localized string similar to Failed to authenticate the user {0} in Active Directory (Authentication={1})..
            </summary>
        </member>
        <member name="P:System.SR.SQL_MSALInnerException">
            <summary>
              Looks up a localized string similar to Error code 0x{0}; state {1}.
            </summary>
        </member>
        <member name="P:System.SR.SQL_NetworkLibraryNotSupported">
            <summary>
              Looks up a localized string similar to The keyword &apos;Network Library&apos; is not supported on this platform, prefix the &apos;Data Source&apos; with the protocol desired instead (&apos;tcp:&apos; for a TCP connection, or &apos;np:&apos; for a Named Pipe connection)..
            </summary>
        </member>
        <member name="P:System.SR.SQL_NonBlobColumn">
            <summary>
              Looks up a localized string similar to Invalid attempt to GetBytes on column &apos;{0}&apos;.  The GetBytes function can only be used on columns of type Text, NText, or Image..
            </summary>
        </member>
        <member name="P:System.SR.SQL_NonCharColumn">
            <summary>
              Looks up a localized string similar to Invalid attempt to GetChars on column &apos;{0}&apos;.  The GetChars function can only be used on columns of type Text, NText, Xml, VarChar or NVarChar..
            </summary>
        </member>
        <member name="P:System.SR.SQL_NonLocalSSEInstance">
            <summary>
              Looks up a localized string similar to SSE Instance re-direction is not supported for non-local user instances..
            </summary>
        </member>
        <member name="P:System.SR.SQL_NonXmlResult">
            <summary>
              Looks up a localized string similar to Invalid command sent to ExecuteXmlReader.  The command must return an Xml result..
            </summary>
        </member>
        <member name="P:System.SR.SQL_NotSupportedEnumerationValue">
            <summary>
              Looks up a localized string similar to The {0} enumeration value, {1}, is not supported by the .NET Framework SqlClient Data Provider..
            </summary>
        </member>
        <member name="P:System.SR.SQL_NullEmptyTransactionName">
            <summary>
              Looks up a localized string similar to Invalid transaction or invalid name for a point at which to save within the transaction..
            </summary>
        </member>
        <member name="P:System.SR.SQL_OpenResultCountExceeded">
            <summary>
              Looks up a localized string similar to Open result count exceeded..
            </summary>
        </member>
        <member name="P:System.SR.SQL_OperationCancelled">
            <summary>
              Looks up a localized string similar to Operation cancelled by user..
            </summary>
        </member>
        <member name="P:System.SR.SQL_ParameterCannotBeEmpty">
            <summary>
              Looks up a localized string similar to Parameter &apos;{0}&apos; cannot be null or empty..
            </summary>
        </member>
        <member name="P:System.SR.SQL_ParameterInvalidVariant">
            <summary>
              Looks up a localized string similar to Parameter &apos;{0}&apos; exceeds the size limit for the sql_variant datatype..
            </summary>
        </member>
        <member name="P:System.SR.SQL_ParameterTypeNameRequired">
            <summary>
              Looks up a localized string similar to The {0} type parameter &apos;{1}&apos; must have a valid type name..
            </summary>
        </member>
        <member name="P:System.SR.SQL_ParsingError">
            <summary>
              Looks up a localized string similar to Internal connection fatal error..
            </summary>
        </member>
        <member name="P:System.SR.SQL_ParsingErrorAuthLibraryType">
            <summary>
              Looks up a localized string similar to Internal connection fatal error. Error state: {0}, Authentication Library Type: {1}..
            </summary>
        </member>
        <member name="P:System.SR.SQL_ParsingErrorFeatureId">
            <summary>
              Looks up a localized string similar to Internal connection fatal error. Error state: {0}, Feature Id: {1}..
            </summary>
        </member>
        <member name="P:System.SR.SQL_ParsingErrorLength">
            <summary>
              Looks up a localized string similar to Internal connection fatal error. Error state: {0}, Length: {1}.
            </summary>
        </member>
        <member name="P:System.SR.SQL_ParsingErrorOffset">
            <summary>
              Looks up a localized string similar to Internal connection fatal error. Error state: {0}, Offset: {1}.
            </summary>
        </member>
        <member name="P:System.SR.SQL_ParsingErrorStatus">
            <summary>
              Looks up a localized string similar to Internal connection fatal error. Error state: {0}, Status: {1}.
            </summary>
        </member>
        <member name="P:System.SR.SQL_ParsingErrorToken">
            <summary>
              Looks up a localized string similar to Internal connection fatal error. Error state: {0}, Token : {1}.
            </summary>
        </member>
        <member name="P:System.SR.SQL_ParsingErrorValue">
            <summary>
              Looks up a localized string similar to Internal connection fatal error. Error state: {0}, Value: {1}..
            </summary>
        </member>
        <member name="P:System.SR.SQL_ParsingErrorWithState">
            <summary>
              Looks up a localized string similar to Internal connection fatal error. Error state: {0}..
            </summary>
        </member>
        <member name="P:System.SR.SQL_PendingBeginXXXExists">
            <summary>
              Looks up a localized string similar to The command execution cannot proceed due to a pending asynchronous operation already in progress..
            </summary>
        </member>
        <member name="P:System.SR.SQL_PrecisionValueOutOfRange">
            <summary>
              Looks up a localized string similar to Precision value &apos;{0}&apos; is either less than 0 or greater than the maximum allowed precision of 38..
            </summary>
        </member>
        <member name="P:System.SR.SQL_ScaleValueOutOfRange">
            <summary>
              Looks up a localized string similar to Scale value &apos;{0}&apos; is either less than 0 or greater than the maximum allowed scale of 38..
            </summary>
        </member>
        <member name="P:System.SR.SQL_SevereError">
            <summary>
              Looks up a localized string similar to A severe error occurred on the current command.  The results, if any, should be discarded..
            </summary>
        </member>
        <member name="P:System.SR.SQL_SmallDateTimeOverflow">
            <summary>
              Looks up a localized string similar to SqlDbType.SmallDateTime overflow.  Value &apos;{0}&apos; is out of range.  Must be between 1/1/1900 12:00:00 AM and 6/6/2079 11:59:59 PM..
            </summary>
        </member>
        <member name="P:System.SR.SQL_SNIPacketAllocationFailure">
            <summary>
              Looks up a localized string similar to Memory allocation for internal connection failed..
            </summary>
        </member>
        <member name="P:System.SR.SQL_SqlCommandCommandText">
            <summary>
              Looks up a localized string similar to SqlCommand.DeriveParameters failed because the SqlCommand.CommandText property value is an invalid multipart name.
            </summary>
        </member>
        <member name="P:System.SR.SQL_SqlServerBrowserNotAccessible">
            <summary>
              Looks up a localized string similar to Cannot connect to SQL Server Browser. Ensure SQL Server Browser has been started..
            </summary>
        </member>
        <member name="P:System.SR.SQL_SSPIGenerateError">
            <summary>
              Looks up a localized string similar to Failed to generate SSPI context..
            </summary>
        </member>
        <member name="P:System.SR.SQL_SSPIInitializeError">
            <summary>
              Looks up a localized string similar to Cannot initialize SSPI package..
            </summary>
        </member>
        <member name="P:System.SR.SQL_StreamNotSupportOnColumnType">
            <summary>
              Looks up a localized string similar to Invalid attempt to GetStream on column &apos;{0}&apos;. The GetStream function can only be used on columns of type Binary, Image, Udt or VarBinary..
            </summary>
        </member>
        <member name="P:System.SR.SQL_StreamReadNotSupported">
            <summary>
              Looks up a localized string similar to The Stream does not support reading..
            </summary>
        </member>
        <member name="P:System.SR.SQL_StreamSeekNotSupported">
            <summary>
              Looks up a localized string similar to The Stream does not support seeking..
            </summary>
        </member>
        <member name="P:System.SR.SQL_StreamWriteNotSupported">
            <summary>
              Looks up a localized string similar to The Stream does not support writing..
            </summary>
        </member>
        <member name="P:System.SR.SQL_TDSParserTableName">
            <summary>
              Looks up a localized string similar to Processing of results from SQL Server failed because of an invalid multipart name.
            </summary>
        </member>
        <member name="P:System.SR.SQL_TextReaderNotSupportOnColumnType">
            <summary>
              Looks up a localized string similar to Invalid attempt to GetTextReader on column &apos;{0}&apos;. The GetTextReader function can only be used on columns of type Char, NChar, NText, NVarChar, Text or VarChar..
            </summary>
        </member>
        <member name="P:System.SR.SQL_Timeout">
            <summary>
              Looks up a localized string similar to Timeout expired.  The timeout period elapsed prior to completion of the operation or the server is not responding..
            </summary>
        </member>
        <member name="P:System.SR.SQL_Timeout_Execution">
            <summary>
              Looks up a localized string similar to Execution Timeout Expired.  The timeout period elapsed prior to completion of the operation or the server is not responding..
            </summary>
        </member>
        <member name="P:System.SR.SQL_Timeout_FailoverInfo">
            <summary>
              Looks up a localized string similar to This failure occurred while attempting to connect to the {0} server..
            </summary>
        </member>
        <member name="P:System.SR.SQL_Timeout_Login_Begin">
            <summary>
              Looks up a localized string similar to Connection Timeout Expired.  The timeout period elapsed at the start of the login phase.  This could be because of insufficient time provided for connection timeout..
            </summary>
        </member>
        <member name="P:System.SR.SQL_Timeout_Login_ProcessConnectionAuth">
            <summary>
              Looks up a localized string similar to Connection Timeout Expired.  The timeout period elapsed while attempting to authenticate the login.  This could be because the server failed to authenticate the user or the server was unable to respond back in time..
            </summary>
        </member>
        <member name="P:System.SR.SQL_Timeout_PostLogin">
            <summary>
              Looks up a localized string similar to Connection Timeout Expired.  The timeout period elapsed during the post-login phase.  The connection could have timed out while waiting for server to complete the login process and respond; Or it could have timed out while attempting to create multiple active connections..
            </summary>
        </member>
        <member name="P:System.SR.SQL_Timeout_PreLogin_Begin">
            <summary>
              Looks up a localized string similar to Connection Timeout Expired.  The timeout period elapsed at the start of the pre-login phase.  This could be because of insufficient time provided for connection timeout..
            </summary>
        </member>
        <member name="P:System.SR.SQL_Timeout_PreLogin_ConsumeHandshake">
            <summary>
              Looks up a localized string similar to Connection Timeout Expired.  The timeout period elapsed while attempting to consume the pre-login handshake acknowledgement.  This could be because the pre-login handshake failed or the server was unable to respond back in time..
            </summary>
        </member>
        <member name="P:System.SR.SQL_Timeout_PreLogin_InitializeConnection">
            <summary>
              Looks up a localized string similar to Connection Timeout Expired.  The timeout period elapsed while attempting to create and initialize a socket to the server.  This could be either because the server was unreachable or unable to respond back in time..
            </summary>
        </member>
        <member name="P:System.SR.SQL_Timeout_PreLogin_SendHandshake">
            <summary>
              Looks up a localized string similar to Connection Timeout Expired.  The timeout period elapsed while making a pre-login handshake request.  This could be because the server was unable to respond back in time..
            </summary>
        </member>
        <member name="P:System.SR.SQL_Timeout_RoutingDestinationInfo">
            <summary>
              Looks up a localized string similar to This failure occurred while attempting to connect to the routing destination. The duration spent while attempting to connect to the original server was - [Pre-Login] initialization={0}; handshake={1}; [Login] initialization={2}; authentication={3}; [Post-Login] complete={4};  .
            </summary>
        </member>
        <member name="P:System.SR.SQL_TimeOverflow">
            <summary>
              Looks up a localized string similar to SqlDbType.Time overflow.  Value &apos;{0}&apos; is out of range.  Must be between 00:00:00.0000000 and 23:59:59.9999999..
            </summary>
        </member>
        <member name="P:System.SR.SQL_TimeScaleValueOutOfRange">
            <summary>
              Looks up a localized string similar to Scale value &apos;{0}&apos; is either less than 0 or greater than the maximum allowed scale of 7..
            </summary>
        </member>
        <member name="P:System.SR.SQL_TypeName">
            <summary>
              Looks up a localized string similar to SqlParameter.TypeName is an invalid multipart name.
            </summary>
        </member>
        <member name="P:System.SR.SQL_UDTTypeName">
            <summary>
              Looks up a localized string similar to SqlParameter.UdtTypeName is an invalid multipart name.
            </summary>
        </member>
        <member name="P:System.SR.SQL_UnknownSysTxIsolationLevel">
            <summary>
              Looks up a localized string similar to Unrecognized System.Transactions.IsolationLevel enumeration value: {0}..
            </summary>
        </member>
        <member name="P:System.SR.SQL_UnsupportedAuthentication">
            <summary>
              Looks up a localized string similar to The authentication &apos;{0}&apos; is not supported..
            </summary>
        </member>
        <member name="P:System.SR.SQL_UnsupportedAuthenticationByProvider">
            <summary>
              Looks up a localized string similar to The provider &apos;{0}&apos; does not support authentication &apos;{1}&apos;..
            </summary>
        </member>
        <member name="P:System.SR.SQL_UnsupportedFeature">
            <summary>
              Looks up a localized string similar to The server is attempting to use a feature that is not supported on this platform..
            </summary>
        </member>
        <member name="P:System.SR.SQL_UnsupportedKeyword">
            <summary>
              Looks up a localized string similar to The keyword &apos;{0}&apos; is not supported on this platform..
            </summary>
        </member>
        <member name="P:System.SR.SQL_UnsupportedSqlAuthenticationMethod">
            <summary>
              Looks up a localized string similar to SQL authentication method &apos;{0}&apos; is not supported..
            </summary>
        </member>
        <member name="P:System.SR.SQL_UnsupportedSysTxVersion">
            <summary>
              Looks up a localized string similar to The currently loaded System.Transactions.dll does not support Global Transactions..
            </summary>
        </member>
        <member name="P:System.SR.SQL_UnsupportedToken">
            <summary>
              Looks up a localized string similar to Received an unsupported token &apos;{0}&apos; while reading data from the server..
            </summary>
        </member>
        <member name="P:System.SR.SQL_UserInstanceFailoverNotCompatible">
            <summary>
              Looks up a localized string similar to User Instance and Failover are not compatible options.  Please choose only one of the two in the connection string..
            </summary>
        </member>
        <member name="P:System.SR.SQL_UserInstanceFailure">
            <summary>
              Looks up a localized string similar to A user instance was requested in the connection string but the server specified does not support this option..
            </summary>
        </member>
        <member name="P:System.SR.SQL_WrongType">
            <summary>
              Looks up a localized string similar to Expecting argument of type {1}, but received type {0}..
            </summary>
        </member>
        <member name="P:System.SR.SQL_XmlReaderNotSupportOnColumnType">
            <summary>
              Looks up a localized string similar to Invalid attempt to GetXmlReader on column &apos;{0}&apos;. The GetXmlReader function can only be used on columns of type Xml..
            </summary>
        </member>
        <member name="P:System.SR.SqlConvert_ConvertFailed">
            <summary>
              Looks up a localized string similar to Cannot convert object of type &apos;{0}&apos; to object of type &apos;{1}&apos;..
            </summary>
        </member>
        <member name="P:System.SR.SQLCR_AllAttemptsFailed">
            <summary>
              Looks up a localized string similar to The connection is broken and recovery is not possible.  The client driver attempted to recover the connection one or more times and all attempts failed.  Increase the value of ConnectRetryCount to increase the number of recovery attempts..
            </summary>
        </member>
        <member name="P:System.SR.SQLCR_EncryptionChanged">
            <summary>
              Looks up a localized string similar to The server did not preserve SSL encryption during a recovery attempt, connection recovery is not possible..
            </summary>
        </member>
        <member name="P:System.SR.SQLCR_InvalidConnectRetryCountValue">
            <summary>
              Looks up a localized string similar to Invalid ConnectRetryCount value (should be 0-255)..
            </summary>
        </member>
        <member name="P:System.SR.SQLCR_InvalidConnectRetryIntervalValue">
            <summary>
              Looks up a localized string similar to Invalid ConnectRetryInterval value (should be 1-60)..
            </summary>
        </member>
        <member name="P:System.SR.SQLCR_NextAttemptWillExceedQueryTimeout">
            <summary>
              Looks up a localized string similar to Next reconnection attempt will exceed query timeout. Reconnection was terminated..
            </summary>
        </member>
        <member name="P:System.SR.SQLCR_NoCRAckAtReconnection">
            <summary>
              Looks up a localized string similar to The server did not acknowledge a recovery attempt, connection recovery is not possible..
            </summary>
        </member>
        <member name="P:System.SR.SQLCR_TDSVestionNotPreserved">
            <summary>
              Looks up a localized string similar to The server did not preserve the exact client TDS version requested during a recovery attempt, connection recovery is not possible..
            </summary>
        </member>
        <member name="P:System.SR.SQLCR_UnrecoverableClient">
            <summary>
              Looks up a localized string similar to The connection is broken and recovery is not possible.  The connection is marked by the client driver as unrecoverable.  No attempt was made to restore the connection..
            </summary>
        </member>
        <member name="P:System.SR.SQLCR_UnrecoverableServer">
            <summary>
              Looks up a localized string similar to The connection is broken and recovery is not possible.  The connection is marked by the server as unrecoverable.  No attempt was made to restore the connection..
            </summary>
        </member>
        <member name="P:System.SR.SqlDelegatedTransaction_PromotionFailed">
            <summary>
              Looks up a localized string similar to Failure while attempting to promote transaction..
            </summary>
        </member>
        <member name="P:System.SR.SqlDependency_DatabaseBrokerDisabled">
            <summary>
              Looks up a localized string similar to The SQL Server Service Broker for the current database is not enabled, and as a result query notifications are not supported.  Please enable the Service Broker for this database if you wish to use notifications..
            </summary>
        </member>
        <member name="P:System.SR.SqlDependency_DefaultOptionsButNoStart">
            <summary>
              Looks up a localized string similar to When using SqlDependency without providing an options value, SqlDependency.Start() must be called prior to execution of a command added to the SqlDependency instance..
            </summary>
        </member>
        <member name="P:System.SR.SqlDependency_DuplicateStart">
            <summary>
              Looks up a localized string similar to SqlDependency does not support calling Start() with different connection strings having the same server, user, and database in the same app domain..
            </summary>
        </member>
        <member name="P:System.SR.SqlDependency_EventNoDuplicate">
            <summary>
              Looks up a localized string similar to SqlDependency.OnChange does not support multiple event registrations for the same delegate..
            </summary>
        </member>
        <member name="P:System.SR.SqlDependency_IdMismatch">
            <summary>
              Looks up a localized string similar to No SqlDependency exists for the key..
            </summary>
        </member>
        <member name="P:System.SR.SqlDependency_InvalidTimeout">
            <summary>
              Looks up a localized string similar to Timeout specified is invalid. Timeout cannot be &lt; 0..
            </summary>
        </member>
        <member name="P:System.SR.SqlDependency_NoMatchingServerDatabaseStart">
            <summary>
              Looks up a localized string similar to SqlDependency.Start has been called for the server the command is executing against more than once, but there is no matching server/user/database Start() call for current command..
            </summary>
        </member>
        <member name="P:System.SR.SqlDependency_NoMatchingServerStart">
            <summary>
              Looks up a localized string similar to When using SqlDependency without providing an options value, SqlDependency.Start() must be called for each server that is being executed against..
            </summary>
        </member>
        <member name="P:System.SR.SqlFileStream_FileAlreadyInTransaction">
            <summary>
              Looks up a localized string similar to The process cannot access the file specified because it has been opened in another transaction..
            </summary>
        </member>
        <member name="P:System.SR.SqlFileStream_InvalidParameter">
            <summary>
              Looks up a localized string similar to An invalid parameter was passed to the function..
            </summary>
        </member>
        <member name="P:System.SR.SqlFileStream_InvalidPath">
            <summary>
              Looks up a localized string similar to The path name is not valid..
            </summary>
        </member>
        <member name="P:System.SR.SqlFileStream_NotSupported">
            <summary>
              Looks up a localized string similar to SqlFileStream is not supported on this platform..
            </summary>
        </member>
        <member name="P:System.SR.SqlFileStream_PathNotValidDiskResource">
            <summary>
              Looks up a localized string similar to The path name is invalid or does not point to a disk file..
            </summary>
        </member>
        <member name="P:System.SR.SqlMetaData_InvalidSqlDbTypeForConstructorFormat">
            <summary>
              Looks up a localized string similar to The dbType {0} is invalid for this constructor..
            </summary>
        </member>
        <member name="P:System.SR.SqlMetaData_NameTooLong">
            <summary>
              Looks up a localized string similar to The name is too long..
            </summary>
        </member>
        <member name="P:System.SR.SqlMetaData_SpecifyBothSortOrderAndOrdinal">
            <summary>
              Looks up a localized string similar to The sort order and ordinal must either both be specified, or neither should be specified (SortOrder.Unspecified and -1).  The values given were: order = {0}, ordinal = {1}..
            </summary>
        </member>
        <member name="P:System.SR.SqlMisc_AlreadyFilledMessage">
            <summary>
              Looks up a localized string similar to SQL Type has already been loaded with data..
            </summary>
        </member>
        <member name="P:System.SR.SqlMisc_ArithOverflowMessage">
            <summary>
              Looks up a localized string similar to Arithmetic Overflow..
            </summary>
        </member>
        <member name="P:System.SR.SqlMisc_ClosedXmlReaderMessage">
            <summary>
              Looks up a localized string similar to Invalid attempt to access a closed XmlReader..
            </summary>
        </member>
        <member name="P:System.SR.SqlMisc_CompareDiffCollationMessage">
            <summary>
              Looks up a localized string similar to Two strings to be compared have different collation..
            </summary>
        </member>
        <member name="P:System.SR.SqlMisc_ConcatDiffCollationMessage">
            <summary>
              Looks up a localized string similar to Two strings to be concatenated have different collation..
            </summary>
        </member>
        <member name="P:System.SR.SqlMisc_ConversionOverflowMessage">
            <summary>
              Looks up a localized string similar to Conversion overflows..
            </summary>
        </member>
        <member name="P:System.SR.SqlMisc_DateTimeOverflowMessage">
            <summary>
              Looks up a localized string similar to SqlDateTime overflow. Must be between 1/1/1753 12:00:00 AM and 12/31/9999 11:59:59 PM..
            </summary>
        </member>
        <member name="P:System.SR.SqlMisc_DivideByZeroMessage">
            <summary>
              Looks up a localized string similar to Divide by zero error encountered..
            </summary>
        </member>
        <member name="P:System.SR.SqlMisc_FormatMessage">
            <summary>
              Looks up a localized string similar to The input wasn&apos;t in a correct format..
            </summary>
        </member>
        <member name="P:System.SR.SqlMisc_InvalidArraySizeMessage">
            <summary>
              Looks up a localized string similar to Invalid array size..
            </summary>
        </member>
        <member name="P:System.SR.SqlMisc_InvalidDateTimeMessage">
            <summary>
              Looks up a localized string similar to Invalid SqlDateTime..
            </summary>
        </member>
        <member name="P:System.SR.SqlMisc_InvalidFlagMessage">
            <summary>
              Looks up a localized string similar to Invalid flag value..
            </summary>
        </member>
        <member name="P:System.SR.SqlMisc_InvalidOpStreamClosed">
            <summary>
              Looks up a localized string similar to Invalid attempt to call {0} when the stream is closed..
            </summary>
        </member>
        <member name="P:System.SR.SqlMisc_InvalidOpStreamNonReadable">
            <summary>
              Looks up a localized string similar to Invalid attempt to call {0} when the stream non-readable..
            </summary>
        </member>
        <member name="P:System.SR.SqlMisc_InvalidOpStreamNonSeekable">
            <summary>
              Looks up a localized string similar to Invalid attempt to call {0} when the stream is non-seekable..
            </summary>
        </member>
        <member name="P:System.SR.SqlMisc_InvalidOpStreamNonWritable">
            <summary>
              Looks up a localized string similar to Invalid attempt to call {0} when the stream non-writable..
            </summary>
        </member>
        <member name="P:System.SR.SqlMisc_InvalidPrecScaleMessage">
            <summary>
              Looks up a localized string similar to Invalid numeric precision/scale..
            </summary>
        </member>
        <member name="P:System.SR.SqlMisc_MessageString">
            <summary>
              Looks up a localized string similar to Message.
            </summary>
        </member>
        <member name="P:System.SR.SqlMisc_NotFilledMessage">
            <summary>
              Looks up a localized string similar to SQL Type has not been loaded with data..
            </summary>
        </member>
        <member name="P:System.SR.SqlMisc_NullString">
            <summary>
              Looks up a localized string similar to Null.
            </summary>
        </member>
        <member name="P:System.SR.SqlMisc_NullValueMessage">
            <summary>
              Looks up a localized string similar to Data is Null. This method or property cannot be called on Null values..
            </summary>
        </member>
        <member name="P:System.SR.SqlMisc_NumeToDecOverflowMessage">
            <summary>
              Looks up a localized string similar to Conversion from SqlDecimal to Decimal overflows..
            </summary>
        </member>
        <member name="P:System.SR.SqlMisc_StreamErrorMessage">
            <summary>
              Looks up a localized string similar to An error occurred while reading..
            </summary>
        </member>
        <member name="P:System.SR.SqlMisc_SubclassMustOverride">
            <summary>
              Looks up a localized string similar to Subclass did not override a required method..
            </summary>
        </member>
        <member name="P:System.SR.SqlMisc_TimeZoneSpecifiedMessage">
            <summary>
              Looks up a localized string similar to A time zone was specified. SqlDateTime does not support time zones..
            </summary>
        </member>
        <member name="P:System.SR.SqlMisc_TruncationMaxDataMessage">
            <summary>
              Looks up a localized string similar to Data returned is larger than 2Gb in size. Use SequentialAccess command behavior in order to get all of the data..
            </summary>
        </member>
        <member name="P:System.SR.SqlMisc_TruncationMessage">
            <summary>
              Looks up a localized string similar to Numeric arithmetic causes truncation..
            </summary>
        </member>
        <member name="P:System.SR.SQLMSF_FailoverPartnerNotSupported">
            <summary>
              Looks up a localized string similar to Connecting to a mirrored SQL Server instance using the MultiSubnetFailover connection option is not supported..
            </summary>
        </member>
        <member name="P:System.SR.SQLNotify_AlreadyHasCommand">
            <summary>
              Looks up a localized string similar to This SqlCommand object is already associated with another SqlDependency object..
            </summary>
        </member>
        <member name="P:System.SR.SqlParameter_DBNullNotSupportedForTVP">
            <summary>
              Looks up a localized string similar to DBNull value for parameter &apos;{0}&apos; is not supported. Table-valued parameters cannot be DBNull..
            </summary>
        </member>
        <member name="P:System.SR.SqlParameter_InvalidTableDerivedPrecisionForTvp">
            <summary>
              Looks up a localized string similar to Precision &apos;{0}&apos; required to send all values in column &apos;{1}&apos; exceeds the maximum supported precision &apos;{2}&apos;. The values must all fit in a single precision..
            </summary>
        </member>
        <member name="P:System.SR.SqlParameter_UnexpectedTypeNameForNonStruct">
            <summary>
              Looks up a localized string similar to TypeName specified for parameter &apos;{0}&apos;.  TypeName must only be set for Structured parameters..
            </summary>
        </member>
        <member name="P:System.SR.SqlParameter_UnsupportedTVPOutputParameter">
            <summary>
              Looks up a localized string similar to ParameterDirection &apos;{0}&apos; specified for parameter &apos;{1}&apos; is not supported. Table-valued parameters only support ParameterDirection.Input..
            </summary>
        </member>
        <member name="P:System.SR.SqlProvider_DuplicateSortOrdinal">
            <summary>
              Looks up a localized string similar to The sort ordinal {0} was specified twice..
            </summary>
        </member>
        <member name="P:System.SR.SqlProvider_InvalidDataColumnMaxLength">
            <summary>
              Looks up a localized string similar to The size of column &apos;{0}&apos; is not supported. The size is {1}..
            </summary>
        </member>
        <member name="P:System.SR.SqlProvider_InvalidDataColumnType">
            <summary>
              Looks up a localized string similar to The type of column &apos;{0}&apos; is not supported.  The type is &apos;{1}&apos;.
            </summary>
        </member>
        <member name="P:System.SR.SqlProvider_MissingSortOrdinal">
            <summary>
              Looks up a localized string similar to The sort ordinal {0} was not specified..
            </summary>
        </member>
        <member name="P:System.SR.SqlProvider_NotEnoughColumnsInStructuredType">
            <summary>
              Looks up a localized string similar to There are not enough fields in the Structured type.  Structured types must have at least one field..
            </summary>
        </member>
        <member name="P:System.SR.SqlProvider_SortOrdinalGreaterThanFieldCount">
            <summary>
              Looks up a localized string similar to The sort ordinal {0} on field {1} exceeds the total number of fields..
            </summary>
        </member>
        <member name="P:System.SR.SQLROR_FailoverNotSupported">
            <summary>
              Looks up a localized string similar to Connecting to a mirrored SQL Server instance using the ApplicationIntent ReadOnly connection option is not supported..
            </summary>
        </member>
        <member name="P:System.SR.SQLROR_InvalidRoutingInfo">
            <summary>
              Looks up a localized string similar to Invalid routing information received..
            </summary>
        </member>
        <member name="P:System.SR.SQLROR_RecursiveRoutingNotSupported">
            <summary>
              Looks up a localized string similar to Two or more redirections have occurred. Only one redirection per login is allowed..
            </summary>
        </member>
        <member name="P:System.SR.SQLROR_TimeoutAfterRoutingInfo">
            <summary>
              Looks up a localized string similar to Server provided routing information, but timeout already expired..
            </summary>
        </member>
        <member name="P:System.SR.SQLROR_UnexpectedRoutingInfo">
            <summary>
              Looks up a localized string similar to Unexpected routing information received..
            </summary>
        </member>
        <member name="P:System.SR.SQLUDT_InvalidSqlType">
            <summary>
              Looks up a localized string similar to Specified type is not registered on the target server. {0}..
            </summary>
        </member>
        <member name="P:System.SR.SqlUdt_InvalidUdtMessage">
            <summary>
              Looks up a localized string similar to &apos;{0}&apos; is an invalid user defined type, reason: {1}..
            </summary>
        </member>
        <member name="P:System.SR.SQLUDT_InvalidUdtTypeName">
            <summary>
              Looks up a localized string similar to UdtTypeName property must be set for UDT parameters..
            </summary>
        </member>
        <member name="P:System.SR.SQLUDT_MaxByteSizeValue">
            <summary>
              Looks up a localized string similar to range: 0-8000.
            </summary>
        </member>
        <member name="P:System.SR.SQLUDT_Unexpected">
            <summary>
              Looks up a localized string similar to unexpected error encountered in SqlClient data provider. {0}.
            </summary>
        </member>
        <member name="P:System.SR.SQLUDT_UnexpectedUdtTypeName">
            <summary>
              Looks up a localized string similar to UdtTypeName property must be set only for UDT parameters..
            </summary>
        </member>
        <member name="P:System.SR.SqlUdtReason_NoUdtAttribute">
            <summary>
              Looks up a localized string similar to no UDT attribute.
            </summary>
        </member>
        <member name="P:System.SR.SSPIInvalidHandleType">
            <summary>
              Looks up a localized string similar to &apos;{0}&apos; is not a supported handle type..
            </summary>
        </member>
        <member name="P:System.SR.TCE_AttestationInfoNotReturnedFromSQLServer">
            <summary>
              Looks up a localized string similar to Attestation information was not returned by SQL Server. Enclave type is &apos;{0}&apos; and enclave attestation URL is &apos;{1}&apos;..
            </summary>
        </member>
        <member name="P:System.SR.TCE_BatchedUpdateColumnEncryptionSettingMismatch">
            <summary>
              Looks up a localized string similar to {0} should be identical on all commands ({1}, {2}, {3}, {4}) when doing batch updates..
            </summary>
        </member>
        <member name="P:System.SR.TCE_CannotCreateSqlColumnEncryptionEnclaveProvider">
            <summary>
              Looks up a localized string similar to Failed to instantiate an enclave provider with type &apos;{1}&apos; for name &apos;{0}&apos;. Error message: {2}.
            </summary>
        </member>
        <member name="P:System.SR.TCE_CannotGetSqlColumnEncryptionEnclaveProviderConfig">
            <summary>
              Looks up a localized string similar to Failed to read the configuration section for enclave providers. Make sure the section is correctly formatted in your application configuration file. Error Message: {0}.
            </summary>
        </member>
        <member name="P:System.SR.TCE_CanOnlyCallOnce">
            <summary>
              Looks up a localized string similar to Key store providers cannot be set more than once..
            </summary>
        </member>
        <member name="P:System.SR.TCE_CertificateNotFound">
            <summary>
              Looks up a localized string similar to Certificate with thumbprint &apos;{0}&apos; not found in certificate store &apos;{1}&apos; in certificate location &apos;{2}&apos;..
            </summary>
        </member>
        <member name="P:System.SR.TCE_CertificateNotFoundSysErr">
            <summary>
              Looks up a localized string similar to Certificate with thumbprint &apos;{0}&apos; not found in certificate store &apos;{1}&apos; in certificate location &apos;{2}&apos;. Verify the certificate path in the column master key definition in the database is correct, and the certificate has been imported correctly into the certificate location/store..
            </summary>
        </member>
        <member name="P:System.SR.TCE_CertificateWithNoPrivateKey">
            <summary>
              Looks up a localized string similar to Certificate specified in key path &apos;{0}&apos; does not have a private key to encrypt a column encryption key. Verify the certificate is imported correctly..
            </summary>
        </member>
        <member name="P:System.SR.TCE_CertificateWithNoPrivateKeySysErr">
            <summary>
              Looks up a localized string similar to Certificate specified in key path &apos;{0}&apos; does not have a private key to decrypt a column encryption key. Verify the certificate is imported correctly..
            </summary>
        </member>
        <member name="P:System.SR.TCE_ColumnDecryptionFailed">
            <summary>
              Looks up a localized string similar to Failed to decrypt column &apos;{0}&apos;..
            </summary>
        </member>
        <member name="P:System.SR.TCE_ColumnEncryptionKeysNotFound">
            <summary>
              Looks up a localized string similar to Internal Error. Encrypted column encryption keys not found when trying to send the keys to the enclave..
            </summary>
        </member>
        <member name="P:System.SR.TCE_ColumnMasterKeySignatureNotFound">
            <summary>
              Looks up a localized string similar to Internal error. The signature returned by SQL Server for enclave-enabled column master key, specified at key path &apos;{0}&apos;, cannot be null or empty..
            </summary>
        </member>
        <member name="P:System.SR.TCE_ColumnMasterKeySignatureVerificationFailed">
            <summary>
              Looks up a localized string similar to The signature returned by SQL Server for the column master key, specified in key path &apos;{0}&apos;, is invalid (does not match the computed signature). Recreate column master key metadata, making sure the signature inside the metadata is computed using the column master key being referenced in the metadata. If the error persists, please contact Microsoft for assistance..
            </summary>
        </member>
        <member name="P:System.SR.TCE_DecryptionFailed">
            <summary>
              Looks up a localized string similar to Decryption failed. The last 10 bytes of the encrypted column encryption key are: &apos;{0}&apos;. The first 10 bytes of ciphertext are: &apos;{1}&apos;..
            </summary>
        </member>
        <member name="P:System.SR.TCE_EmptyArgumentInConstructorInternal">
            <summary>
              Looks up a localized string similar to Internal Error. Empty argument &apos;{0}&apos; specified when constructing an object of type &apos;{1}&apos;. &apos;{0}&apos; cannot be empty..
            </summary>
        </member>
        <member name="P:System.SR.TCE_EmptyArgumentInternal">
            <summary>
              Looks up a localized string similar to Internal Error. Argument &apos;{0}&apos; cannot be empty when executing method &apos;{1}.{2}&apos;..
            </summary>
        </member>
        <member name="P:System.SR.TCE_EmptyCertificateThumbprint">
            <summary>
              Looks up a localized string similar to Empty certificate thumbprint specified in certificate path &apos;{0}&apos;..
            </summary>
        </member>
        <member name="P:System.SR.TCE_EmptyCertificateThumbprintSysErr">
            <summary>
              Looks up a localized string similar to Internal error. Empty certificate thumbprint specified in certificate path &apos;{0}&apos;..
            </summary>
        </member>
        <member name="P:System.SR.TCE_EmptyCngKeyId">
            <summary>
              Looks up a localized string similar to Empty key identifier specified in column master key path: &apos;{0}&apos;. Use the following format for a key stored in a Microsoft Cryptography API: Next Generation (CNG) provider: &lt;CNG Provider Name&gt;{1}&lt;Key Identifier&gt;..
            </summary>
        </member>
        <member name="P:System.SR.TCE_EmptyCngKeyIdSysErr">
            <summary>
              Looks up a localized string similar to Internal error. Empty key identifier specified in column master key path: &apos;{0}&apos;. Use the following format for a key stored in a Microsoft Cryptography API: Next Generation (CNG) provider: &lt;CNG Provider Name&gt;{1}&lt;Key Identifier&gt;..
            </summary>
        </member>
        <member name="P:System.SR.TCE_EmptyCngName">
            <summary>
              Looks up a localized string similar to Empty Microsoft Cryptography API: Next Generation (CNG) provider name specified in column master key path: &apos;{0}&apos;. Use the following format for a key stored in a Microsoft Cryptography API: Next Generation (CNG) provider: &lt;CNG Provider Name&gt;{1}&lt;Key Identifier&gt;..
            </summary>
        </member>
        <member name="P:System.SR.TCE_EmptyCngNameSysErr">
            <summary>
              Looks up a localized string similar to Internal error. Empty Microsoft Cryptography API: Next Generation (CNG) provider name specified in column master key path: &apos;{0}&apos;. Use the following format for a key stored in a Microsoft Cryptography API: Next Generation (CNG) provider: &lt;CNG Provider Name&gt;{1}&lt;Key Identifier&gt;..
            </summary>
        </member>
        <member name="P:System.SR.TCE_EmptyColumnEncryptionKey">
            <summary>
              Looks up a localized string similar to Empty column encryption key specified..
            </summary>
        </member>
        <member name="P:System.SR.TCE_EmptyCspKeyId">
            <summary>
              Looks up a localized string similar to Empty key identifier specified in column master key path: &apos;{0}&apos;. Use the following format for a key stored in a Microsoft cryptographic service provider (CSP): &lt;CSP Provider Name&gt;{1}&lt;Key Identifier&gt;..
            </summary>
        </member>
        <member name="P:System.SR.TCE_EmptyCspKeyIdSysErr">
            <summary>
              Looks up a localized string similar to Internal error. Empty key identifier specified in column master key path: &apos;{0}&apos;. Use the following format for a key stored in a Microsoft cryptographic service provider (CSP): &lt;CSP Provider Name&gt;{1}&lt;Key Identifier&gt;..
            </summary>
        </member>
        <member name="P:System.SR.TCE_EmptyCspName">
            <summary>
              Looks up a localized string similar to Empty Microsoft cryptographic service provider (CSP) name specified in column master key path: &apos;{0}&apos;. Use the following format for a key stored in a Microsoft cryptographic service provider (CSP): &lt;CSP Provider Name&gt;{1}&lt;Key Identifier&gt;..
            </summary>
        </member>
        <member name="P:System.SR.TCE_EmptyCspNameSysErr">
            <summary>
              Looks up a localized string similar to Internal error. Empty Microsoft cryptographic service provider (CSP) name specified in column master key path: &apos;{0}&apos;. Use the following format for a key stored in a Microsoft cryptographic service provider (CSP): &lt;CSP Provider Name&gt;{1}&lt;Key Identifier&gt;..
            </summary>
        </member>
        <member name="P:System.SR.TCE_EmptyEncryptedColumnEncryptionKey">
            <summary>
              Looks up a localized string similar to Internal error. Empty encrypted column encryption key specified..
            </summary>
        </member>
        <member name="P:System.SR.TCE_EmptyProviderName">
            <summary>
              Looks up a localized string similar to Invalid key store provider name specified. Key store provider names cannot be null or empty..
            </summary>
        </member>
        <member name="P:System.SR.TCE_EnclaveComputationsNotSupported">
            <summary>
              Looks up a localized string similar to You have specified the enclave attestation URL in the connection string, but the SQL Server instance in use does not support enclave based computations..
            </summary>
        </member>
        <member name="P:System.SR.TCE_EnclaveProviderNotFound">
            <summary>
              Looks up a localized string similar to No enclave provider found for enclave type &apos;{0}&apos;. Please specify the provider in the application configuration..
            </summary>
        </member>
        <member name="P:System.SR.TCE_EnclaveProvidersNotConfiguredForEnclaveBasedQuery">
            <summary>
              Looks up a localized string similar to Executing a query requires enclave computations, but the application configuration is missing the enclave provider section..
            </summary>
        </member>
        <member name="P:System.SR.TCE_EnclaveTypeNotReturned">
            <summary>
              Looks up a localized string similar to You have specified the enclave attestation URL in the connection string, but the SQL Server instance did not return an enclave type. Please make sure the enclave type is correctly configured in your instance..
            </summary>
        </member>
        <member name="P:System.SR.TCE_EnclaveTypeNullForEnclaveBasedQuery">
            <summary>
              Looks up a localized string similar to Internal Error. Enclave type received from SQL Server is null or empty when executing a query requiring enclave computations..
            </summary>
        </member>
        <member name="P:System.SR.TCE_ExceptionWhenGeneratingEnclavePackage">
            <summary>
              Looks up a localized string similar to Error encountered while generating package to be sent to enclave. Error message: {0}.
            </summary>
        </member>
        <member name="P:System.SR.TCE_FailedToEncryptRegisterRulesBytePackage">
            <summary>
              Looks up a localized string similar to Internal Error.  Failed to encrypt byte package to be sent to the enclave. Error Message: {0}.
            </summary>
        </member>
        <member name="P:System.SR.TCE_InsufficientBuffer">
            <summary>
              Looks up a localized string similar to Internal Error. The buffer specified by argument &apos;{0}&apos; for method &apos;{1}.{2}&apos; has insufficient space..
            </summary>
        </member>
        <member name="P:System.SR.TCE_InvalidAlgorithmVersion">
            <summary>
              Looks up a localized string similar to The specified ciphertext&apos;s encryption algorithm version &apos;{0}&apos; does not match the expected encryption algorithm version &apos;{1}&apos;..
            </summary>
        </member>
        <member name="P:System.SR.TCE_InvalidAlgorithmVersionInEncryptedCEK">
            <summary>
              Looks up a localized string similar to Specified encrypted column encryption key contains an invalid encryption algorithm version &apos;{0}&apos;. Expected version is &apos;{1}&apos;..
            </summary>
        </member>
        <member name="P:System.SR.TCE_InvalidAttestationParameterUnableToConvertToUnsignedInt">
            <summary>
              Looks up a localized string similar to Invalid attestation parameters specified by the enclave provider for enclave type &apos;{0}&apos;. Error occurred when converting the value &apos;{1}&apos; of parameter &apos;{2}&apos; to unsigned int. Error Message: {3}.
            </summary>
        </member>
        <member name="P:System.SR.TCE_InvalidAuthenticationTag">
            <summary>
              Looks up a localized string similar to Specified ciphertext has an invalid authentication tag..
            </summary>
        </member>
        <member name="P:System.SR.TCE_InvalidCertificateLocation">
            <summary>
              Looks up a localized string similar to Invalid certificate location &apos;{0}&apos; in certificate path &apos;{1}&apos;. Use the following format: &lt;certificate location&gt;{4}&lt;certificate store&gt;{4}&lt;certificate thumbprint&gt;, where &lt;certificate location&gt; is either &apos;{2}&apos; or &apos;{3}&apos;..
            </summary>
        </member>
        <member name="P:System.SR.TCE_InvalidCertificateLocationSysErr">
            <summary>
              Looks up a localized string similar to Internal error. Invalid certificate location &apos;{0}&apos; in certificate path &apos;{1}&apos;. Use the following format: &lt;certificate location&gt;{4}&lt;certificate store&gt;{4}&lt;certificate thumbprint&gt;, where &lt;certificate location&gt; is either &apos;{2}&apos; or &apos;{3}&apos;..
            </summary>
        </member>
        <member name="P:System.SR.TCE_InvalidCertificatePath">
            <summary>
              Looks up a localized string similar to Invalid certificate path: &apos;{0}&apos;. Use the following format: &lt;certificate location&gt;{3}&lt;certificate store&gt;{3}&lt;certificate thumbprint&gt;, where &lt;certificate location&gt; is either &apos;{1}&apos; or &apos;{2}&apos;..
            </summary>
        </member>
        <member name="P:System.SR.TCE_InvalidCertificatePathSysErr">
            <summary>
              Looks up a localized string similar to Internal error. Invalid certificate path: &apos;{0}&apos;. Use the following format: &lt;certificate location&gt;{3}&lt;certificate store&gt;{3}&lt;certificate thumbprint&gt;, where &lt;certificate location&gt; is either &apos;{1}&apos; or &apos;{2}&apos;..
            </summary>
        </member>
        <member name="P:System.SR.TCE_InvalidCertificateSignature">
            <summary>
              Looks up a localized string similar to The specified encrypted column encryption key signature does not match the signature computed with the column master key (certificate) in &apos;{0}&apos;. The encrypted column encryption key may be corrupt, or the specified path may be incorrect..
            </summary>
        </member>
        <member name="P:System.SR.TCE_InvalidCertificateStore">
            <summary>
              Looks up a localized string similar to Invalid certificate store &apos;{0}&apos; specified in certificate path &apos;{1}&apos;. Expected value: &apos;{2}&apos;..
            </summary>
        </member>
        <member name="P:System.SR.TCE_InvalidCertificateStoreSysErr">
            <summary>
              Looks up a localized string similar to Internal error. Invalid certificate store &apos;{0}&apos; specified in certificate path &apos;{1}&apos;. Expected value: &apos;{2}&apos;..
            </summary>
        </member>
        <member name="P:System.SR.TCE_InvalidCiphertextLengthInEncryptedCEK">
            <summary>
              Looks up a localized string similar to The specified encrypted column encryption key&apos;s ciphertext length: {0} does not match the ciphertext length: {1} when using column master key (certificate) in &apos;{2}&apos;. The encrypted column encryption key may be corrupt, or the specified certificate path may be incorrect..
            </summary>
        </member>
        <member name="P:System.SR.TCE_InvalidCiphertextLengthInEncryptedCEKCng">
            <summary>
              Looks up a localized string similar to The specified encrypted column encryption key&apos;s ciphertext length: {0} does not match the ciphertext length: {1} when using column master key (asymmetric key) in &apos;{2}&apos;. The encrypted column encryption key may be corrupt, or the specified Microsoft Cryptography API: Next Generation (CNG) provider path may be incorrect..
            </summary>
        </member>
        <member name="P:System.SR.TCE_InvalidCiphertextLengthInEncryptedCEKCsp">
            <summary>
              Looks up a localized string similar to The specified encrypted column encryption key&apos;s ciphertext length: {0} does not match the ciphertext length: {1} when using column master key (asymmetric key) in &apos;{2}&apos;. The encrypted column encryption key may be corrupt, or the specified Microsoft Cryptographic Service provider (CSP) path may be incorrect..
            </summary>
        </member>
        <member name="P:System.SR.TCE_InvalidCipherTextSize">
            <summary>
              Looks up a localized string similar to Specified ciphertext has an invalid size of {0} bytes, which is below the minimum {1} bytes required for decryption..
            </summary>
        </member>
        <member name="P:System.SR.TCE_InvalidCngKey">
            <summary>
              Looks up a localized string similar to An error occurred while opening the Microsoft Cryptography API: Next Generation (CNG) key: &apos;{0}&apos;. Verify that the CNG provider name &apos;{1}&apos; is valid, installed on the machine, and the key &apos;{2}&apos; exists..
            </summary>
        </member>
        <member name="P:System.SR.TCE_InvalidCngKeySysErr">
            <summary>
              Looks up a localized string similar to Internal error. An error occurred while opening the Microsoft Cryptography API: Next Generation (CNG) key: &apos;{0}&apos;. Verify that the CNG provider name &apos;{1}&apos; is valid, installed on the machine, and the key &apos;{2}&apos; exists..
            </summary>
        </member>
        <member name="P:System.SR.TCE_InvalidCngPath">
            <summary>
              Looks up a localized string similar to Invalid column master key path: &apos;{0}&apos;. Use the following format for a key stored in a Microsoft Cryptography API: Next Generation (CNG) provider: &lt;CNG Provider Name&gt;{1}&lt;Key Identifier&gt;..
            </summary>
        </member>
        <member name="P:System.SR.TCE_InvalidCngPathSysErr">
            <summary>
              Looks up a localized string similar to Internal error. Invalid column master key path: &apos;{0}&apos;. Use the following format for a key stored in a Microsoft Cryptography API: Next Generation (CNG) provider: &lt;CNG Provider Name&gt;{1}&lt;Key Identifier&gt;..
            </summary>
        </member>
        <member name="P:System.SR.TCE_InvalidCspKeyId">
            <summary>
              Looks up a localized string similar to Invalid key identifier: &apos;{0}&apos;. Verify that the key identifier in column master key path: &apos;{1}&apos; is valid and exists in the CSP..
            </summary>
        </member>
        <member name="P:System.SR.TCE_InvalidCspKeyIdSysErr">
            <summary>
              Looks up a localized string similar to Internal error. Invalid key identifier: &apos;{0}&apos;. Verify that the key identifier in column master key path: &apos;{1}&apos; is valid and exists in the CSP..
            </summary>
        </member>
        <member name="P:System.SR.TCE_InvalidCspName">
            <summary>
              Looks up a localized string similar to Invalid Microsoft cryptographic service provider (CSP) name: &apos;{0}&apos;. Verify that the CSP provider name in column master key path: &apos;{1}&apos; is valid and installed on the machine..
            </summary>
        </member>
        <member name="P:System.SR.TCE_InvalidCspNameSysErr">
            <summary>
              Looks up a localized string similar to Internal error. Invalid Microsoft cryptographic service provider (CSP) name: &apos;{0}&apos;. Verify that the CSP provider name in column master key path: &apos;{1}&apos; is valid and installed on the machine..
            </summary>
        </member>
        <member name="P:System.SR.TCE_InvalidCspPath">
            <summary>
              Looks up a localized string similar to Invalid column master key path: &apos;{0}&apos;. Use the following format for a key stored in a Microsoft cryptographic service provider (CSP): &lt;CSP Provider Name&gt;{1}&lt;Key Identifier&gt;..
            </summary>
        </member>
        <member name="P:System.SR.TCE_InvalidCspPathSysErr">
            <summary>
              Looks up a localized string similar to Internal error. Invalid column master key path: &apos;{0}&apos;. Use the following format for a key stored in a Microsoft cryptographic service provider (CSP): &lt;CSP Provider Name&gt;{1}&lt;Key Identifier&gt;..
            </summary>
        </member>
        <member name="P:System.SR.TCE_InvalidCustomKeyStoreProviderName">
            <summary>
              Looks up a localized string similar to Invalid key store provider name &apos;{0}&apos;. &apos;{1}&apos; prefix is reserved for system key store providers..
            </summary>
        </member>
        <member name="P:System.SR.TCE_InvalidDatabaseIdUnableToCastToUnsignedInt">
            <summary>
              Looks up a localized string similar to Internal Error. The given database id &apos;{0}&apos; is not valid. Error occurred when converting the database id to unsigned int. Error Message: {1}.
            </summary>
        </member>
        <member name="P:System.SR.TCE_InvalidEncryptionKeyOrdinalEnclaveMetadata">
            <summary>
              Looks up a localized string similar to Internal error. Error occurred when populating enclave metadata. The referenced column encryption key ordinal &apos;{0}&apos; is missing in the encryption metadata returned by SQL Server. Max ordinal is &apos;{1}&apos;..
            </summary>
        </member>
        <member name="P:System.SR.TCE_InvalidEncryptionKeyOrdinalParameterMetadata">
            <summary>
              Looks up a localized string similar to Internal error. Error occurred when populating parameter metadata. The referenced column encryption key ordinal &apos;{0}&apos; is missing in the encryption metadata returned by SQL Server. Max ordinal is &apos;{1}&apos;..
            </summary>
        </member>
        <member name="P:System.SR.TCE_InvalidEncryptionType">
            <summary>
              Looks up a localized string similar to Encryption type &apos;{1}&apos; specified for the column in the database is either invalid or corrupted. Valid encryption types for algorithm &apos;{0}&apos; are: {2}..
            </summary>
        </member>
        <member name="P:System.SR.TCE_InvalidKeyEncryptionAlgorithm">
            <summary>
              Looks up a localized string similar to Invalid key encryption algorithm specified: &apos;{0}&apos;. Expected value: &apos;{1}&apos;..
            </summary>
        </member>
        <member name="P:System.SR.TCE_InvalidKeyEncryptionAlgorithmSysErr">
            <summary>
              Looks up a localized string similar to Internal error. Invalid key encryption algorithm specified: &apos;{0}&apos;. Expected value: &apos;{1}&apos;..
            </summary>
        </member>
        <member name="P:System.SR.TCE_InvalidKeyIdUnableToCastToUnsignedShort">
            <summary>
              Looks up a localized string similar to Internal Error. The given key id &apos;{0}&apos; is not valid. Error occurred when converting the key id to unsigned short. Error Message: {1}.
            </summary>
        </member>
        <member name="P:System.SR.TCE_InvalidKeySize">
            <summary>
              Looks up a localized string similar to The column encryption key has been successfully decrypted but it&apos;s length: {1} does not match the length: {2} for algorithm &apos;{0}&apos;. Verify the encrypted value of the column encryption key in the database..
            </summary>
        </member>
        <member name="P:System.SR.TCE_InvalidKeyStoreProviderName">
            <summary>
              Looks up a localized string similar to Invalid key store provider name: &apos;{0}&apos;. A key store provider name must denote either a system key store provider or a registered custom key store provider. Valid system key store provider names are: {1}. Valid (currently registered) custom key store provider names are: {2}. Please verify key store provider information in column master key definitions in the database, and verify all custom key store providers used in your application are registered properly..
            </summary>
        </member>
        <member name="P:System.SR.TCE_InvalidSignature">
            <summary>
              Looks up a localized string similar to The specified encrypted column encryption key signature does not match the signature computed with the column master key (asymmetric key) in &apos;{0}&apos;. The encrypted column encryption key may be corrupt, or the specified path may be incorrect..
            </summary>
        </member>
        <member name="P:System.SR.TCE_InvalidSignatureInEncryptedCEK">
            <summary>
              Looks up a localized string similar to The specified encrypted column encryption key&apos;s signature length: {0} does not match the signature length: {1} when using column master key (certificate) in &apos;{2}&apos;. The encrypted column encryption key may be corrupt, or the specified certificate path may be incorrect..
            </summary>
        </member>
        <member name="P:System.SR.TCE_InvalidSignatureInEncryptedCEKCng">
            <summary>
              Looks up a localized string similar to The specified encrypted column encryption key&apos;s signature length: {0} does not match the signature length: {1} when using column master key (asymmetric key) in &apos;{2}&apos;. The encrypted column encryption key may be corrupt, or the specified Microsoft Cryptography API: Next Generation (CNG) provider path may be incorrect..
            </summary>
        </member>
        <member name="P:System.SR.TCE_InvalidSignatureInEncryptedCEKCsp">
            <summary>
              Looks up a localized string similar to The specified encrypted column encryption key&apos;s signature length: {0} does not match the signature length: {1} when using column master key (asymmetric key) in &apos;{2}&apos;. The encrypted column encryption key may be corrupt, or the specified Microsoft cryptographic service provider (CSP) path may be incorrect..
            </summary>
        </member>
        <member name="P:System.SR.TCE_KeyDecryptionFailed">
            <summary>
              Looks up a localized string similar to Failed to decrypt a column encryption key using key store provider: &apos;{0}&apos;. Verify the properties of the column encryption key and its column master key in your database. The last 10 bytes of the encrypted column encryption key are: &apos;{1}&apos;..
            </summary>
        </member>
        <member name="P:System.SR.TCE_KeyDecryptionFailedCertStore">
            <summary>
              Looks up a localized string similar to Failed to decrypt a column encryption key using key store provider: &apos;{0}&apos;. The last 10 bytes of the encrypted column encryption key are: &apos;{1}&apos;..
            </summary>
        </member>
        <member name="P:System.SR.TCE_LargeCertificatePathLength">
            <summary>
              Looks up a localized string similar to Specified certificate path has {0} bytes, which exceeds maximum length of {1} bytes..
            </summary>
        </member>
        <member name="P:System.SR.TCE_LargeCertificatePathLengthSysErr">
            <summary>
              Looks up a localized string similar to Internal error. Specified certificate path has {0} bytes, which exceeds maximum length of {1} bytes..
            </summary>
        </member>
        <member name="P:System.SR.TCE_MultipleRowsReturnedForAttestationInfo">
            <summary>
              Looks up a localized string similar to Internal error. Error occurred when parsing the results of &apos;{0}&apos;. The attestation information resultset is expected to contain only one row, but it contains multiple rows..
            </summary>
        </member>
        <member name="P:System.SR.TCE_NoAttestationUrlSpecifiedForEnclaveBasedQueryGeneratingEnclavePackage">
            <summary>
              Looks up a localized string similar to Error occured when generating enclave package. Attestation URL has not been specified in the connection string, but the query requires enclave computations.  Enclave type is &apos;{0}&apos;..
            </summary>
        </member>
        <member name="P:System.SR.TCE_NoAttestationUrlSpecifiedForEnclaveBasedQuerySpDescribe">
            <summary>
              Looks up a localized string similar to Error occured when reading &apos;{0}&apos; resultset. Attestation URL has not been specified in the connection string, but the query requires enclave computations.  Enclave type is &apos;{1}&apos;..
            </summary>
        </member>
        <member name="P:System.SR.TCE_NotSupportedByServer">
            <summary>
              Looks up a localized string similar to {0} instance in use does not support column encryption..
            </summary>
        </member>
        <member name="P:System.SR.TCE_NullArgumentInConstructorInternal">
            <summary>
              Looks up a localized string similar to Internal Error. Null argument &apos;{0}&apos; specified when constructing an object of type &apos;{1}&apos;. &apos;{0}&apos; cannot be null..
            </summary>
        </member>
        <member name="P:System.SR.TCE_NullArgumentInternal">
            <summary>
              Looks up a localized string similar to Internal Error. Argument &apos;{0}&apos; cannot be null when executing method &apos;{1}.{2}&apos;..
            </summary>
        </member>
        <member name="P:System.SR.TCE_NullCertificatePath">
            <summary>
              Looks up a localized string similar to Certificate path cannot be null. Use the following format: &lt;certificate location&gt;{2}&lt;certificate store&gt;{2}&lt;certificate thumbprint&gt;, where &lt;certificate location&gt; is either &apos;{0}&apos; or &apos;{1}&apos;..
            </summary>
        </member>
        <member name="P:System.SR.TCE_NullCertificatePathSysErr">
            <summary>
              Looks up a localized string similar to Internal error. Certificate path cannot be null. Use the following format: &lt;certificate location&gt;{2}&lt;certificate store&gt;{2}&lt;certificate thumbprint&gt;, where &lt;certificate location&gt; is either &apos;{0}&apos; or &apos;{1}&apos;..
            </summary>
        </member>
        <member name="P:System.SR.TCE_NullCipherText">
            <summary>
              Looks up a localized string similar to Internal error. Ciphertext value cannot be null..
            </summary>
        </member>
        <member name="P:System.SR.TCE_NullCngPath">
            <summary>
              Looks up a localized string similar to Column master key path cannot be null. Use the following format for a key stored in a Microsoft Cryptography API: Next Generation (CNG) provider: &lt;CNG Provider Name&gt;{0}&lt;Key Identifier&gt;..
            </summary>
        </member>
        <member name="P:System.SR.TCE_NullCngPathSysErr">
            <summary>
              Looks up a localized string similar to Internal error. Column master key path cannot be null. Use the following format for a key stored in a Microsoft Cryptography API: Next Generation (CNG) provider: &lt;CNG Provider Name&gt;{0}&lt;Key Identifier&gt;..
            </summary>
        </member>
        <member name="P:System.SR.TCE_NullColumnEncryptionAlgorithm">
            <summary>
              Looks up a localized string similar to Internal error. Encryption algorithm cannot be null. Valid algorithms are: {0}..
            </summary>
        </member>
        <member name="P:System.SR.TCE_NullColumnEncryptionKey">
            <summary>
              Looks up a localized string similar to Column encryption key cannot be null..
            </summary>
        </member>
        <member name="P:System.SR.TCE_NullColumnEncryptionKeySysErr">
            <summary>
              Looks up a localized string similar to Internal error. Column encryption key cannot be null..
            </summary>
        </member>
        <member name="P:System.SR.TCE_NullCspPath">
            <summary>
              Looks up a localized string similar to Column master key path cannot be null. Use the following format for a key stored in a Microsoft cryptographic service provider (CSP): &lt;CSP Provider Name&gt;{0}&lt;Key Identifier&gt;..
            </summary>
        </member>
        <member name="P:System.SR.TCE_NullCspPathSysErr">
            <summary>
              Looks up a localized string similar to Internal error. Column master key path cannot be null. Use the following format for a key stored in a Microsoft cryptographic service provider (CSP): &lt;CSP Provider Name&gt;{0}&lt;Key Identifier&gt;..
            </summary>
        </member>
        <member name="P:System.SR.TCE_NullCustomKeyStoreProviderDictionary">
            <summary>
              Looks up a localized string similar to Column encryption key store provider dictionary cannot be null. Expecting a non-null value..
            </summary>
        </member>
        <member name="P:System.SR.TCE_NullEnclavePackageForEnclaveBasedQuery">
            <summary>
              Looks up a localized string similar to Internal Error. Enclave package is null during execution of an enclave based query. Enclave type is &apos;{0}&apos; and enclaveAttestationUrl is &apos;{1}&apos;..
            </summary>
        </member>
        <member name="P:System.SR.TCE_NullEnclaveSessionDuringQueryExecution">
            <summary>
              Looks up a localized string similar to Internal Error. Enclave session is null during query execution. Enclave type is &apos;{0}&apos; and enclaveAttestationUrl is &apos;{1}&apos;..
            </summary>
        </member>
        <member name="P:System.SR.TCE_NullEnclaveSessionReturnedFromProvider">
            <summary>
              Looks up a localized string similar to Unable to communicate with the enclave. Null enclave session information received from the enclave provider. Enclave type is &apos;{0}&apos; and enclave attestation URL is &apos;{1}&apos;..
            </summary>
        </member>
        <member name="P:System.SR.TCE_NullEncryptedColumnEncryptionKey">
            <summary>
              Looks up a localized string similar to Internal error. Encrypted column encryption key cannot be null..
            </summary>
        </member>
        <member name="P:System.SR.TCE_NullKeyEncryptionAlgorithm">
            <summary>
              Looks up a localized string similar to Key encryption algorithm cannot be null..
            </summary>
        </member>
        <member name="P:System.SR.TCE_NullKeyEncryptionAlgorithmSysErr">
            <summary>
              Looks up a localized string similar to Internal error. Key encryption algorithm cannot be null..
            </summary>
        </member>
        <member name="P:System.SR.TCE_NullPlainText">
            <summary>
              Looks up a localized string similar to Internal error. Plaintext value cannot be null..
            </summary>
        </member>
        <member name="P:System.SR.TCE_NullProviderValue">
            <summary>
              Looks up a localized string similar to Null reference specified for key store provider &apos;{0}&apos;. Expecting a non-null value..
            </summary>
        </member>
        <member name="P:System.SR.TCE_OffsetOutOfBounds">
            <summary>
              Looks up a localized string similar to Internal Error. Failed to serialize keys to be sent to the enclave. The start offset specified by argument &apos;{0}&apos; for method {1}.{2} is out of bounds..
            </summary>
        </member>
        <member name="P:System.SR.TCE_ParamDecryptionFailed">
            <summary>
              Looks up a localized string similar to Failed to decrypt parameter &apos;{0}&apos;..
            </summary>
        </member>
        <member name="P:System.SR.TCE_ParamEncryptionFailed">
            <summary>
              Looks up a localized string similar to Failed to encrypt parameter &apos;{0}&apos;..
            </summary>
        </member>
        <member name="P:System.SR.TCE_ParamEncryptionMetaDataMissing">
            <summary>
              Looks up a localized string similar to Internal error. Metadata for parameter &apos;{1}&apos; in statement or procedure &apos;{2}&apos; is missing in resultset returned by {0}..
            </summary>
        </member>
        <member name="P:System.SR.TCE_ParamInvalidForceColumnEncryptionSetting">
            <summary>
              Looks up a localized string similar to Cannot set {0} for {3} &apos;{1}&apos; because encryption is not enabled for the statement or procedure &apos;{2}&apos;..
            </summary>
        </member>
        <member name="P:System.SR.TCE_ParamUnExpectedEncryptionMetadata">
            <summary>
              Looks up a localized string similar to Cannot execute statement or procedure &apos;{1}&apos; because {2} was set for {3} &apos;{0}&apos; and the database expects this parameter to be sent as plaintext. This may be due to a configuration error..
            </summary>
        </member>
        <member name="P:System.SR.TCE_ProcEncryptionMetaDataMissing">
            <summary>
              Looks up a localized string similar to Internal error. Metadata for parameters for command &apos;{1}&apos; in a batch is missing in the resultset returned by {0}..
            </summary>
        </member>
        <member name="P:System.SR.TCE_SequentialAccessNotSupportedOnEncryptedColumn">
            <summary>
              Looks up a localized string similar to Retrieving encrypted column &apos;{0}&apos; with {1} is not supported..
            </summary>
        </member>
        <member name="P:System.SR.TCE_SqlColumnEncryptionEnclaveProviderNameCannotBeEmpty">
            <summary>
              Looks up a localized string similar to Internal Error. SqlColumnEncryptionEnclaveProviderName cannot be null or empty..
            </summary>
        </member>
        <member name="P:System.SR.TCE_StreamNotSupportOnEncryptedColumn">
            <summary>
              Looks up a localized string similar to Retrieving encrypted column &apos;{0}&apos; as a {1} is not supported..
            </summary>
        </member>
        <member name="P:System.SR.TCE_UnableToVerifyColumnMasterKeySignature">
            <summary>
              Looks up a localized string similar to Unable to verify a column master key signature. Error message: {0}.
            </summary>
        </member>
        <member name="P:System.SR.TCE_UnexpectedDescribeParamFormatAttestationInfo">
            <summary>
              Looks up a localized string similar to Internal error. The result returned by &apos;{0}&apos; is invalid. The attestation information resultset is missing for enclave type &apos;{1}&apos;..
            </summary>
        </member>
        <member name="P:System.SR.TCE_UnexpectedDescribeParamFormatParameterMetadata">
            <summary>
              Looks up a localized string similar to Internal error. The result returned by &apos;{0}&apos; is invalid. The parameter metadata resultset is missing..
            </summary>
        </member>
        <member name="P:System.SR.TCE_UnknownColumnEncryptionAlgorithm">
            <summary>
              Looks up a localized string similar to Encryption algorithm &apos;{0}&apos; for the column in the database is either invalid or corrupted. Valid algorithms are: {1}..
            </summary>
        </member>
        <member name="P:System.SR.TCE_UnknownColumnEncryptionAlgorithmId">
            <summary>
              Looks up a localized string similar to Encryption algorithm id &apos;{0}&apos; for the column in the database is either invalid or corrupted. Valid encryption algorithm ids are: {1}..
            </summary>
        </member>
        <member name="P:System.SR.TCE_UnrecognizedKeyStoreProviderName">
            <summary>
              Looks up a localized string similar to Failed to decrypt a column encryption key. Invalid key store provider name: &apos;{0}&apos;. A key store provider name must denote either a system key store provider or a registered custom key store provider. Valid system key store provider names are: {1}. Valid (currently registered) custom key store provider names are: {2}. Please verify key store provider information in column master key definitions in the database, and verify all custom key store providers used in your application are registered properly..
            </summary>
        </member>
        <member name="P:System.SR.TCE_UnsupportedDatatype">
            <summary>
              Looks up a localized string similar to Encryption and decryption of data type &apos;{0}&apos; is not supported..
            </summary>
        </member>
        <member name="P:System.SR.TCE_UnsupportedNormalizationVersion">
            <summary>
              Looks up a localized string similar to Normalization version &apos;{0}&apos; received from {2} is not supported. Valid normalization versions are: {1}..
            </summary>
        </member>
        <member name="P:System.SR.TCE_UntrustedKeyPath">
            <summary>
              Looks up a localized string similar to Column master key path &apos;{0}&apos; received from server &apos;{1}&apos; is not a trusted key path..
            </summary>
        </member>
        <member name="T:Interop.Kernel32.IoControlCodeAccess">
            <summary>
            <a href="https://docs.microsoft.com/en-us/windows-hardware/drivers/kernel/defining-i-o-control-codes">RequiredAccess</a>.
            Indicates the type of access that a caller must request when opening the file object that represents the device (see IRP_MJ_CREATE).
            </summary>
        </member>
        <member name="F:Interop.Kernel32.IoControlCodeAccess.FILE_ANY_ACCESS">
            <summary>
            The I/O manager sends the IRP for any caller that has a handle to the file object that represents the target device object.
            </summary>
        </member>
        <member name="F:Interop.Kernel32.IoControlCodeAccess.FILE_READ_DATA">
            <summary>
            The I/O manager sends the IRP only for a caller with read access rights, allowing the underlying device driver to transfer
            data from the device to system memory.
            </summary>
        </member>
        <member name="F:Interop.Kernel32.IoControlCodeAccess.FILE_WRITE_DATA">
            <summary>
            The I/O manager sends the IRP only for a caller with write access rights, allowing the underlying device driver to transfer 
            data from system memory to its device.
            </summary>
        </member>
        <member name="M:Interop.Kernel32.CTL_CODE(System.UInt16,System.UInt16,System.Byte,System.Byte)">
            <summary> <a href="https://docs.microsoft.com/en-us/windows-hardware/drivers/kernel/defining-i-o-control-codes">CTL_CODE</a> method.</summary>
            <param name="deviceType">Identifies the device type. This value must match the value that is set in the DeviceType member of the driver's DEVICE_OBJECT structure.</param>
            <param name="function">Identifies the function to be performed by the driver. Values of less than 0x800 are reserved for Microsoft. Values of 0x800 and higher can be used by vendors.</param>
            <param name="method">Indicates how the system will pass data between the caller of DeviceIoControl (or IoBuildDeviceIoControlRequest) and the driver that handles the IRP.</param>
            <param name="access">Indicates the type of access that a caller must request when opening the file object that represents the device (see IRP_MJ_CREATE).</param>
        </member>
        <member name="T:Interop.Kernel32.IoControlTransferType">
            <summary>
            <a href="https://docs.microsoft.com/en-us/windows-hardware/drivers/kernel/buffer-descriptions-for-i-o-control-codes">TransferType</a>.
            Indicates how the system will pass data between the caller of DeviceIoControl (or IoBuildDeviceIoControlRequest) and the driver that handles the IRP.
            </summary>
        </member>
        <member name="F:Interop.Kernel32.IoControlTransferType.METHOD_BUFFERED">
            <summary>
            Specifies the buffered I/O method, which is typically used for transferring small amounts of data per request. 
            Most I/O control codes for device and intermediate drivers use this TransferType value.
            </summary>
        </member>
        <member name="F:Interop.Kernel32.IoControlTransferType.METHOD_IN_DIRECT">
            <summary>
            Specifies the direct I/O method, which is typically used for reading or writing large amounts of data, using DMA or PIO, that must be transferred quickly.
            Specify METHOD_IN_DIRECT if the caller of DeviceIoControl or IoBuildDeviceIoControlRequest will pass data to the driver.
            </summary>
        </member>
        <member name="F:Interop.Kernel32.IoControlTransferType.METHOD_OUT_DIRECT">
            <summary>
            Specifies the direct I/O method, which is typically used for reading or writing large amounts of data, using DMA or PIO, that must be transferred quickly.
            Specify METHOD_OUT_DIRECT if the caller of DeviceIoControl or IoBuildDeviceIoControlRequest will receive data from the driver.
            </summary>
        </member>
        <member name="F:Interop.Kernel32.IoControlTransferType.METHOD_NEITHER">
            <summary>
            Specifies neither buffered nor direct I/O. The I/O manager does not provide any system buffers or MDLs. The IRP supplies the user-mode virtual addresses 
            of the input and output buffers that were specified to DeviceIoControl or IoBuildDeviceIoControlRequest, without validating or mapping them.
            </summary>
        </member>
        <member name="F:Interop.UNICODE_STRING.Length">
            <summary>
            Length, in bytes, not including the the null, if any.
            </summary>
        </member>
        <member name="F:Interop.UNICODE_STRING.MaximumLength">
            <summary>
            Max size of the buffer in bytes
            </summary>
        </member>
        <member name="T:Interop.NtDll.FILE_FULL_EA_INFORMATION">
            <summary>
            <a href="https://docs.microsoft.com/en-us/windows-hardware/drivers/ddi/content/wdm/ns-wdm-_file_full_ea_information">FILE_FULL_EA_INFORMATION</a> structure.
            Provides extended attribute (EA) information. This structure is used primarily by network drivers.
            </summary>
        </member>
        <member name="F:Interop.NtDll.FILE_FULL_EA_INFORMATION.NextEntryOffset">
            <summary>
            The offset of the next FILE_FULL_EA_INFORMATION-type entry. This member is zero if no other entries follow this one.
            </summary>
        </member>
        <member name="F:Interop.NtDll.FILE_FULL_EA_INFORMATION.Flags">
            <summary>
            Can be zero or can be set with FILE_NEED_EA, indicating that the file to which the EA belongs cannot be interpreted without understanding the associated extended attributes.
            </summary>
        </member>
        <member name="F:Interop.NtDll.FILE_FULL_EA_INFORMATION.EaNameLength">
            <summary>
            The length in bytes of the EaName array. This value does not include a null-terminator to EaName.
            </summary>
        </member>
        <member name="F:Interop.NtDll.FILE_FULL_EA_INFORMATION.EaValueLength">
            <summary>
            The length in bytes of each EA value in the array.
            </summary>
        </member>
        <member name="F:Interop.NtDll.IO_STATUS_BLOCK.Status">
            <summary>
            Status
            </summary>
        </member>
        <member name="F:Interop.NtDll.IO_STATUS_BLOCK.Information">
            <summary>
            Request dependent value.
            </summary>
        </member>
        <member name="F:Interop.NtDll.IO_STATUS_BLOCK.IO_STATUS.Status">
            <summary>
            The completion status, either STATUS_SUCCESS if the operation was completed successfully or
            some other informational, warning, or error status.
            </summary>
        </member>
        <member name="F:Interop.NtDll.IO_STATUS_BLOCK.IO_STATUS.Pointer">
            <summary>
            Reserved for internal use.
            </summary>
        </member>
        <member name="T:Interop.NtDll.OBJECT_ATTRIBUTES">
            <summary>
            <a href="https://msdn.microsoft.com/en-us/library/windows/hardware/ff557749.aspx">OBJECT_ATTRIBUTES</a> structure.
            The OBJECT_ATTRIBUTES structure specifies attributes that can be applied to objects or object handles by routines 
            that create objects and/or return handles to objects.
            </summary>
        </member>
        <member name="F:Interop.NtDll.OBJECT_ATTRIBUTES.RootDirectory">
            <summary>
            Optional handle to root object directory for the given ObjectName.
            Can be a file system directory or object manager directory.
            </summary>
        </member>
        <member name="F:Interop.NtDll.OBJECT_ATTRIBUTES.ObjectName">
            <summary>
            Name of the object. Must be fully qualified if RootDirectory isn't set.
            Otherwise is relative to RootDirectory.
            </summary>
        </member>
        <member name="F:Interop.NtDll.OBJECT_ATTRIBUTES.SecurityDescriptor">
            <summary>
            If null, object will receive default security settings.
            </summary>
        </member>
        <member name="F:Interop.NtDll.OBJECT_ATTRIBUTES.SecurityQualityOfService">
            <summary>
            Optional quality of service to be applied to the object. Used to indicate
            security impersonation level and context tracking mode (dynamic or static).
            </summary>
        </member>
        <member name="M:Interop.NtDll.OBJECT_ATTRIBUTES.#ctor(Interop.UNICODE_STRING*,Interop.NtDll.ObjectAttributes,System.IntPtr)">
            <summary>
            Equivalent of InitializeObjectAttributes macro with the exception that you can directly set SQOS.
            </summary>
        </member>
        <member name="F:Interop.NtDll.ObjectAttributes.OBJ_INHERIT">
            <summary>
            This handle can be inherited by child processes of the current process.
            </summary>
        </member>
        <member name="F:Interop.NtDll.ObjectAttributes.OBJ_PERMANENT">
            <summary>
            This flag only applies to objects that are named within the object manager.
            By default, such objects are deleted when all open handles to them are closed.
            If this flag is specified, the object is not deleted when all open handles are closed.
            </summary>
        </member>
        <member name="F:Interop.NtDll.ObjectAttributes.OBJ_EXCLUSIVE">
            <summary>
            Only a single handle can be open for this object.
            </summary>
        </member>
        <member name="F:Interop.NtDll.ObjectAttributes.OBJ_CASE_INSENSITIVE">
            <summary>
            Lookups for this object should be case insensitive.
            </summary>
        </member>
        <member name="F:Interop.NtDll.ObjectAttributes.OBJ_OPENIF">
            <summary>
            Create on existing object should open, not fail with STATUS_OBJECT_NAME_COLLISION.
            </summary>
        </member>
        <member name="F:Interop.NtDll.ObjectAttributes.OBJ_OPENLINK">
            <summary>
            Open the symbolic link, not its target.
            </summary>
        </member>
        <member name="T:Interop.NtDll.CreateDisposition">
            <summary>
            File creation disposition when calling directly to NT APIs.
            </summary>
        </member>
        <member name="F:Interop.NtDll.CreateDisposition.FILE_SUPERSEDE">
            <summary>
            Default. Replace or create. Deletes existing file instead of overwriting.
            </summary>
            <remarks>
            As this potentially deletes it requires that DesiredAccess must include Delete.
            This has no equivalent in CreateFile.
            </remarks>
        </member>
        <member name="F:Interop.NtDll.CreateDisposition.FILE_OPEN">
            <summary>
            Open if exists or fail if doesn't exist. Equivalent to OPEN_EXISTING or
            <see cref="F:System.IO.FileMode.Open"/>.
            </summary>
            <remarks>
            TruncateExisting also uses Open and then manually truncates the file
            by calling NtSetInformationFile with FileAllocationInformation and an
            allocation size of 0.
            </remarks>
        </member>
        <member name="F:Interop.NtDll.CreateDisposition.FILE_CREATE">
            <summary>
            Create if doesn't exist or fail if does exist. Equivalent to CREATE_NEW
            or <see cref="F:System.IO.FileMode.CreateNew"/>.
            </summary>
        </member>
        <member name="F:Interop.NtDll.CreateDisposition.FILE_OPEN_IF">
            <summary>
            Open if exists or create if doesn't exist. Equivalent to OPEN_ALWAYS or
            <see cref="F:System.IO.FileMode.OpenOrCreate"/>.
            </summary>
        </member>
        <member name="F:Interop.NtDll.CreateDisposition.FILE_OVERWRITE">
            <summary>
            Open and overwrite if exists or fail if doesn't exist. Equivalent to
            TRUNCATE_EXISTING or <see cref="F:System.IO.FileMode.Truncate"/>.
            </summary>
        </member>
        <member name="F:Interop.NtDll.CreateDisposition.FILE_OVERWRITE_IF">
            <summary>
            Open and overwrite if exists or create if doesn't exist. Equivalent to
            CREATE_ALWAYS or <see cref="F:System.IO.FileMode.Create"/>.
            </summary>
        </member>
        <member name="T:Interop.NtDll.CreateOptions">
            <summary>
            Options for creating/opening files with NtCreateFile.
            </summary>
        </member>
        <member name="F:Interop.NtDll.CreateOptions.FILE_DIRECTORY_FILE">
            <summary>
            File being created or opened must be a directory file. Disposition must be FILE_CREATE, FILE_OPEN,
            or FILE_OPEN_IF.
            </summary>
            <remarks>
            Can only be used with FILE_SYNCHRONOUS_IO_ALERT/NONALERT, FILE_WRITE_THROUGH, FILE_OPEN_FOR_BACKUP_INTENT,
            and FILE_OPEN_BY_FILE_ID flags.
            </remarks>
        </member>
        <member name="F:Interop.NtDll.CreateOptions.FILE_WRITE_THROUGH">
            <summary>
            Applications that write data to the file must actually transfer the data into
            the file before any requested write operation is considered complete. This flag
            is set automatically if FILE_NO_INTERMEDIATE_BUFFERING is set.
            </summary>
        </member>
        <member name="F:Interop.NtDll.CreateOptions.FILE_SEQUENTIAL_ONLY">
            <summary>
            All accesses to the file are sequential.
            </summary>
        </member>
        <member name="F:Interop.NtDll.CreateOptions.FILE_NO_INTERMEDIATE_BUFFERING">
            <summary>
            File cannot be cached in driver buffers. Cannot use with AppendData desired access.
            </summary>
        </member>
        <member name="F:Interop.NtDll.CreateOptions.FILE_SYNCHRONOUS_IO_ALERT">
            <summary>
            All operations are performed synchronously. Any wait on behalf of the caller is
            subject to premature termination from alerts.
            </summary>
            <remarks>
            Cannot be used with FILE_SYNCHRONOUS_IO_NONALERT.
            Synchronous DesiredAccess flag is required. I/O system will maintain file position context.
            </remarks>
        </member>
        <member name="F:Interop.NtDll.CreateOptions.FILE_SYNCHRONOUS_IO_NONALERT">
            <summary>
            All operations are performed synchronously. Waits in the system to synchronize I/O queuing
            and completion are not subject to alerts.
            </summary>
            <remarks>
            Cannot be used with FILE_SYNCHRONOUS_IO_ALERT.
            Synchronous DesiredAccess flag is required. I/O system will maintain file position context.
            </remarks>
        </member>
        <member name="F:Interop.NtDll.CreateOptions.FILE_NON_DIRECTORY_FILE">
            <summary>
            File being created or opened must not be a directory file. Can be a data file, device,
            or volume.
            </summary>
        </member>
        <member name="F:Interop.NtDll.CreateOptions.FILE_CREATE_TREE_CONNECTION">
            <summary>
            Create a tree connection for this file in order to open it over the network.
            </summary>
            <remarks>
            Not used by device and intermediate drivers.
            </remarks>
        </member>
        <member name="F:Interop.NtDll.CreateOptions.FILE_COMPLETE_IF_OPLOCKED">
            <summary>
            Complete the operation immediately with a success code of STATUS_OPLOCK_BREAK_IN_PROGRESS if
            the target file is oplocked.
            </summary>
            <remarks>
            Not compatible with ReserveOpfilter or OpenRequiringOplock.
            Not used by device and intermediate drivers.
            </remarks>
        </member>
        <member name="F:Interop.NtDll.CreateOptions.FILE_NO_EA_KNOWLEDGE">
            <summary>
            If the extended attributes on an existing file being opened indicate that the caller must
            understand extended attributes to properly interpret the file, fail the request.
            </summary>
            <remarks>
            Not used by device and intermediate drivers.
            </remarks>
        </member>
        <member name="F:Interop.NtDll.CreateOptions.FILE_RANDOM_ACCESS">
            <summary>
            Accesses to the file can be random, so no sequential read-ahead operations should be performed
            on the file by FSDs or the system.
            </summary>
        </member>
        <member name="F:Interop.NtDll.CreateOptions.FILE_DELETE_ON_CLOSE">
            <summary>
            Delete the file when the last handle to it is passed to NtClose. Requires Delete flag in
            DesiredAccess parameter.
            </summary>
        </member>
        <member name="F:Interop.NtDll.CreateOptions.FILE_OPEN_BY_FILE_ID">
            <summary>
            Open the file by reference number or object ID. The file name that is specified by the ObjectAttributes
            name parameter includes the 8 or 16 byte file reference number or ID for the file in the ObjectAttributes
            name field. The device name can optionally be prefixed.
            </summary>
            <remarks>
            NTFS supports both reference numbers and object IDs. 16 byte reference numbers are 8 byte numbers padded
            with zeros. ReFS only supports reference numbers (not object IDs). 8 byte and 16 byte reference numbers
            are not related. Note that as the UNICODE_STRING will contain raw byte data, it may not be a "valid" string.
            Not used by device and intermediate drivers.
            </remarks>
            <example>
            \??\C:\{8 bytes of binary FileID}
            \device\HardDiskVolume1\{16 bytes of binary ObjectID}
            {8 bytes of binary FileID}
            </example>
        </member>
        <member name="F:Interop.NtDll.CreateOptions.FILE_OPEN_FOR_BACKUP_INTENT">
            <summary>
            The file is being opened for backup intent. Therefore, the system should check for certain access rights
            and grant the caller the appropriate access to the file before checking the DesiredAccess parameter
            against the file's security descriptor.
            </summary>
            <remarks>
            Not used by device and intermediate drivers.
            </remarks>
        </member>
        <member name="F:Interop.NtDll.CreateOptions.FILE_NO_COMPRESSION">
            <summary>
            When creating a file, specifies that it should not inherit the compression bit from the parent directory.
            </summary>
        </member>
        <member name="F:Interop.NtDll.CreateOptions.FILE_OPEN_REQUIRING_OPLOCK">
            <summary>
            The file is being opened and an opportunistic lock (oplock) on the file is being requested as a single atomic
            operation.
            </summary>
            <remarks>
            The file system checks for oplocks before it performs the create operation and will fail the create with a
            return code of STATUS_CANNOT_BREAK_OPLOCK if the result would be to break an existing oplock.
            Not compatible with CompleteIfOplocked or ReserveOpFilter. Windows 7 and up.
            </remarks>
        </member>
        <member name="F:Interop.NtDll.CreateOptions.FILE_DISALLOW_EXCLUSIVE">
            <summary>
            CreateFile2 uses this flag to prevent opening a file that you don't have access to without specifying 
            FILE_SHARE_READ. (Preventing users that can only read a file from denying access to other readers.)
            </summary>
            <remarks>
            Windows 7 and up.
            </remarks>
        </member>
        <member name="F:Interop.NtDll.CreateOptions.FILE_SESSION_AWARE">
            <summary>
            The client opening the file or device is session aware and per session access is validated if necessary.
            </summary>
            <remarks>
            Windows 8 and up.
            </remarks>
        </member>
        <member name="F:Interop.NtDll.CreateOptions.FILE_RESERVE_OPFILTER">
            <summary>
            This flag allows an application to request a filter opportunistic lock (oplock) to prevent other applications
            from getting share violations.
            </summary>
            <remarks>
            Not compatible with CompleteIfOplocked or OpenRequiringOplock.
            If there are already open handles, the create request will fail with STATUS_OPLOCK_NOT_GRANTED.
            </remarks>
        </member>
        <member name="F:Interop.NtDll.CreateOptions.FILE_OPEN_REPARSE_POINT">
            <summary>
            Open a file with a reparse point attribute, bypassing the normal reparse point processing.
            </summary>
        </member>
        <member name="F:Interop.NtDll.CreateOptions.FILE_OPEN_NO_RECALL">
            <summary>
            Causes files that are marked with the Offline attribute not to be recalled from remote storage.
            </summary>
            <remarks>
            More details can be found in Remote Storage documentation (see Basic Concepts).
            https://technet.microsoft.com/en-us/library/cc938459.aspx
            </remarks>
        </member>
        <member name="T:Interop.NtDll.DesiredAccess">
            <summary>
            System.IO.FileAccess looks up these values when creating handles
            </summary>
            <remarks>
            File Security and Access Rights
            https://msdn.microsoft.com/en-us/library/windows/desktop/aa364399.aspx
            </remarks>
        </member>
        <member name="F:Interop.NtDll.DesiredAccess.FILE_READ_DATA">
            <summary>
            For a file, the right to read data from the file.
            </summary>
            <remarks>
            Directory version of this flag is <see cref="F:Interop.NtDll.DesiredAccess.FILE_LIST_DIRECTORY"/>.
            </remarks>
        </member>
        <member name="F:Interop.NtDll.DesiredAccess.FILE_LIST_DIRECTORY">
            <summary>
            For a directory, the right to list the contents.
            </summary>
            <remarks>
            File version of this flag is <see cref="F:Interop.NtDll.DesiredAccess.FILE_READ_DATA"/>.
            </remarks>
        </member>
        <member name="F:Interop.NtDll.DesiredAccess.FILE_WRITE_DATA">
            <summary>
            For a file, the right to write data to the file.
            </summary>
            <remarks>
            Directory version of this flag is <see cref="F:Interop.NtDll.DesiredAccess.FILE_ADD_FILE"/>.
            </remarks>
        </member>
        <member name="F:Interop.NtDll.DesiredAccess.FILE_ADD_FILE">
            <summary>
            For a directory, the right to create a file in a directory.
            </summary>
            <remarks>
            File version of this flag is <see cref="F:Interop.NtDll.DesiredAccess.FILE_WRITE_DATA"/>.
            </remarks>
        </member>
        <member name="F:Interop.NtDll.DesiredAccess.FILE_APPEND_DATA">
            <summary>
            For a file, the right to append data to a file. <see cref="F:Interop.NtDll.DesiredAccess.FILE_WRITE_DATA"/> is needed
            to overwrite existing data.
            </summary>
            <remarks>
            Directory version of this flag is <see cref="F:Interop.NtDll.DesiredAccess.FILE_ADD_SUBDIRECTORY"/>.
            </remarks>
        </member>
        <member name="F:Interop.NtDll.DesiredAccess.FILE_ADD_SUBDIRECTORY">
            <summary>
            For a directory, the right to create a subdirectory.
            </summary>
            <remarks>
            File version of this flag is <see cref="F:Interop.NtDll.DesiredAccess.FILE_APPEND_DATA"/>.
            </remarks>
        </member>
        <member name="F:Interop.NtDll.DesiredAccess.FILE_CREATE_PIPE_INSTANCE">
            <summary>
            For a named pipe, the right to create a pipe instance.
            </summary>
        </member>
        <member name="F:Interop.NtDll.DesiredAccess.FILE_READ_EA">
            <summary>
            The right to read extended attributes.
            </summary>
        </member>
        <member name="F:Interop.NtDll.DesiredAccess.FILE_WRITE_EA">
            <summary>
            The right to write extended attributes.
            </summary>
        </member>
        <member name="F:Interop.NtDll.DesiredAccess.FILE_EXECUTE">
            <summary>
            The right to execute the file.
            </summary>
            <remarks>
            Directory version of this flag is <see cref="F:Interop.NtDll.DesiredAccess.FILE_TRAVERSE"/>.
            </remarks>
        </member>
        <member name="F:Interop.NtDll.DesiredAccess.FILE_TRAVERSE">
            <summary>
            For a directory, the right to traverse the directory.
            </summary>
            <remarks>
            File version of this flag is <see cref="F:Interop.NtDll.DesiredAccess.FILE_EXECUTE"/>.
            </remarks>
        </member>
        <member name="F:Interop.NtDll.DesiredAccess.FILE_DELETE_CHILD">
            <summary>
            For a directory, the right to delete a directory and all
            the files it contains, including read-only files.
            </summary>
        </member>
        <member name="F:Interop.NtDll.DesiredAccess.FILE_READ_ATTRIBUTES">
            <summary>
            The right to read attributes.
            </summary>
        </member>
        <member name="F:Interop.NtDll.DesiredAccess.FILE_WRITE_ATTRIBUTES">
            <summary>
            The right to write attributes.
            </summary>
        </member>
        <member name="F:Interop.NtDll.DesiredAccess.FILE_ALL_ACCESS">
            <summary>
            All standard and specific rights. [FILE_ALL_ACCESS]
            </summary>
        </member>
        <member name="F:Interop.NtDll.DesiredAccess.DELETE">
            <summary>
            The right to delete the object.
            </summary>
        </member>
        <member name="F:Interop.NtDll.DesiredAccess.READ_CONTROL">
            <summary>
            The right to read the information in the object's security descriptor.
            Doesn't include system access control list info (SACL).
            </summary>
        </member>
        <member name="F:Interop.NtDll.DesiredAccess.WRITE_DAC">
            <summary>
            The right to modify the discretionary access control list (DACL) in the
            object's security descriptor.
            </summary>
        </member>
        <member name="F:Interop.NtDll.DesiredAccess.WRITE_OWNER">
            <summary>
            The right to change the owner in the object's security descriptor.
            </summary>
        </member>
        <member name="F:Interop.NtDll.DesiredAccess.SYNCHRONIZE">
            <summary>
            The right to use the object for synchronization. Enables a thread to wait until the object
            is in the signaled state. This is required if opening a synchronous handle.
            </summary>
        </member>
        <member name="F:Interop.NtDll.DesiredAccess.STANDARD_RIGHTS_READ">
            <summary>
            Same as READ_CONTROL.
            </summary>
        </member>
        <member name="F:Interop.NtDll.DesiredAccess.STANDARD_RIGHTS_WRITE">
            <summary>
            Same as READ_CONTROL.
            </summary>
        </member>
        <member name="F:Interop.NtDll.DesiredAccess.STANDARD_RIGHTS_EXECUTE">
            <summary>
            Same as READ_CONTROL.
            </summary>
        </member>
        <member name="F:Interop.NtDll.DesiredAccess.FILE_GENERIC_READ">
            <summary>
            Maps internally to <see cref="F:Interop.NtDll.DesiredAccess.FILE_READ_ATTRIBUTES"/> | <see cref="F:Interop.NtDll.DesiredAccess.FILE_READ_DATA"/> | <see cref="F:Interop.NtDll.DesiredAccess.FILE_READ_EA"/>
            | <see cref="F:Interop.NtDll.DesiredAccess.STANDARD_RIGHTS_READ"/> | <see cref="F:Interop.NtDll.DesiredAccess.SYNCHRONIZE"/>.
            (For directories, <see cref="F:Interop.NtDll.DesiredAccess.FILE_READ_ATTRIBUTES"/> | <see cref="F:Interop.NtDll.DesiredAccess.FILE_LIST_DIRECTORY"/> | <see cref="F:Interop.NtDll.DesiredAccess.FILE_READ_EA"/>
            | <see cref="F:Interop.NtDll.DesiredAccess.STANDARD_RIGHTS_READ"/> | <see cref="F:Interop.NtDll.DesiredAccess.SYNCHRONIZE"/>.)
            </summary>
        </member>
        <member name="F:Interop.NtDll.DesiredAccess.FILE_GENERIC_WRITE">
            <summary>
            Maps internally to <see cref="F:Interop.NtDll.DesiredAccess.FILE_APPEND_DATA"/> | <see cref="F:Interop.NtDll.DesiredAccess.FILE_WRITE_ATTRIBUTES"/> | <see cref="F:Interop.NtDll.DesiredAccess.FILE_WRITE_DATA"/>
            | <see cref="F:Interop.NtDll.DesiredAccess.FILE_WRITE_EA"/> | <see cref="F:Interop.NtDll.DesiredAccess.STANDARD_RIGHTS_READ"/> | <see cref="F:Interop.NtDll.DesiredAccess.SYNCHRONIZE"/>.
            (For directories, <see cref="F:Interop.NtDll.DesiredAccess.FILE_ADD_SUBDIRECTORY"/> | <see cref="F:Interop.NtDll.DesiredAccess.FILE_WRITE_ATTRIBUTES"/> | <see cref="F:Interop.NtDll.DesiredAccess.FILE_ADD_FILE"/> AddFile
            | <see cref="F:Interop.NtDll.DesiredAccess.FILE_WRITE_EA"/> | <see cref="F:Interop.NtDll.DesiredAccess.STANDARD_RIGHTS_READ"/> | <see cref="F:Interop.NtDll.DesiredAccess.SYNCHRONIZE"/>.)
            </summary>
        </member>
        <member name="F:Interop.NtDll.DesiredAccess.FILE_GENERIC_EXECUTE">
            <summary>
            Maps internally to <see cref="F:Interop.NtDll.DesiredAccess.FILE_EXECUTE"/> | <see cref="F:Interop.NtDll.DesiredAccess.FILE_READ_ATTRIBUTES"/> | <see cref="F:Interop.NtDll.DesiredAccess.STANDARD_RIGHTS_EXECUTE"/>
            | <see cref="F:Interop.NtDll.DesiredAccess.SYNCHRONIZE"/>.
            (For directories, <see cref="F:Interop.NtDll.DesiredAccess.FILE_DELETE_CHILD"/> | <see cref="F:Interop.NtDll.DesiredAccess.FILE_READ_ATTRIBUTES"/> | <see cref="F:Interop.NtDll.DesiredAccess.STANDARD_RIGHTS_EXECUTE"/>
            | <see cref="F:Interop.NtDll.DesiredAccess.SYNCHRONIZE"/>.)
            </summary>
        </member>
    </members>
</doc>
