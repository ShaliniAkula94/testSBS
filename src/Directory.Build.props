<?xml version="1.0" encoding="utf-8"?>
<Project DefaultTargets="Build" xmlns="http://schemas.microsoft.com/developer/msbuild/2003">

  <!-- Import the root-level properties. -->
  <Import Project="../build.props" />

  <PropertyGroup>
    <!--
      Force a C# language version of 9.0 regardless of what framework we're
      targeting.

      TODO(ADO.Net-33639): This is unsupported and should be removed.
    -->
    <LangVersion>9.0</LangVersion>
  </PropertyGroup>

  <PropertyGroup>
    <IsSourceProject Condition="$([System.Text.RegularExpressions.Regex]::IsMatch($(MSBuildProjectDirectory), 'src%24'))">true</IsSourceProject>
    <!--
      "ReferenceType" property supports below options:

      "Project" => Build and run tests with Microsoft.Data.SqlClient as Project Reference
      "Package" => Build and run tests with Microsoft.Data.SqlClient as Package Reference with configured "TestMicrosoftDataSqlClientVersion" in "Versions.props" file.

      ************** IMPORTANT NOTE BEFORE PROCEEDING WITH "PACKAGE" REFERENCE TYPE ***************
      CREATE A NUGET PACKAGE WITH BELOW COMMAND AND ADD TO LOCAL FOLDER + UPDATE NUGET CONFIG FILE TO READ FROM THAT LOCATION 
      > msbuild -p:configuration=Release
    -->
    <ReferenceType Condition="$(ReferenceType) == ''">Project</ReferenceType>
    <AllowedOutputExtensionsInPackageBuildOutputFolder>$(AllowedOutputExtensionsInPackageBuildOutputFolder);.pdb</AllowedOutputExtensionsInPackageBuildOutputFolder>
  </PropertyGroup>
  <PropertyGroup Condition="$(BuildForRelease) == 'true'">
    <TargetFrameworkMonikerAssemblyAttributesPath>$([System.IO.Path]::Combine('$(IntermediateOutputPath)','$(TargetFrameworkMoniker).AssemblyAttributes$(DefaultLanguageSourceExtension)'))</TargetFrameworkMonikerAssemblyAttributesPath>
  </PropertyGroup>
  <ItemGroup Condition="$(BuildForRelease) == 'true'">
    <SourceRoot Include="$(MSBuildThisFileDirectory)/"/>
    <EmbeddedFiles Include="$(GeneratedAssemblyInfoFile)"/>
  </ItemGroup>
  <PropertyGroup Condition="$(Configuration.Contains('Debug'))">
    <DefineConstants>$(DefineConstants);DEBUG</DefineConstants>
  </PropertyGroup>
  <PropertyGroup>
    <ProjectDir>$(MSBuildThisFileDirectory)</ProjectDir>
    <Artifacts>$(RepoRoot)artifacts\$(ReferenceType)\</Artifacts>
    <ToolsArtifactsDir Condition="'$(ToolsArtifactsDir)'==''">$(Artifacts)tools\</ToolsArtifactsDir>
    <ManagedSourceCode>$(ProjectDir)Microsoft.Data.SqlClient\</ManagedSourceCode>
    <SqlServerSourceCode>$(ProjectDir)Microsoft.SqlServer.Server\</SqlServerSourceCode>
    <NetCoreSource>$(ManagedSourceCode)netcore\</NetCoreSource>
    <NetCoreResources>$(ManagedSourceCode)src\Resources\</NetCoreResources>
    <ResxFileName>Strings</ResxFileName>
    <ResourceFileName>SqlClient.Resources.$(ResxFileName)</ResourceFileName>
    <GeneratedSourceFileName>$(ResxFileName).ResourceNames.cs</GeneratedSourceFileName>
    <NetFxSource>$(ManagedSourceCode)netfx\</NetFxSource>
    <NetFxResources>$(ManagedSourceCode)src\Resources\</NetFxResources>
    <AddOnsPath>$(ManagedSourceCode)add-ons\</AddOnsPath>
    <SqlServerSource>$(RepoRoot)src\Microsoft.SqlServer.Server\</SqlServerSource>
    <CommonsourceRoot>$(RepoRoot)src\Microsoft.Data.SqlClient\src\</CommonsourceRoot>
    <ObjFolder>$(Artifacts)obj\</ObjFolder>
    <CommonPath>$(NetCoreSource)src\Common\src</CommonPath>
    <CommonTestPath>$(NetCoreSource)src\Common\tests</CommonTestPath>
    <TestsPath>$(ProjectDir)Microsoft.Data.SqlClient\tests\</TestsPath>
    
    <!--
      We seem to be conflating the OS the build is running on with the OSes
      supported by the target framework runtime.  It's not clear why we're
      specifying the absolute path to the bin folder rather than just the base
      and letting the tooling decide what per-target/platform/CPU folders to
      create.

      For the time being, we will keep the existing folder structure, but
      instead of using the OS to decide the folder, we will use the target
      framework.  Additionally, the strange OSGroup 'AnyOS' value is used as
      an override.
    -->
    <BinFolder Condition="$(TargetsNetFx)">$(Artifacts)bin\Windows_NT\</BinFolder>
    <BinFolder Condition="! $(TargetsNetFx)">$(Artifacts)bin\Unix\</BinFolder>
    <BinFolder Condition="'$(OSGroup)' == 'AnyOS'">$(Artifacts)bin\AnyOS\</BinFolder>
    
    <PackagesDir Condition="'$(PackagesDir)'==''">$(RepoRoot)packages\</PackagesDir>
    <NuGetRoot Condition="'$(NuGetRoot)' == ''">$(RepoRoot).nuget\</NuGetRoot>
    <NuGetCmd>$(NuGetRoot)nuget.exe</NuGetCmd>
    <TreatWarningsAsErrors>true</TreatWarningsAsErrors>
    <WarningsNotAsErrors>$(WarningsNotAsErrors);NU1901;NU1902;NU1903;NU1904;NU1905</WarningsNotAsErrors>
    <BuildSimulator Condition="'$(BuildSimulator)' != 'true'">false</BuildSimulator>
  </PropertyGroup>
  <PropertyGroup Condition="'$(BuildSimulator)' == 'true'">
    <DefineConstants>$(DefineConstants);ENCLAVE_SIMULATOR</DefineConstants>
  </PropertyGroup>
  
  <!-- Audit Settings -->
  <PropertyGroup>
    <NuGetAuditMode>all</NuGetAuditMode>
  </PropertyGroup>

  <!-- Packaging  for source link-->
  <PropertyGroup>
    <DebugType>portable</DebugType>
    <DebugSymbols>true</DebugSymbols>
    <GeneratePackageOnBuild>false</GeneratePackageOnBuild>
    <PublishRepositoryUrl>true</PublishRepositoryUrl>
    <EmbedUnTrackedSources>true</EmbedUnTrackedSources>
    <DisableSourceLinkTranslation Condition="'$(DisableSourceLinkTranslation)' == ''">false</DisableSourceLinkTranslation>
  </PropertyGroup>
  <PropertyGroup Condition="'$(TF_BUILD)' == 'true'">
    <ContinuousIntegrationBuild>true</ContinuousIntegrationBuild>
  </PropertyGroup>  

  <!-- Fix GetTargetPath issues - see https://github.com/dotnet/msbuild/issues/4303#issuecomment-482345617 -->
  <PropertyGroup>
    <AddSyntheticProjectReferencesForSolutionDependencies>false</AddSyntheticProjectReferencesForSolutionDependencies>
  </PropertyGroup>

  <!--
    Build runtimes other than .NET Framework require the .NET Framework
    reference assemblies.
    
    MSBuildRuntimeType 'Full' means the build is running via .NET Framework
    tooling, and the reference assemblies are already available.

    Any other value means we need to explicitly add the reference assemblies.
  -->
  <ItemGroup Condition="$(MSBuildRuntimeType) != 'Full'">
    <PackageReference
      Include="Microsoft.NETFramework.ReferenceAssemblies"
      Version="$(MicrosoftNETFrameworkReferenceAssembliesVersion)">
      <PrivateAssets>all</PrivateAssets>
      <IncludeAssets>runtime; build; native; contentfiles; analyzers</IncludeAssets>
    </PackageReference>
  </ItemGroup>
</Project>
