<?xml version="1.0"?>
<docs>
  <members name="SqlBatch">
    <SqlBatch>
      <summary></summary>
      <remarks>
        <format type="text/markdown">
          <![CDATA[
## Examples
The following example creates a <xref:Microsoft.Data.SqlClient.SqlConnection> and a <xref:Microsoft.Data.SqlClient.SqlBatch>, then adds multiple <xref:Microsoft.Data.SqlClient.SqlBatchCommand> objects to the batch. It then executes the batch, creating a <xref:Microsoft.Data.SqlClient.SqlDataReader>. The example reads through the results of the batch commands, writing them to the console. Finally, the example closes the <xref:Microsoft.Data.SqlClient.SqlDataReader> and then the <xref:Microsoft.Data.SqlClient.SqlConnection> as the `using` blocks fall out of scope.

[!code-csharp[SqlCommand Example#1](~/../sqlclient/doc/samples/SqlBatch_ExecuteReader.cs#1)]
]]>
        </format>
      </remarks>
    </SqlBatch>
    <ctor1>
      <summary>
        Initializes a new <see cref="SqlBatch"/>.
      </summary>
      <value></value>
      <remarks>
        <format type="text/markdown">
          <![CDATA[
## Examples
The following example creates a <xref:Microsoft.Data.SqlClient.SqlConnection> and a <xref:Microsoft.Data.SqlClient.SqlBatch>, then adds multiple <xref:Microsoft.Data.SqlClient.SqlBatchCommand> objects to the batch. It then executes the batch, creating a <xref:Microsoft.Data.SqlClient.SqlDataReader>. The example reads through the results of the batch commands, writing them to the console. Finally, the example closes the <xref:Microsoft.Data.SqlClient.SqlDataReader> and then the <xref:Microsoft.Data.SqlClient.SqlConnection> as the `using` blocks fall out of scope.

[!code-csharp[SqlCommand Example#1](~/../sqlclient/doc/samples/SqlBatch_ExecuteReader.cs#1)]
]]>
        </format>
      </remarks>
    </ctor1>
    <ctor2>
      <summary>Initializes a new <see cref="SqlBatch"/>.
      </summary>
      <param name="connection">
        A
        <see cref="T:Microsoft.Data.SqlClient.SqlConnection" />
        that represents the connection to an instance of SQL Server.
      </param>
      <param name="transaction">
        The
        <see cref="T:Microsoft.Data.SqlClient.SqlTransaction" />
        in which the
        <see cref="T:Microsoft.Data.SqlClient.SqlCommand" />
        executes.
      </param>
      <remarks>
        <format type="text/markdown">
          <![CDATA[
]]>
        </format>
      </remarks>
    </ctor2>
    <Connection>
      <summary>
        Gets or sets the
        <see cref="T:Microsoft.Data.SqlClient.SqlConnection" />
        used by this instance of the
        <see cref="T:Microsoft.Data.SqlClient.SqlBatch" />
        .
      </summary>
      <remarks>
        <format type="text/markdown">
          <![CDATA[
]]>
        </format>
      </remarks>
    </Connection>
    <Transaction>
      <summary>Gets or sets the <see cref="T:Microsoft.Data.SqlClient.SqlTransaction" /> within which the <see cref="T:Microsoft.Data.SqlClient.SqlBatch" /> commands execute.</summary>
      <remarks>
        <format type="text/markdown">
          <![CDATA[
]]>
        </format>
      </remarks>
    </Transaction>
    <BatchCommands>
      <summary>
        The list of commands contained in the batch in a <see cref="T:Microsoft.Data.SqlClient.SqlBatchCommandCollection" />.
      </summary>
      <remarks>
        <format type="text/markdown">
          <![CDATA[
## Examples
The following example creates a <xref:Microsoft.Data.SqlClient.SqlConnection> and a <xref:Microsoft.Data.SqlClient.SqlBatch>, then adds multiple <xref:Microsoft.Data.SqlClient.SqlBatchCommand> objects to the batch. It then executes the batch, creating a <xref:Microsoft.Data.SqlClient.SqlDataReader>. The example reads through the results of the batch commands, writing them to the console. Finally, the example closes the <xref:Microsoft.Data.SqlClient.SqlDataReader> and then the <xref:Microsoft.Data.SqlClient.SqlConnection> as the `using` blocks fall out of scope.

[!code-csharp[SqlCommand Example#1](~/../sqlclient/doc/samples/SqlBatch_ExecuteReader.cs#1)]
]]>
        </format>
      </remarks>
    </BatchCommands>
    <Commands>
      <summary>
        The list of commands contained in the batch in a 
        <see cref="T:System.Collections.IList"/> of
        <see cref="T:Microsoft.Data.SqlClient.SqlBatchCommand"/> objects.
      </summary>
      <remarks>
        <format type="text/markdown"></format>
      </remarks>
    </Commands>
    <ExecuteReader>
      <summary>
        Sends the
        <see cref="P:Microsoft.Data.SqlClient.SqlBatch.Commands" />
        to the
        <see cref="P:Microsoft.Data.SqlClient.SqlCommand.Connection" />
        and builds a
        <see cref="T:Microsoft.Data.SqlClient.SqlDataReader" />
        .
      </summary>
      <remarks>
        <format type="text/markdown">
          <![CDATA[
## Examples
The following example creates a <xref:Microsoft.Data.SqlClient.SqlConnection> and a <xref:Microsoft.Data.SqlClient.SqlBatch>, then adds multiple <xref:Microsoft.Data.SqlClient.SqlBatchCommand> objects to the batch. It then executes the batch, creating a <xref:Microsoft.Data.SqlClient.SqlDataReader>. The example reads through the results of the batch commands, writing them to the console. Finally, the example closes the <xref:Microsoft.Data.SqlClient.SqlDataReader> and then the <xref:Microsoft.Data.SqlClient.SqlConnection> as the `using` blocks fall out of scope.

[!code-csharp[SqlCommand Example#1](~/../sqlclient/doc/samples/SqlBatch_ExecuteReader.cs#1)]
]]>
        </format>
      </remarks>
    </ExecuteReader>
    <ExecuteReaderAsync>
      <summary>
        An asynchronous version of
        <see cref="M:Microsoft.Data.SqlClient.SqlBatch.ExecuteReader"/>
        , which sends the
        <see cref="P:Microsoft.Data.SqlClient.SqlBatch.Commands"/>
        to the
        <see cref="P:Microsoft.Data.SqlClient.SqlBatch.Connection"/>
        and builds a
        <see cref="T:Microsoft.Data.SqlClient.SqlDataReader"/>.
        Exceptions will be reported via the returned Task object.
      </summary>
      <remarks>
        <format type="text/markdown">
          <![CDATA[
]]>
        </format>
      </remarks>
    </ExecuteReaderAsync>
    <Timeout>
      <summary>Gets or sets the wait time (in seconds) before terminating the attempt to execute the batch and generating an error.</summary>
      <value>The time in seconds to wait for the batch to execute.</value>
    </Timeout>
    <ExecuteNonQueryAsync>
      <param name="cancellationToken">A token to cancel the asynchronous operation.</param>
      <summary>This is the asynchronous version of <see cref="M:System.Data.Common.DbBatch.ExecuteNonQuery" />. Providers should override with an appropriate implementation. The cancellation token may optionally be ignored.  
  
The default implementation invokes the synchronous <see cref="M:System.Data.Common.DbBatch.ExecuteNonQuery" /> method and returns a completed task, blocking the calling thread. The default implementation will return a cancelled task if passed an already cancelled cancellation token.  Exceptions thrown by <see cref="M:System.Data.Common.DbBatch.ExecuteNonQuery" /> will be communicated via the returned Task Exception property.  
  
Do not invoke other methods and properties of the <see langword="DbCommand" /> object until the returned Task is complete.</summary>
      <returns>A task representing the asynchronous operation.</returns>
    </ExecuteNonQueryAsync>
    <ExecuteScalarAsync>
      <param name="cancellationToken">To be added.</param>
      <summary>An asynchronous version, which executes the batch against its connection, returning a <see cref="T:System.Data.Common.DbDataReader" /> which can be used to access the results.</summary>
      <returns>A task representing the asynchronous operation.</returns>
    </ExecuteScalarAsync>
    <PrepareAsync>
      <param name="cancellationToken">An optional token to cancel the asynchronous operation. The default value is <see cref="P:System.Threading.CancellationToken.None" />.</param>
      <summary>Asynchronously creates a prepared (or compiled) version of the batch, or of each of its commands, on the data source.</summary>
      <returns>A <see cref="T:System.Threading.Tasks.Task" /> representing the asynchronous operation.</returns>
      <remarks>This method stores in the task it returns all non-usage exceptions that the method's synchronous counterpart can throw. If an exception is stored into the returned task, that exception will be thrown when the task is awaited. Usage exceptions, such as <see cref="T:System.ArgumentException" />, are still thrown synchronously. For the stored exceptions, see the exceptions thrown by <see cref="M:System.Data.Common.DbBatch.Prepare" />.</remarks>
    </PrepareAsync>
    <ExecuteDbDataReader>
        <param name="behavior">An instance of <see cref="T:System.Data.CommandBehavior" />, specifying options for batch execution and data retrieval.</param>
        <summary>When overridden in a derived class, executes the batch against its connection, returning a <see cref="T:System.Data.Common.DbDataReader" /> which can be used to access the results.</summary>
        <returns>A <see cref="T:System.Data.Common.DbDataReader" /> object.</returns>    
    </ExecuteDbDataReader>
    <ExecuteDbDataReaderAsync>
        <param name="behavior">One of the enumeration values that specifies options for batch execution and data retrieval.</param>
        <param name="cancellationToken">A token to cancel the asynchronous operation.</param>
        <summary>Providers should implement this method to provide a non-default implementation.  
  
 The default implementation invokes the synchronous method and returns a completed task, blocking the calling thread. 
 The default implementation will return a cancelled task if passed an already cancelled cancellation token. 
 Exceptions thrown by ExecuteReader will be communicated via the returned Task Exception property.  
  
 This method accepts a cancellation token that can be used to request the operation to be cancelled early. Implementations may ignore this request.</summary>
        <returns>A task representing the asynchronous operation.</returns>    
    </ExecuteDbDataReaderAsync>  
  </members>
</docs>
