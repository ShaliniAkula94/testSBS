<xml version="1.0">
	<docs>
		<members name="SqlCommandBuilder">
			<SqlCommandBuilder>
				<summary>
					Automatically generates single-table commands that are used to reconcile changes made to a
					<see cref="T:System.Data.DataSet" />
					with the associated SQL Server database. This class cannot be inherited.
				</summary>
				<remarks>
					<format type="text/markdown">
						<![CDATA[
						## Remarks
						The <xref:Microsoft.Data.SqlClient.SqlDataAdapter> does not automatically generate the Transact-SQL statements required to reconcile changes made to a <xref:System.Data.DataSet> with the associated instance of SQL Server. However, you can create a <xref:Microsoft.Data.SqlClient.SqlCommandBuilder> object to automatically generate Transact-SQL statements for single-table updates if you set the <xref:Microsoft.Data.SqlClient.SqlDataAdapter.SelectCommand%2A> property of the <xref:Microsoft.Data.SqlClient.SqlDataAdapter>. Then, any additional Transact-SQL statements that you do not set are generated by the <xref:Microsoft.Data.SqlClient.SqlCommandBuilder>.
						
						The <xref:Microsoft.Data.SqlClient.SqlCommandBuilder> registers itself as a listener for <xref:Microsoft.Data.SqlClient.SqlDataAdapter.RowUpdating> events whenever you set the <xref:Microsoft.Data.SqlClient.SqlCommandBuilder.DataAdapter%2A> property. You can only associate one <xref:Microsoft.Data.SqlClient.SqlDataAdapter> or <xref:Microsoft.Data.SqlClient.SqlCommandBuilder> object with each other at one time.
						
						To generate INSERT, UPDATE, or DELETE statements, the <xref:Microsoft.Data.SqlClient.SqlCommandBuilder> uses the <xref:Microsoft.Data.SqlClient.SqlDataAdapter.SelectCommand%2A> property to retrieve a required set of metadata automatically. If you change the <xref:Microsoft.Data.SqlClient.SqlDataAdapter.SelectCommand%2A> after the metadata has been retrieved, such as after the first update, you should call the <xref:Microsoft.Data.Common.DbCommandBuilder.RefreshSchema%2A> method to update the metadata.
						
						The `SelectCommand` must also return at least one primary key or unique column. If none are present, an **InvalidOperation** exception is generated, and the commands are not generated.
						
						The <xref:Microsoft.Data.SqlClient.SqlCommandBuilder> also uses the <xref:Microsoft.Data.SqlClient.SqlCommand.Connection%2A>, <xref:Microsoft.Data.SqlClient.SqlCommand.CommandTimeout%2A>, and <xref:Microsoft.Data.SqlClient.SqlCommand.Transaction%2A> properties referenced by the <xref:Microsoft.Data.SqlClient.SqlDataAdapter.SelectCommand%2A>. The user should call <xref:Microsoft.Data.Common.DbCommandBuilder.RefreshSchema%2A> if one or more of these properties are modified, or if the <xref:Microsoft.Data.SqlClient.SqlDataAdapter.SelectCommand%2A> itself is replaced. Otherwise the <xref:Microsoft.Data.SqlClient.SqlDataAdapter.InsertCommand%2A>, <xref:Microsoft.Data.SqlClient.SqlDataAdapter.UpdateCommand%2A>, and <xref:Microsoft.Data.SqlClient.SqlDataAdapter.DeleteCommand%2A> properties retain their previous values.
						
						If you call <xref:System.ComponentModel.Component.Dispose%2A>, the <xref:Microsoft.Data.SqlClient.SqlCommandBuilder> is disassociated from the <xref:Microsoft.Data.SqlClient.SqlDataAdapter>, and the generated commands are no longer used.
						
						
						## Examples
						The following example uses the <xref:Microsoft.Data.SqlClient.SqlCommand>, along <xref:Microsoft.Data.SqlClient.SqlDataAdapter> and <xref:Microsoft.Data.SqlClient.SqlConnection>, to select rows from a data source. The example is passed a connection string, a query string that is a Transact-SQL SELECT statement, and a string that is the name of the database table. The example then creates a <xref:Microsoft.Data.SqlClient.SqlCommandBuilder>.
						
						[!code-csharp[Classic WebData SqlCommandBuilder#1](~/samples/snippets/csharp/VS_Snippets_ADO.NET/Classic WebData SqlCommandBuilder/CS/Source.cs#1)]
						]]>
					</format>
				</remarks>
			</SqlCommandBuilder>
		</members>
	</docs>
</xml>
