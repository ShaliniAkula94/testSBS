<docs>
  <members name="SqlAuthenticationProvider">
    <SqlAuthenticationProvider>
      <summary>Defines the core behavior of authentication providers and provides a base class for derived classes.</summary>
      <remarks>
        Derived classes must provide a parameterless constructor if they can be instantiated from the app.config file.
      </remarks>
      <example>
        The following example demonstrates implementing a custom SqlAuthenticationProvider and providing the same to SqlClient for overriding Device Code Flow authentication mode:
        <code language="c#">
          using System;
          using System.Threading.Tasks;
          using Microsoft.Identity.Client;
          using Microsoft.Data.SqlClient;
          
          namespace CustomAuthenticationProviderExamples
          {
              /// &lt;summary&gt;
              /// Example demonstrating creating a custom device code flow authentication provider and attaching it to the driver.
              /// This is helpful for applications that wish to override the Callback for the Device Code Result implemented by the SqlClient driver.
              /// &lt;/summary&gt;
              public class CustomDeviceCodeFlowAzureAuthenticationProvider : SqlAuthenticationProvider
              {
                  public override async Task&lt;SqlAuthenticationToken&gt; AcquireTokenAsync(SqlAuthenticationParameters parameters)
                  {
                      const string ClientId = "my-client-id";
                      const string ClientName = "My Application Name";
                      const string DefaultScopeSuffix = "/.default";

                      string[] scopes = [ parameters.Resource.EndsWith(DefaultScopeSuffix) ? parameters.Resource : parameters.Resource + DefaultScopeSuffix ];

                      IPublicClientApplication app = PublicClientApplicationBuilder.Create(ClientId)
                          .WithAuthority(parameters.Authority)
                          .WithClientName(ClientName)
                          .WithRedirectUri("https://login.microsoftonline.com/common/oauth2/nativeclient")
                          .Build();
                      using CancellationTokenSource connectionTimeoutCancellation = new CancellationTokenSource(TimeSpan.FromSeconds(parameters.ConnectionTimeout));

                      AuthenticationResult result = await app.AcquireTokenWithDeviceCode(scopes, CustomDeviceFlowCallback)
                          .ExecuteAsync(connectionTimeoutCancellation.Token);
                      return new SqlAuthenticationToken(result.AccessToken, result.ExpiresOn);
                  }

                  public override bool IsSupported(SqlAuthenticationMethod authenticationMethod) =>
                      authenticationMethod.Equals(SqlAuthenticationMethod.ActiveDirectoryDeviceCodeFlow);

                  private Task CustomDeviceFlowCallback(DeviceCodeResult result)
                  {
                      Console.WriteLine(result.Message);
                      return Task.CompletedTask;
                  }
              }

              public class Program
              {
                  public static void Main()
                  {
                      // Register our custom authentication provider class to override Active Directory Device Code Flow
                      SqlAuthenticationProvider.SetProvider(SqlAuthenticationMethod.ActiveDirectoryDeviceCodeFlow, new CustomDeviceCodeFlowAzureAuthenticationProvider());
                      using (SqlConnection sqlConnection = new SqlConnection("Server=&lt;myserver&gt;.database.windows.net;Authentication=Active Directory Device Code Flow;Database=&lt;db&gt;;"))
                      {
                          sqlConnection.Open();
                          Console.WriteLine("Connected successfully!");
                      }
                  }
              }
          }
        </code>
      </example>
    </SqlAuthenticationProvider>
    <ctor>
      <summary>
        Called from constructors in derived classes to initialize the <see cref="T:Microsoft.Data.SqlClient.SqlAuthenticationProvider" /> class.
      </summary>
    </ctor>
    <GetProvider>
      <param name="authenticationMethod">The authentication method.</param>
      <summary>Gets an authentication provider by method.</summary>
      <returns>The authentication provider or <see langword="null" /> if not found.</returns>
    </GetProvider>
    <SetProvider>
      <param name="authenticationMethod">The authentication method.</param>
      <param name="provider">The authentication provider.</param>
      <summary>Sets an authentication provider by method.</summary>
      <returns>
        <see langword="true" /> if the operation succeeded; otherwise, <see langword="false" /> (for example, the existing provider disallows overriding).
      </returns>
    </SetProvider>
    <BeforeLoad>
      <param name="authenticationMethod">The authentication method.</param>
      <summary>This method is called immediately before the provider is added to SQL authentication provider registry.</summary>
      <remarks>
        Avoid performing long-waiting tasks in this method, since it can block other threads from accessing the provider registry.
      </remarks>
    </BeforeLoad>
    <BeforeUnload>
      <param name="authenticationMethod">The authentication method.</param>
      <summary>This method is called immediately before the provider is removed from the SQL authentication provider registry.</summary>
      <remarks>
        For example, this method is called when a different provider with the same authentication method overrides this provider in the SQL authentication provider registry. Avoid performing long-waiting task in this method, since it can block other threads from accessing the provider registry.
      </remarks>
    </BeforeUnload>
    <IsSupported>
      <param name="authenticationMethod">The authentication method.</param>
      <summary>Indicates whether the specified authentication method is supported.</summary>
      <returns>
        <see langword="true" /> if the specified authentication method is supported; otherwise, <see langword="false" />.
      </returns>
    </IsSupported>
    <AcquireTokenAsync>
      <param name="parameters">The Active Directory authentication parameters passed by the driver to authentication providers.</param>
      <summary>Acquires a security token from the authority.</summary>
      <returns>Represents an asynchronous operation that returns the AD authentication token.</returns>
    </AcquireTokenAsync>
  </members>
</docs>
