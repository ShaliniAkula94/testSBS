
<docs>
  <members name="SqlException">
    <SqlException>
      <summary>
        The exception that is thrown when SQL Server returns a warning or error. This class cannot be inherited.
      </summary>
      <remarks>
        <para>
          ## Remarks    This class is created whenever the .NET Framework Data Provider for SQL Server encounters an error generated from the server. (Client side errors are thrown as standard common language runtime exceptions.) <see cref="Microsoft.Data.SqlClient.SqlException" /> always contains at least one instance of <see cref="Microsoft.Data.SqlClient.SqlError" /> .       Messages that have a severity level of 10 or less are informational and indicate problems caused by mistakes in information that a user has entered. Severity levels from 11 through 16 are generated by the user, and can be corrected by the user. Severity levels from 17 through 25 indicate software or hardware errors. When a level 17, 18, or 19 error occurs, you can continue working, although you might not be able to execute a particular statement.       The <see cref="Microsoft.Data.SqlClient.SqlConnection" /> remains open when the severity level is 19 or less. When the severity level is 20 or greater, the server ordinarily closes the <see cref="Microsoft.Data.SqlClient.SqlConnection" /> . However, the user can reopen the connection and continue. In both cases, a <see cref="Microsoft.Data.SqlClient.SqlException" /> is generated by the method executing the command.       For information about the warning and informational messages sent by SQL Server, see <see href="/sql/relational-databases/errors-events/database-engine-events-and-errors">
            Database Engine Events and Errors
          </see> . The <see cref="Microsoft.Data.SqlClient.SqlException" /> class maps to SQL Server severity.       The following is general information on handling exceptions. Your code should catch exceptions to prevent the application from crashing and to allow displaying a relevant error message to the user.  You can use database transactions to ensure that the data is consistent regardless of what happens in the client application (including a crash). Features like System.Transaction.TransactionScope or the BeginTransaction method (in System.Data.OleDb.OleDbConnection, System.Data.ODBC.ODBCConnection, and Microsoft.Data.SqlClient.SqlConnection) ensure consistent data regardless of exceptions raised by a provider. Transactions can fail, so catch failures and retry the transaction.       Note that beginning with .NET Framework 4.5, <see cref="Microsoft.Data.SqlClient.SqlException" /> can return an inner <see cref="System.ComponentModel.Win32Exception" /> .       The exception class of a .NET Framework data provider reports provider-specific errors. For example System.Data.Odbc has OdbcException, System.Data.OleDb has OleDbException, and Microsoft.Data.SqlClient has SqlException. For the best level of error detail, catch these exceptions and use the members of these exception classes to get details of the error.       In addition to the provider-specific errors, .NET Framework data provider types can raise .NET Framework exceptions such as System.OutOfMemoryException and System.Threading.ThreadAbortException. Recovery from these exceptions may not be possible.       Bad input can cause a .NET Framework data provider type to raise an exception such as System.ArgumentException or System.IndexOutOfRangeException.  Calling a method at the wrong time can raise System.InvalidOperationException.       So, in general, write an exception handler that catches any provider specific exceptions as well as exceptions from the common language runtime.  These can be layered as follows: <c>
            `
          </c> csharp   try {      // code here   }   catch (SqlException odbcEx) {      // Handle more specific SqlException exception here.   }   catch (Exception ex) {      // Handle generic ones here.   } <c>
            `
          </c> Or: <c>
            `
          </c> csharp   try {      // code here   }   catch (Exception ex) {      if (ex is SqlException) {         // Handle more specific SqlException exception here.      }      else {         // Handle generic ones here.      }   } <c>
            `
          </c> It is also possible for a .NET Framework data provider method call to fail on a thread pool thread with no user code on the stack. In this case, and when using asynchronous method calls, you must register the <see cref="System.AppDomain.UnhandledException" /> event to handle those exceptions and avoid application crash.             ## Examples    The following example generates a <see cref="Microsoft.Data.SqlClient.SqlException" /> and then displays the exception. <see href="~/../sqlclient/doc/samples/SqlException_Errors1.cs#1">
            !code-csharp[SqlException_Errors1 Example#1
          </see> ]
        </para>
      </remarks>
      <altmember cref="T:Microsoft.Data.SqlClient.SqlError" />
      <altmember cref="T:Microsoft.Data.SqlClient.SqlErrorCollection" />
    </SqlException>
    <Class>
      <summary>
        Gets the severity level of the error returned from the .NET Framework Data Provider for SQL Server.
      </summary>
      <value>
        A value from 1 to 25 that indicates the severity level of the error.
      </value>
      <remarks>
        <para>
          ## Remarks    Messages that have a severity level of 10 or less are informational and indicate problems caused by mistakes in information that a user has entered. Severity levels from 11 through 16 are generated by the user, and can be corrected by the user. Severity levels from 17 through 25 indicate software or hardware errors. When a level 17, 18, or 19 error occurs, you can continue working, although you might not be able to execute a particular statement.       The <see cref="Microsoft.Data.SqlClient.SqlConnection" /> remains open when the severity level is 19 or less. When the severity level is 20 or greater, the server ordinarily closes the <see cref="Microsoft.Data.SqlClient.SqlConnection" /> . However, the user can reopen the connection and continue. In both cases, a <see cref="Microsoft.Data.SqlClient.SqlException" /> is generated by the method executing the command.       For information about the warning and informational messages sent by SQL Server, see the Troubleshooting section of the SQL Server documentation.       This is a wrapper for the <see cref="Microsoft.Data.SqlClient.SqlError.Class%2A" /> property of the first <see cref="Microsoft.Data.SqlClient.SqlError" /> in the <see cref="Microsoft.Data.SqlClient.SqlException.Errors%2A" /> property.
        </para>
        <para>
          If <see cref="Microsoft.Data.SqlClient.SqlException.Errors%2A" /> is <c>
            null
          </c> , the <see href="https://docs.microsoft.com/dotnet/csharp/language-reference/builtin-types/default-values"> <c>
              default
            </c>
          </see> value for <c>
            byte
          </c> is returned.
        </para>
        <para>
          ## Examples    The following example displays each <see cref="Microsoft.Data.SqlClient.SqlError" /> within the <see cref="Microsoft.Data.SqlClient.SqlErrorCollection" /> collection. <see href="~/../sqlclient/doc/samples/SqlException_Errors2.cs#1">
            !code-csharp[SqlException_Errors2 Example#1
          </see> ]
        </para>
      </remarks>
      <altmember cref="P:Microsoft.Data.SqlClient.SqlException.Number" />
      <altmember cref="P:Microsoft.Data.SqlClient.SqlException.Source" />
      <altmember cref="P:Microsoft.Data.SqlClient.SqlException.State" />
      <altmember cref="P:Microsoft.Data.SqlClient.SqlException.Server" />
      <altmember cref="P:Microsoft.Data.SqlClient.SqlException.Procedure" />
      <altmember cref="P:Microsoft.Data.SqlClient.SqlException.LineNumber" />
    </Class>
    <ClientConnectionId>
      <summary>
        Represents the client connection ID. For more information, see <see href="https://docs.microsoft.com/sql/connect/ado-net/data-tracing">
          Data Tracing in ADO.NET
        </see> .
      </summary>
      <value>
        The client connection ID.
      </value>
      <remarks>
        <para>
          ## Remarks    For a code sample, see <see cref="Microsoft.Data.SqlClient.SqlException.ToString%2A" /> .
        </para>
      </remarks>
    </ClientConnectionId>
    <Errors>
      <summary>
        Gets a collection of one or more <see cref="T:Microsoft.Data.SqlClient.SqlError" /> objects that give detailed information about exceptions generated by the .NET Framework Data Provider for SQL Server.
      </summary>
      <value>
        The collected instances of the <see cref="T:Microsoft.Data.SqlClient.SqlError" /> class.
      </value>
      <remarks>
        <para>
          ## Remarks    The <see cref="Microsoft.Data.SqlClient.SqlErrorCollection" /> class always contains at least one instance of the <see cref="Microsoft.Data.SqlClient.SqlError" /> class.       This is a wrapper for <see cref="Microsoft.Data.SqlClient.SqlErrorCollection" /> . For more information on SQL Server engine errors, see <see href="/sql/relational-databases/errors-events/database-engine-events-and-errors">
            Database Engine Events and Errors
          </see> .             ## Examples    The following example displays each <see cref="Microsoft.Data.SqlClient.SqlError" /> within the <see cref="Microsoft.Data.SqlClient.SqlErrorCollection" /> collection. <see href="~/../sqlclient/doc/samples/SqlError_ToString.cs#1">
            !code-csharp[SqlError_ToString Example#1
          </see> ]
        </para>
      </remarks>
      <altmember cref="T:Microsoft.Data.SqlClient.SqlErrorCollection" />
      <altmember cref="T:Microsoft.Data.SqlClient.SqlError" />
    </Errors>
    <GetObjectData>
      <inheritdoc cref="System.Exception.GetObjectData" />
    </GetObjectData>
    <LineNumber>
      <summary>
        Gets the line number within the Transact-SQL command batch or stored procedure that generated the error.
      </summary>
      <value>
        The line number within the Transact-SQL command batch or stored procedure that generated the error.
      </value>
      <remarks>
        <para>
          ## Remarks    The line numbering starts at 1; if 0 is returned, the line number is not applicable.       This is a wrapper for the <see cref="Microsoft.Data.SqlClient.SqlError.LineNumber%2A" /> property of the first <see cref="Microsoft.Data.SqlClient.SqlError" /> in the <see cref="Microsoft.Data.SqlClient.SqlException.Errors%2A" /> property.          If <see cref="Microsoft.Data.SqlClient.SqlException.Errors%2A" /> is <c>
            null
          </c> , the <see href="https://docs.microsoft.com/dotnet/csharp/language-reference/builtin-types/default-values"> <c>
              default
            </c>
          </see> value for <c>
            int
          </c> is returned.
        </para>
        <para>
          ## Examples    The following example displays each <see cref="Microsoft.Data.SqlClient.SqlError" /> within the <see cref="Microsoft.Data.SqlClient.SqlErrorCollection" /> collection. <see href="~/../sqlclient/doc/samples/SqlException_Errors2.cs#1">
            !code-csharp[SqlException_Errors2 Example#1
          </see> ]
        </para>
      </remarks>
      <altmember cref="P:Microsoft.Data.SqlClient.SqlException.Number" />
      <altmember cref="P:Microsoft.Data.SqlClient.SqlException.Source" />
      <altmember cref="P:Microsoft.Data.SqlClient.SqlException.State" />
      <altmember cref="P:Microsoft.Data.SqlClient.SqlException.Class" />
      <altmember cref="P:Microsoft.Data.SqlClient.SqlException.Server" />
      <altmember cref="P:Microsoft.Data.SqlClient.SqlException.Procedure" />
    </LineNumber>
    <Message>
      <summary>
        Gets the text describing the error.
      </summary>
      <value>
        The text describing the error.
      </value>
      <remarks>
        To be added.
      </remarks>
    </Message>
    <Number>
      <summary>
        Gets a number that identifies the type of error.
      </summary>
      <value>
        The number that identifies the type of error.
      </value>
      <remarks>
        <para>
          ## Remarks    This is a wrapper for the <see cref="Microsoft.Data.SqlClient.SqlError.Number%2A" /> property of the first <see cref="Microsoft.Data.SqlClient.SqlError" /> in the <see cref="Microsoft.Data.SqlClient.SqlException.Errors%2A" /> property.     If <see cref="Microsoft.Data.SqlClient.SqlException.Errors%2A" /> is <c>
            null
          </c> , the <see href="https://docs.microsoft.com/dotnet/csharp/language-reference/builtin-types/default-values"> <c>
              default
            </c>
          </see> value for <c>
            int
          </c> is returned.      For more information on SQL Server engine errors, see <see href="/sql/relational-databases/errors-events/database-engine-events-and-errors">
            Database Engine Events and Errors
          </see> .             ## Examples    The following example displays each <see cref="Microsoft.Data.SqlClient.SqlError" /> within the <see cref="Microsoft.Data.SqlClient.SqlErrorCollection" /> collection. <see href="~/../sqlclient/doc/samples/SqlException_Errors2.cs#1">
            !code-csharp[SqlException_Errors2 Example#1
          </see> ]
        </para>
      </remarks>
      <altmember cref="P:Microsoft.Data.SqlClient.SqlException.State" />
      <altmember cref="P:Microsoft.Data.SqlClient.SqlException.Class" />
      <altmember cref="P:Microsoft.Data.SqlClient.SqlException.Source" />
      <altmember cref="P:Microsoft.Data.SqlClient.SqlException.Server" />
      <altmember cref="P:Microsoft.Data.SqlClient.SqlException.Procedure" />
      <altmember cref="P:Microsoft.Data.SqlClient.SqlException.LineNumber" />
    </Number>
    <Procedure>
      <summary>
        Gets the name of the stored procedure or remote procedure call (RPC) that generated the error.
      </summary>
      <value>
        The name of the stored procedure or RPC.
      </value>
      <remarks>
        <para>
          ## Remarks    This is a wrapper for the <see cref="Microsoft.Data.SqlClient.SqlError.Procedure%2A" /> property of the first <see cref="Microsoft.Data.SqlClient.SqlError" /> in the <see cref="Microsoft.Data.SqlClient.SqlException.Errors%2A" /> property.     If <see cref="Microsoft.Data.SqlClient.SqlException.Errors%2A" /> is <c>
            null
          </c> , the <see href="https://docs.microsoft.com/dotnet/csharp/language-reference/builtin-types/default-values"> <c>
              default
            </c>
          </see> value for <c>
            string
          </c> is returned.          ## Examples    The following example displays each <see cref="Microsoft.Data.SqlClient.SqlError" /> within the <see cref="Microsoft.Data.SqlClient.SqlErrorCollection" /> collection. <see href="~/../sqlclient/doc/samples/SqlException_Errors2.cs#1">
            !code-csharp[SqlException_Errors2 Example#1
          </see> ]
        </para>
      </remarks>
      <altmember cref="P:Microsoft.Data.SqlClient.SqlException.Number" />
      <altmember cref="P:Microsoft.Data.SqlClient.SqlException.State" />
      <altmember cref="P:Microsoft.Data.SqlClient.SqlException.Class" />
      <altmember cref="P:Microsoft.Data.SqlClient.SqlException.Server" />
      <altmember cref="P:Microsoft.Data.SqlClient.SqlException.Source" />
      <altmember cref="P:Microsoft.Data.SqlClient.SqlException.LineNumber" />
    </Procedure>
    <Server>
      <summary>
        Gets the name of the computer that is running an instance of SQL Server that generated the error.
      </summary>
      <value>
        The name of the computer running an instance of SQL Server.
      </value>
      <remarks>
        <para>
          ## Remarks    This is a wrapper for the <see cref="Microsoft.Data.SqlClient.SqlError.Server%2A" /> property of the first <see cref="Microsoft.Data.SqlClient.SqlError" /> in the <see cref="Microsoft.Data.SqlClient.SqlException.Errors%2A" /> property.
        </para>
        <para>
          If <see cref="Microsoft.Data.SqlClient.SqlException.Errors%2A" /> is <c>
            null
          </c> , the <see href="https://docs.microsoft.com/dotnet/csharp/language-reference/builtin-types/default-values"> <c>
              default
            </c>
          </see> value for <c>
            string
          </c> is returned.        ## Examples    The following example displays each <see cref="Microsoft.Data.SqlClient.SqlError" /> within the <see cref="Microsoft.Data.SqlClient.SqlErrorCollection" /> collection. <see href="~/../sqlclient/doc/samples/SqlException_Errors2.cs#1">
            !code-csharp[SqlException_Errors2 Example#1
          </see> ]
        </para>
      </remarks>
      <altmember cref="P:Microsoft.Data.SqlClient.SqlException.Number" />
      <altmember cref="P:Microsoft.Data.SqlClient.SqlException.State" />
      <altmember cref="P:Microsoft.Data.SqlClient.SqlException.Source" />
      <altmember cref="P:Microsoft.Data.SqlClient.SqlException.Class" />
      <altmember cref="P:Microsoft.Data.SqlClient.SqlException.Procedure" />
      <altmember cref="P:Microsoft.Data.SqlClient.SqlException.LineNumber" />
    </Server>
    <Source>
      <summary>
        Gets the name of the provider that generated the error.
      </summary>
      <value>
        The name of the provider that generated the error.
      </value>
      <remarks>
        <para>
          ## Remarks    This is a wrapper for the <see cref="Microsoft.Data.SqlClient.SqlError.Source%2A" /> property of the first <see cref="Microsoft.Data.SqlClient.SqlError" /> in the <see cref="Microsoft.Data.SqlClient.SqlException.Errors%2A" /> property.          ## Examples    The following example displays each <see cref="Microsoft.Data.SqlClient.SqlError" /> within the <see cref="Microsoft.Data.SqlClient.SqlErrorCollection" /> collection. <see href="~/../sqlclient/doc/samples/SqlException_Errors2.cs#1">
            !code-csharp[SqlException_Errors2 Example#1
          </see> ]
        </para>
      </remarks>
      <altmember cref="P:Microsoft.Data.SqlClient.SqlException.Number" />
      <altmember cref="P:Microsoft.Data.SqlClient.SqlException.State" />
      <altmember cref="P:Microsoft.Data.SqlClient.SqlException.Class" />
      <altmember cref="P:Microsoft.Data.SqlClient.SqlException.Server" />
      <altmember cref="P:Microsoft.Data.SqlClient.SqlException.Procedure" />
      <altmember cref="P:Microsoft.Data.SqlClient.SqlException.LineNumber" />
    </Source>
    <BatchCommand>
      <summary>
        Gets the BatchCommand instance that generated the error or null if the exception was not raised from a batch.
      </summary>
      <value>
        A BatchCommand object or null
      </value>
      <remarks />
      <altmember cref="P:Microsoft.Data.SqlClient.SqlException.Number" />
      <altmember cref="P:Microsoft.Data.SqlClient.SqlException.State" />
      <altmember cref="P:Microsoft.Data.SqlClient.SqlException.Class" />
      <altmember cref="P:Microsoft.Data.SqlClient.SqlException.Server" />
      <altmember cref="P:Microsoft.Data.SqlClient.SqlException.Procedure" />
      <altmember cref="P:Microsoft.Data.SqlClient.SqlException.LineNumber" />
    </BatchCommand>
    <DbBatchCommand>
      <summary>
        If this <see cref="T:Microsoft.Data.SqlClient.SqlException" /> was thrown when executing a <see cref="T:Microsoft.Data.SqlClient.SqlBatch" /> , references the specific <see cref="T:Microsoft.Data.SqlClient.SqlBatchCommand" /> which triggered the exception.
      </summary>
      <value>
        The specific <see cref="T:Microsoft.Data.SqlClient.SqlBatchCommand" /> which triggered the exception.
      </value>
      <remarks>
        <para>
          ## Remarks
        </para>
        <para>
          If this <see cref="Microsoft.Data.SqlClient.SqlException" /> wasn't thrown when executing a <see cref="Microsoft.Data.SqlClient.SqlBatch" /> , the value is <c>
            null
          </c> .
        </para>
      </remarks>
    </DbBatchCommand>
    <State>
      <summary>
        Gets a numeric error code from SQL Server that represents an error, warning or "no data found" message. For more information about how to decode these values, see <see href="/sql/relational-databases/errors-events/database-engine-events-and-errors">
          Database Engine Events and Errors
        </see> .
      </summary>
      <value>
        The number representing the error code.
      </value>
      <remarks>
        <para>
          ## Remarks    This is a wrapper for the <see cref="Microsoft.Data.SqlClient.SqlError.State%2A" /> property of the first <see cref="Microsoft.Data.SqlClient.SqlError" /> in the <see cref="Microsoft.Data.SqlClient.SqlException.Errors%2A" /> property.
        </para>
        <para>
          If <see cref="Microsoft.Data.SqlClient.SqlException.Errors%2A" /> is <c>
            null
          </c> , the <see href="https://docs.microsoft.com/dotnet/csharp/language-reference/builtin-types/default-values"> <c>
              default
            </c>
          </see> value for <c>
            byte
          </c> is returned.        ## Examples    The following example displays each <see cref="Microsoft.Data.SqlClient.SqlError" /> within the <see cref="Microsoft.Data.SqlClient.SqlErrorCollection" /> collection. <see href="~/../sqlclient/doc/samples/SqlException_Errors2.cs#1">
            !code-csharp[SqlException_Errors2 Example#1
          </see> ]
        </para>
      </remarks>
      <altmember cref="P:Microsoft.Data.SqlClient.SqlException.Number" />
      <altmember cref="P:Microsoft.Data.SqlClient.SqlException.Class" />
      <altmember cref="P:Microsoft.Data.SqlClient.SqlException.Source" />
      <altmember cref="P:Microsoft.Data.SqlClient.SqlException.Server" />
      <altmember cref="P:Microsoft.Data.SqlClient.SqlException.Procedure" />
      <altmember cref="P:Microsoft.Data.SqlClient.SqlException.LineNumber" />
    </State>
    <ToString>
      <summary>
        Returns a string that represents the current <see cref="T:Microsoft.Data.SqlClient.SqlException" /> object, and includes the client connection ID (for more information, see <see cref="P:Microsoft.Data.SqlClient.SqlException.ClientConnectionId" /> ).
      </summary>
      <returns>
        A string that represents the current <see cref="T:Microsoft.Data.SqlClient.SqlException" /> object. <see cref="T:System.String" /> .
      </returns>
      <remarks>
        <para>
          ## Examples    The following C# example shows how a connection attempt to a valid server but non-existent database causes a <see cref="Microsoft.Data.SqlClient.SqlException" /> , which includes the client connection ID: <c>
            `
          </c> csharp   using Microsoft.Data.SqlClient;   using System;      public class A {      public static void Main() {         SqlConnection connection = new SqlConnection();         connection.ConnectionString = "Data Source=a_valid_server;Initial Catalog=Northwinda;Integrated Security=true";         try {            connection.Open();         }         catch (SqlException p) {            Console.WriteLine("{0}", p.ClientConnectionId);            Console.WriteLine("{0}", p.ToString());         }         connection.Close();      }   } <c>
            `
          </c> The following Visual Basic sample is functionally equivalent to the previous (C#) sample: <c>
            `
          </c> vb   Imports Microsoft.Data.SqlClient   Imports System      Module Module1          Sub Main()           Dim connection As New SqlConnection()           connection.ConnectionString = "Data Source=a_valid_server;Initial Catalog=Northwinda;Integrated Security=true"           Try               connection.Open()           Catch p As SqlException               Console.WriteLine("{0}", p.ClientConnectionId)               Console.WriteLine("{0}", p.ToString())           End Try           connection.Close()       End Sub      End Module <c>
            `
          </c>
        </para>
      </remarks>
    </ToString>
  </members>
</docs>
