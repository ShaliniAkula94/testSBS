<?xml version="1.0" encoding="utf-8" ?>
<Project DefaultTargets="BuildAllConfigurations" xmlns="http://schemas.microsoft.com/developer/msbuild/2003">

  <!-- Import the root-level properties. -->
  <Import Project="build.props" />

  <PropertyGroup>
    <!-- SourceLink variable-->
    <DisableSourceLink>false</DisableSourceLink>

    <RestoreConfigFile>src\NuGet.config</RestoreConfigFile>
    
    <!-- By default we build in Debug for AnyCPU. -->
    <Configuration Condition="'$(Configuration)' == ''">Debug</Configuration>
    <Platform Condition="'$(Platform)' == ''">AnyCPU</Platform>
    
    <!-- Flag to control whether or not to build Microsoft.DotNet.GenAPI project in tools -->
    <BuildTools Condition="'$(BuildTools)' == ''">true</BuildTools>
    
    <!--
      Flag that controls whether or not we generate Nuget packages.
      
      By default, we only do this on Windows, due to the use of PowerShell and
      Windows tooling within the Nuget targets.
    -->
    <GenerateNuget Condition="'$(GenerateNuget)' == '' AND $(OS.StartsWith('Win'))">true</GenerateNuget>

    <!-- The default target runtime to use when running unit tests. -->
    <TestRuntime Condition="$(TestRuntime) == ''">net9.0</TestRuntime>

    <SqlServerLibProperties>Configuration=$(Configuration);AssemblyVersion=$(SqlServerAssemblyVersion);AssemblyFileVersion=$(SqlServerAssemblyFileVersion);Version=$(SqlServerPackageVersion);</SqlServerLibProperties>
    <ProjectProperties>Configuration=$(Configuration);AssemblyFileVersion=$(AssemblyFileVersion);TargetsNetFx=$(TargetsNetFx);</ProjectProperties>
    <TestProjectProperties>BuildProjectReferences=false;$(ProjectProperties);BuildForRelease=false;</TestProjectProperties>
    <ResultsDirectory Condition="$(ResultsDirectory) == ''">TestResults</ResultsDirectory>
    <!-- 
      Path to a `dotnet` version like a x86 or any especific versions in addition to a default installed version.
      This property is empty by default to use the default path of the system's path variable. 
      The provided path should be ended to a `\` character without white spaces: Ex. C:\x86\
    -->
    <DotnetPath></DotnetPath>
    <!-- Using these properties to compile and pack netfx dll fixes nuget package explorer error "Compiler flags: missing" -->
    <NugetPackProperties>DebugType=portable;DebugSymbols=true;IncludeSymbols=true;SymbolPackageFormat=snupkg;PublishRepositoryUrl=true;RepositoryUrl=https://github.com/dotnet/sqlclient;RepositoryType=git;EmbedUnTrackedSources=true;Deterministic=true;</NugetPackProperties>
	  <!-- TF_BUILD is enabled only within AzureDevOps pipeline to support continuous integation build. -->
    <NugetPackProperties Condition="'$(TF_BUILD)' == 'true'">$(NugetPackProperties);ContinuousIntegrationBuild=true;</NugetPackProperties>
  </PropertyGroup>

  <!-- Release Build properties must be turned on for Release purposes, and turned off for Code Coverage calculations -->
  <PropertyGroup>
    <BuildForRelease Condition="$(BuildForRelease) == ''">true</BuildForRelease>
    <CI>ContinuousIntegrationBuild=$(BuildForRelease);EmbedUntrackedSources=$(BuildForRelease)</CI>
  </PropertyGroup>

  <!-- Populate all managed projects -->
  <ItemGroup>
    <SqlServerLib Include="**/Microsoft.SqlServer.Server.csproj" />    
    <NetFxDriver Include="**/netfx/**/Microsoft.Data.SqlClient*.csproj" />
    <NetCoreDriver Include="**/netcore/**/Microsoft.Data.SqlClient*.csproj" />
    <AKVProvider Include="**/add-ons/**/AzureKeyVaultProvider/*.csproj" />

    <FunctionalTests Include="**/tools/TDS/TDS/TDS.csproj" />
    <FunctionalTests Include="**/tools/TDS/TDS.EndPoint/TDS.EndPoint.csproj" />
    <FunctionalTests Include="**/tools/TDS/TDS.Servers/TDS.Servers.csproj" />
    <FunctionalTests Include="**/tools/Microsoft.Data.SqlClient.TestUtilities/Microsoft.Data.SqlClient.TestUtilities.csproj"/>
    <FunctionalTests Include="**/tools/CoreFx.Private.TestUtilities/CoreFx.Private.TestUtilities.csproj" />
    <FunctionalTests Include="**/ManualTests/SQL/UdtTest/UDTs/Address/Address.csproj" />
    <FunctionalTests Include="**/FunctionalTests/Microsoft.Data.SqlClient.Tests.csproj" />
    <FunctionalTestsProj Include="**/FunctionalTests/Microsoft.Data.SqlClient.Tests.csproj" />

    <ManualTests Include="**/ManualTests/SQL/UdtTest/UDTs/Address/Address.csproj" />
    <ManualTests Include="**/ManualTests/SQL/UdtTest/UDTs/Circle/Circle.csproj" />
    <ManualTests Include="**/ManualTests/SQL/UdtTest/UDTs/Shapes/Shapes.csproj" />
    <ManualTests Include="**/ManualTests/SQL/UdtTest/UDTs/Utf8String/Utf8String.csproj" />
    <ManualTests Include="**/tools/Microsoft.Data.SqlClient.TestUtilities/Microsoft.Data.SqlClient.TestUtilities.csproj"/>
    <ManualTests Include="**/tools/CoreFx.Private.TestUtilities/CoreFx.Private.TestUtilities.csproj" />
    <ManualTests Include="**/CustomConfigurableRetryLogic/CustomRetryLogicProvider.csproj" />
    <ManualTests Include="**/ManualTests/Microsoft.Data.SqlClient.ManualTesting.Tests.csproj" />
    <ManualTestsProj Include="**/ManualTests/Microsoft.Data.SqlClient.ManualTesting.Tests.csproj" />
  </ItemGroup>

  <!-- Top Level Build targets -->
  <Target Name="Restore" DependsOnTargets="RestoreSqlServerLib;RestoreNetCore;RestoreNetFx" />
  <Target Name="BuildAll" DependsOnTargets="BuildSqlServerLib;BuildNetFx;BuildNetCore" />
  <Target Name="BuildAllConfigurations" DependsOnTargets="Restore;BuildTools;BuildSqlServerLib;BuildNetFx;BuildNetCoreAllOS;GenerateNugetPackage" />
  <Target Name="BuildSqlServerPackage" DependsOnTargets="BuildSqlServerLibAnyOS;GenerateSqlServerPackage"/>
  <Target Name="BuildTests" DependsOnTargets="BuildAKV;BuildFunctionalTests;BuildManualTests"/>

  <!-- Restore Targets -->
  <Target Name="RestoreSqlServerLib">
    <MSBuild Projects="@(SqlServerLib)" Targets="restore" />
  </Target>

  <Target Name="RestoreNetCore">
    <MSBuild Projects="@(NetCoreDriver)" Targets="restore" />
  </Target>

  <Target Name="RestoreNetFx">
    <MSBuild Projects="@(NetFxDriver)" Targets="restore"  />
  </Target>

  <Target Name="RestoreTests">
    <MSBuild Projects="@(ManualTests)" Targets="restore" Properties="$(TestProjectProperties)" />
    <MSBuild Projects="@(FunctionalTests)" Targets="restore" Properties="$(TestProjectProperties)" />
  </Target>

  <!-- Build Targets -->
  <Target Name="BuildTools" Condition="'$(BuildTools)' == 'true'">
    <PropertyGroup>
      <DotnetBuildCmd>dotnet build -c Release -p:ReferenceType=$(ReferenceType)</DotnetBuildCmd>
    </PropertyGroup>
    <Exec Command="$(DotnetBuildCmd)" WorkingDirectory="$(GenAPISrcDir)Microsoft.DotNet.GenAPI\" />
  </Target>

  <Target Name="BuildNetFx" DependsOnTargets="RestoreNetFx">
    <MSBuild Projects="@(NetFxDriver)" Properties="$(CI);Platform=AnyCPU;$(ProjectProperties);$(NugetPackProperties);" />
  </Target>

  <Target Name="BuildSqlServerLibAnyOS" DependsOnTargets="RestoreSqlServerLib">
    <MSBuild Projects="@(SqlServerLib)" Properties="$(CI);$(SqlServerLibProperties);Platform=AnyCPU;OSGroup=AnyOS" />
  </Target>

  <Target Name="BuildSqlServerLib" DependsOnTargets="RestoreSqlServerLib">
    <Message Text=">>> Building SqlServerLib [$(CI);$(SqlServerLibProperties);Platform=AnyCPU;ReferenceType=$(ReferenceType);] ..." Condition="!$(ReferenceType.Contains('Package'))"/>
    <MSBuild Projects="@(SqlServerLib)" Properties="$(CI);$(SqlServerLibProperties);Platform=AnyCPU;" Condition="!$(ReferenceType.Contains('Package'))" />

    <!-- Only build platform specific builds for Package reference types -->
    <Message Text=">>> Building SqlServerLib [$(CI);$(SqlServerLibProperties);Platform=$(Platform);ReferenceType=$(ReferenceType);] ..." Condition="$(ReferenceType.Contains('Package'))"/>
    <MSBuild Projects="@(SqlServerLib)" Properties="$(CI);$(SqlServerLibProperties);Platform=$(Platform);" Condition="$(ReferenceType.Contains('Package'))"/>
  </Target>

  <Target Name="BuildNetCore" DependsOnTargets="RestoreNetCore">
    <MSBuild Projects="@(NetCoreDriver)" Properties="$(CI);Platform=AnyCPU;$(ProjectProperties)" />
  </Target>

  <Target Name="BuildNetCoreAllOS" DependsOnTargets="RestoreNetCore">
    <MSBuild Projects="@(NetCoreDriver)" Properties="$(CI);$(ProjectProperties);Platform=AnyCPU;OSGroup=Unix;" />
    <MSBuild Projects="@(NetCoreDriver)" Properties="$(CI);$(ProjectProperties);Platform=AnyCPU;OSGroup=Windows_NT;" />
    <MSBuild Projects="@(NetCoreDriver)" Properties="$(CI);$(ProjectProperties);Platform=AnyCPU;OSGroup=AnyOS;" />
  </Target>

  <!-- Build Tests Targets -->
  <Target Name="BuildFunctionalTests" DependsOnTargets="RestoreTests">
    <Message Text=">>> Building FunctionalTestsNetCore [$(TestProjectProperties);Platform=AnyCPU;ReferenceType=$(ReferenceType);] ..." Condition="!$(ReferenceType.Contains('Package'))"/>
    <MSBuild Projects="@(FunctionalTests)" Properties="$(TestProjectProperties);Platform=AnyCPU;" Condition="!$(ReferenceType.Contains('Package'))" />

    <!-- Only build platform specific builds for Package reference types -->
    <Message Text=">>> Building FunctionalTests [$(TestProjectProperties);Platform=$(Platform);ReferenceType=$(ReferenceType);] ..." Condition="$(ReferenceType.Contains('Package'))"/>
    <MSBuild Projects="@(FunctionalTests)" Properties="$(TestProjectProperties);Platform=$(Platform);" Condition="$(ReferenceType.Contains('Package'))"/>
  </Target>

  <Target Name="BuildManualTests" DependsOnTargets="RestoreTests">
    <Message Text=">>> Building ManualTests [$(TestProjectProperties);Platform=AnyCPU;ReferenceType=$(ReferenceType);] ..." Condition="!$(ReferenceType.Contains('Package'))"/>
    <MSBuild Projects="@(ManualTests)" Properties="$(TestProjectProperties);Platform=AnyCPU;" Condition="!$(ReferenceType.Contains('Package'))"/>

    <!-- Only build platform specific builds for Package reference types -->
    <Message Text=">>> Building ManualTests [$(TestProjectProperties);Platform=$(Platform);ReferenceType=$(ReferenceType);] ..." Condition="$(ReferenceType.Contains('Package'))"/>
    <MSBuild Projects="@(ManualTests)" Properties="$(TestProjectProperties);Platform=$(Platform);" Condition="$(ReferenceType.Contains('Package'))"/>
  </Target>

  <!-- Run Tests Targets -->
  <Target Name="RunTests" DependsOnTargets="RunFunctionalTests;RunManualTests"/>
  <Target Name="RunFunctionalTests" DependsOnTargets="RunFunctionalTestsNetFx;RunFunctionalTestsNetCore"/>
  <Target Name="RunManualTests" DependsOnTargets="RunManualTestsNetFx;RunManualTestsNetCore"/>
  
  <Target Name="RunFunctionalTestsNetFx">
    <!-- Windows NetFx -->
    <Exec
      Condition="$(OS.StartsWith('Win'))"
      ConsoleToMsBuild="true"
      Command="$(DotnetPath)dotnet test &quot;@(FunctionalTestsProj)&quot; -p:Configuration=$(Configuration) -f $(TestRuntime) -p:ReferenceType=$(ReferenceType) --no-build -v n --collect &quot;Code coverage&quot; -p:TestSet=$(TestSet) --results-directory $(ResultsDirectory) --filter &quot;category!=nonnetfxtests&amp;category!=failing&amp;category!=nonwindowstests&quot; &quot;--logger:trx;LogFilePrefix=Functional-Windowsnetfx-$(TestSet)&quot;" />
  </Target>
  <Target Name="RunFunctionalTestsNetCore">
    <!-- Windows NetCore -->
    <Exec
      Condition="$(OS.StartsWith('Win'))"
      ConsoleToMsBuild="true"
      Command="$(DotnetPath)dotnet test &quot;@(FunctionalTestsProj)&quot; -p:Configuration=$(Configuration) -f $(TestRuntime) -p:ReferenceType=$(ReferenceType) --no-build -v n --collect &quot;Code coverage&quot; -p:TestSet=$(TestSet) --results-directory $(ResultsDirectory) --filter &quot;category!=nonnetcoreapptests&amp;category!=failing&amp;category!=nonwindowstests&quot; &quot;--logger:trx;LogFilePrefix=Functional-Windowsnetcoreapp-$(TestSet)&quot;" />
    <!-- Unix NetCore -->
    <Exec
      Condition="! $(OS.StartsWith('Win'))"
      ConsoleToMsBuild="true"
      Command="$(DotnetPath)dotnet test &quot;@(FunctionalTestsProj)&quot; -p:Configuration=$(Configuration) -f $(TestRuntime) -p:ReferenceType=$(ReferenceType) --no-build -v n -p:TestSet=$(TestSet) --results-directory $(ResultsDirectory)  --collect &quot;Code coverage&quot; --filter &quot;category!=nonnetcoreapptests&amp;category!=failing&amp;category!=nonlinuxtests&amp;category!=nonuaptests&quot; &quot;--logger:trx;LogFilePrefix=Functional-Unixnetcoreapp-$(TestSet)&quot;" />
  </Target>

  <Target Name="RunManualTestsNetFx">
    <!-- Windows NetFx -->
    <Exec
      Condition="$(OS.StartsWith('Win'))"
      ConsoleToMsBuild="true"
      Command="$(DotnetPath)dotnet test &quot;@(ManualTestsProj)&quot; -p:Configuration=$(Configuration) -f $(TestRuntime) -p:ReferenceType=$(ReferenceType) --no-build -l &quot;console;verbosity=normal&quot; --collect &quot;Code coverage&quot; -p:TestSet=$(TestSet) --results-directory $(ResultsDirectory) --filter &quot;category!=nonnetfxtests&amp;category!=failing&amp;category!=nonwindowstests&quot; &quot;--logger:trx;LogFilePrefix=Manual-Windowsnetfx-$(TestSet)&quot;" />
  </Target>
  <Target Name="RunManualTestsNetCore">
    <!-- Windows NetCore -->
    <Exec
      Condition="$(OS.StartsWith('Win'))"
      ConsoleToMsBuild="true"
      Command="$(DotnetPath)dotnet test &quot;@(ManualTestsProj)&quot; -p:Configuration=$(Configuration) -f $(TestRuntime) -p:ReferenceType=$(ReferenceType) --no-build -l &quot;console;verbosity=normal&quot; --collect &quot;Code coverage&quot; -p:TestSet=$(TestSet) --results-directory $(ResultsDirectory) --filter &quot;category!=non$netcoreapptests&amp;category!=failing&amp;category!=nonwindowstests&quot; &quot;--logger:trx;LogFilePrefix=Manual-Windowsnetcoreapp-$(TestSet)&quot;" />
    <!-- Unix -->
    <Exec
      Condition="! $(OS.StartsWith('Win'))"
      ConsoleToMsBuild="true"
      Command="$(DotnetPath)dotnet test &quot;@(ManualTestsProj)&quot; -p:Configuration=$(Configuration) -f $(TestRuntime) -p:ReferenceType=$(ReferenceType) --no-build -l &quot;console;verbosity=normal&quot; --collect &quot;Code coverage&quot; -p:TestSet=$(TestSet) --results-directory $(ResultsDirectory) --filter &quot;category!=nonnetcoreapptests&amp;category!=failing&amp;category!=nonlinuxtests&amp;category!=nonuaptests&quot; &quot;--logger:trx;LogFilePrefix=Manual-Unixnetcoreapp-$(TestSet)&quot;" />
  </Target>

  <Target Name="Clean">
    <RemoveDir Directories='$([System.IO.Directory]::GetDirectories(".","artifacts", SearchOption.AllDirectories))'>
      <Output TaskParameter="RemovedDirectories" ItemName="Clean_RemovedDirs" />
    </RemoveDir>
    <RemoveDir Directories='$([System.IO.Directory]::GetDirectories(".","bin", SearchOption.AllDirectories))'>
      <Output TaskParameter="RemovedDirectories" ItemName="Clean_RemovedDirs" />
    </RemoveDir>
    <RemoveDir Directories='$([System.IO.Directory]::GetDirectories(".","obj", SearchOption.AllDirectories))'>
      <Output TaskParameter="RemovedDirectories" ItemName="Clean_RemovedDirs" />
    </RemoveDir>
    <RemoveDir Directories='$([System.IO.Directory]::GetDirectories(".","packages", SearchOption.AllDirectories))'>
      <Output TaskParameter="RemovedDirectories" ItemName="Clean_RemovedDirs" />
    </RemoveDir>
    <RemoveDir Directories='$([System.IO.Directory]::GetDirectories(".",".nuget", SearchOption.AllDirectories))'>
      <Output TaskParameter="RemovedDirectories" ItemName="Clean_RemovedDirs" />
    </RemoveDir>

    <Message Text="Removed directories: @(Clean_RemovedDirs)" />
  </Target>

  <Target Name="BuildAKV">
    <Message Text=">>> Building AKV [$(CI);$(ProjectProperties);Platform=AnyCPU;$(NugetPackProperties);ReferenceType=$(ReferenceType);] ..." Condition="!$(ReferenceType.Contains('Package'))"/>

    <MSBuild Projects="@(AKVProvider)" Targets="restore" Properties="$(ProjectProperties)" />
    
    <MSBuild Projects="@(AKVProvider)" Properties="$(CI);$(ProjectProperties);Platform=AnyCPU;$(NugetPackProperties);" Condition="!$(ReferenceType.Contains('Package'))"/>

    <!-- Only build platform specific builds for Package reference types -->
    <Message Text=">>> Building AKV [$(CI);$(ProjectProperties);Platform=$(Platform);$(NugetPackProperties);ReferenceType=$(ReferenceType);] ..." Condition="$(ReferenceType.Contains('Package'))"/>
    <MSBuild Projects="@(AKVProvider)" Properties="$(CI);$(ProjectProperties);Platform=$(Platform);$(NugetPackProperties);" Condition="$(ReferenceType.Contains('Package'))"/>
  </Target>

  <Target Name="BuildAKVAllOS">
    <MSBuild Projects="@(AKVProvider)" Targets="restore" />
    <MSBuild Projects="@(AKVProvider)" Properties="$(CI);$(ProjectProperties);Platform=AnyCPU;OSGroup=Unix;" />
    <MSBuild Projects="@(AKVProvider)" Properties="$(CI);$(ProjectProperties);Platform=AnyCPU;OSGroup=Windows_NT;" />
    <MSBuild Projects="@(AKVProvider)" Properties="$(CI);$(ProjectProperties);Platform=AnyCPU;OSGroup=AnyOS;" />
  </Target>

  <!-- Import some additional targets. -->
  <Import Project="$(ToolsDir)targets\GenerateNugetPackage.targets" />
  <Import Project="$(ToolsDir)targets\add-ons\GenerateAKVProviderNugetPackage.targets" />

</Project>
