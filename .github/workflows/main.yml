name: CI

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

jobs:
  build:
    runs-on: windows-latest

    steps:
      - uses: actions/checkout@v2
      - uses: microsoft/setup-msbuild@v1.0.2
        with:
          vs-version: '14.0'
      - uses: nuget/setup-nuget@v1
      - name: workaround netcore
        shell: powershell
        run: |
          $path = 'src/Microsoft.Data.SqlClient/netcore/src/Microsoft/Data/SqlClient/TdsParser.cs'
          $content = Get-Content $path -Raw
          $content = $content.Replace(
            'SendPreLoginHandshake(instanceName, encrypt);',
            '// SendPreLoginHandshake(instanceName, encrypt);'
          ).Replace(
            'PreLoginHandshakeStatus status = ConsumePreLoginHandshake(encrypt, trustServerCert, integratedSecurity, out marsCapable, out _connHandler._fedAuthRequired);',
            'PreLoginHandshakeStatus status = PreLoginHandshakeStatus.Successful;'
          )
          $content | Set-Content -Path $path
      - name: workaround netfx
        shell: powershell
        run: |
          $path = 'src/Microsoft.Data.SqlClient/netfx/src/Microsoft/Data/SqlClient/TdsParser.cs'
          $content = Get-Content $path -Raw
          $content = $content.Replace(
          'SendPreLoginHandshake(instanceName, encrypt, !string.IsNullOrEmpty(certificate), useOriginalAddressInfo);',
          '// SendPreLoginHandshake(instanceName, encrypt, !string.IsNullOrEmpty(certificate), useOriginalAddressInfo);'
          ).Replace(
          'PreLoginHandshakeStatus status = ConsumePreLoginHandshake(authType, encrypt, trustServerCert, integratedSecurity, serverCallback, clientCallback,',
          'PreLoginHandshakeStatus status = PreLoginHandshakeStatus.Successful; // PreLoginHandshakeStatus status = ConsumePreLoginHandshake(authType, encrypt, trustServerCert, integratedSecurity, serverCallback, clientCallback,'
          ).Replace(
          'out marsCapable, out _connHandler._fedAuthRequired);',
          '// out marsCapable, out _connHandler._fedAuthRequired);'
          )
          $content | Set-Content -Path $path
      - name: rename
        shell: powershell
        run: |
          $file = Get-Item tools/specs/Microsoft.Data.SqlClient.nuspec
          $spec = [xml] (Get-Content $file.FullName)
          $spec.package.metadata.id = 'Rabota.Data.SqlClient'
          $spec.package.metadata.title = 'Rabota.Data.SqlClient'
          $spec.Save($file.FullName)
      - run: msbuild /t:BuildAllConfigurations /p:Configuration=Release /p:NugetPackageVersion=3.0.${{ github.run_number }}
      - run: dir packages
      - uses: actions/upload-artifact@v2
        with:
          name: nuget
          path: packages/*.nupkg
